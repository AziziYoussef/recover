y===== FILE: ./app/admin/layout.tsx =====
"use client";
import Link from 'next/link';
import React, { useEffect } from 'react';
import { useRouter } from 'next/navigation';

export default function AdminLayout({ children }: { children: React.ReactNode }) {
  const router = useRouter();
  useEffect(() => {
    if (typeof window !== 'undefined' && localStorage.getItem('isAdmin') !== 'true') {
      router.push('/admin/login');
    }
  }, [router]);

  return (
    <div className="flex min-h-screen">
      <aside className="w-64 bg-gray-900 text-white flex flex-col p-6 space-y-4">
        <h2 className="text-xl font-bold mb-8">Admin Panel</h2>
        <nav className="flex flex-col space-y-2">
          <Link href="/admin" className="hover:bg-gray-800 rounded px-3 py-2">Dashboard</Link>
          <Link href="/admin/users" className="hover:bg-gray-800 rounded px-3 py-2">Users</Link>
          <Link href="/admin/objects" className="hover:bg-gray-800 rounded px-3 py-2">Objects</Link>
          <button onClick={() => { localStorage.removeItem('isAdmin'); router.push('/admin/login'); }} className="hover:bg-gray-800 rounded px-3 py-2 mt-8 text-left">Logout</button>
        </nav>
      </aside>
      <section className="flex-1 bg-gray-50">
        {children}
      </section>
    </div>
  );
} 


===== FILE: ./app/admin/login/page.tsx =====
"use client";
import { useState } from "react";
import { useRouter } from "next/navigation";

export default function AdminLoginPage() {
  const [username, setUsername] = useState("");
  const [password, setPassword] = useState("");
  const [error, setError] = useState("");
  const router = useRouter();

  function handleSubmit(e: React.FormEvent) {
    e.preventDefault();
    // Simple check (replace with real backend auth later)
    if (username === "admin" && password === "admin123") {
      localStorage.setItem("isAdmin", "true");
      router.push("/admin");
    } else {
      setError("Invalid credentials");
    }
  }

  return (
    <div className="flex items-center justify-center min-h-screen bg-gray-100">
      <form onSubmit={handleSubmit} className="bg-white p-8 rounded shadow-md w-96">
        <h1 className="text-2xl font-bold mb-6">Admin Login</h1>
        {error && <div className="text-red-500 mb-4">{error}</div>}
        <input
          type="text"
          placeholder="Username"
          value={username}
          onChange={e => setUsername(e.target.value)}
          className="w-full mb-4 px-3 py-2 border rounded"
        />
        <input
          type="password"
          placeholder="Password"
          value={password}
          onChange={e => setPassword(e.target.value)}
          className="w-full mb-6 px-3 py-2 border rounded"
        />
        <button type="submit" className="w-full bg-blue-600 text-white py-2 rounded hover:bg-blue-700">Login</button>
      </form>
    </div>
  );
} 


===== FILE: ./app/admin/objects/page.tsx =====
"use client";
import React, { useEffect, useState } from "react";

interface LostObject {
  id: number;
  name: string;
  status: string;
}

const API_BASE = "http://localhost:8080";

export default function AdminObjectsPage() {
  const [objects, setObjects] = useState<LostObject[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");
  const [success, setSuccess] = useState("");

  useEffect(() => {
    setLoading(true);
    fetch(`${API_BASE}/admin/items`)
      .then(res => {
        if (!res.ok) throw new Error("Failed fetch objects");
        return res.json();
      })
      .then(data => {
        setObjects(data);
        setLoading(false);
      })
      .catch(err => {
        setError(err.message);
        setLoading(false);
      });
  }, []);

  function handleValidate(id: number) {
    setError(""); setSuccess("");
    fetch(`${API_BASE}/admin/items/${id}`, { method: "PUT", headers: { "Content-Type": "application/json" }, body: JSON.stringify({ status: "validated" }) })
      .then(res => {
        if (!res.ok) throw new Error("Failed update object");
        return res.json();
      })
      .then(updated => {
        setObjects(objs => objs.map(obj => (obj.id === id ? updated : obj)));
        setSuccess("Object validated successfully");
      })
      .catch(err => setError(err.message));
  }

  function handleDelete(id: number) {
    setError(""); setSuccess("");
    fetch(`${API_BASE}/admin/items/${id}`, { method: "DELETE" })
      .then(res => {
        if (!res.ok) throw new Error("Failed delete object");
        setObjects(objs => objs.filter(obj => obj.id !== id));
        setSuccess("Object deleted successfully");
      })
      .catch(err => setError(err.message));
  }

  return (
    <main className="p-8">
      <h1 className="text-2xl font-bold mb-4">Object Management</h1>
      {error && <div className="text-red-500 mb-2">{error}</div>}
      {success && <div className="text-green-600 mb-2">{success}</div>}
      {loading ? <p>Loading objects...</p> : (
        <table className="min-w-full bg-white border">
          <thead>
            <tr>
              <th className="px-4 py-2 border">Name</th>
              <th className="px-4 py-2 border">Status</th>
              <th className="px-4 py-2 border">Actions</th>
            </tr>
          </thead>
          <tbody>
            {objects.map(obj => (
              <tr key={obj.id}>
                <td className="px-4 py-2 border">{obj.name}</td>
                <td className="px-4 py-2 border">{obj.status}</td>
                <td className="px-4 py-2 border space-x-2">
                  {obj.status !== "validated" && (
                    <button onClick={() => handleValidate(obj.id)} className="bg-green-500 text-white px-3 py-1 rounded hover:bg-green-600">Validate</button>
                  )}
                  <button onClick={() => handleDelete(obj.id)} className="bg-red-500 text-white px-3 py-1 rounded hover:bg-red-600">Delete</button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      )}
    </main>
  );
} 


===== FILE: ./app/admin/page.tsx =====
"use client";
import React, { useEffect, useState } from "react";

const API_BASE = "http://localhost:8080";

export default function AdminDashboard() {
  const [stats, setStats] = useState<{ totalItems: number; totalUsers: number; totalAbandoned: number; totalClaimed: number; totalReturned: number }>({ totalItems: 0, totalUsers: 0, totalAbandoned: 0, totalClaimed: 0, totalReturned: 0 });
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");
  const [success, setSuccess] = useState("");

  useEffect(() => {
    setLoading(true);
    fetch(`${API_BASE}/admin/dashboard`)
      .then(res => {
        if (!res.ok) throw new Error("Failed fetch dashboard stats");
        return res.json();
      })
      .then(data => {
         // Assume backend returns AdminDashboardDto (with keys totalItems, totalUsers, totalAbandoned, totalClaimed, totalReturned)
         setStats({ totalItems: data.totalItems, totalUsers: data.totalUsers, totalAbandoned: data.totalAbandoned, totalClaimed: data.totalClaimed, totalReturned: data.totalReturned });
         setLoading(false);
      })
      .catch(err => {
         setError(err.message);
         setLoading(false);
      });
  }, []);

  return (
    <main className="p-8">
      <h1 className="text-3xl font-bold mb-4">Admin Dashboard</h1>
      <p>Welcome to the admin panel. Use the sidebar to manage users, objects, and more.</p>
      {error && <div className="text-red-500 mt-2">{error}</div>}
      {success && <div className="text-green-600 mt-2">{success}</div>}
      <div className="mt-8">
        {loading ? <p>Loading stats...</p> : (
          <div className="grid grid-cols-3 gap-6">
            <div className="bg-white rounded shadow p-6 text-center">
              <div className="text-2xl font-bold">{stats.totalItems}</div>
              <div className="text-gray-600">Total Items</div>
            </div>
            <div className="bg-white rounded shadow p-6 text-center">
              <div className="text-2xl font-bold">{stats.totalUsers}</div>
              <div className="text-gray-600">Total Users</div>
            </div>
            <div className="bg-white rounded shadow p-6 text-center">
              <div className="text-2xl font-bold">{stats.totalAbandoned}</div>
              <div className="text-gray-600">Total Abandoned</div>
            </div>
            <div className="bg-white rounded shadow p-6 text-center">
              <div className="text-2xl font-bold">{stats.totalClaimed}</div>
              <div className="text-gray-600">Total Claimed</div>
            </div>
            <div className="bg-white rounded shadow p-6 text-center">
              <div className="text-2xl font-bold">{stats.totalReturned}</div>
              <div className="text-gray-600">Total Returned</div>
            </div>
          </div>
        )}
      </div>
    </main>
  );
} 


===== FILE: ./app/admin/users/page.tsx =====
"use client";
import React, { useEffect, useState } from "react";

interface User {
  id: number;
  username: string;
  email: string;
}

const API_BASE = "http://localhost:8080";

export default function AdminUsersPage() {
  const [users, setUsers] = useState<User[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");
  const [success, setSuccess] = useState("");

  useEffect(() => {
    setLoading(true);
    fetch(`${API_BASE}/admin/users`)
      .then(res => {
        if (!res.ok) throw new Error("Failed fetch users");
        return res.json();
      })
      .then(data => {
         // Assume backend returns a list of UserDto (with keys id, username, email)
         setUsers(data);
         setLoading(false);
      })
      .catch(err => {
         setError(err.message);
         setLoading(false);
      });
  }, []);

  function handleDelete(id: number) {
    setError(""); setSuccess("");
    fetch(`${API_BASE}/admin/users/${id}`, { method: "DELETE" })
      .then(res => {
         if (!res.ok) throw new Error("Failed delete user");
         setUsers(users => users.filter(u => u.id !== id));
         setSuccess("User deleted successfully");
      })
      .catch(err => setError(err.message));
  }

  return (
    <main className="p-8">
      <h1 className="text-2xl font-bold mb-4">User Management</h1>
      {error && <div className="text-red-500 mb-2">{error}</div>}
      {success && <div className="text-green-600 mb-2">{success}</div>}
      {loading ? <p>Loading users...</p> : (
        <table className="min-w-full bg-white border">
          <thead>
            <tr>
              <th className="px-4 py-2 border">Username</th>
              <th className="px-4 py-2 border">Email</th>
              <th className="px-4 py-2 border">Actions</th>
            </tr>
          </thead>
          <tbody>
            {users.map(user => (
              <tr key={user.id}>
                <td className="px-4 py-2 border">{user.username}</td>
                <td className="px-4 py-2 border">{user.email}</td>
                <td className="px-4 py-2 border">
                  <button onClick={() => handleDelete(user.id)} className="bg-red-500 text-white px-3 py-1 rounded hover:bg-red-600">Delete</button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      )}
    </main>
  );
} 


===== FILE: ./app/analytics/page.tsx =====
"use client"

import { useState } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Tabs, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Button } from "@/components/ui/button"
import { Calendar } from "@/components/ui/calendar"
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover"
import { format } from "date-fns"
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  Legend,
  ResponsiveContainer,
  PieChart,
  Pie,
  Cell,
  LineChart,
  Line,
  AreaChart,
  Area,
  ScatterChart,
  Scatter,
  ZAxis,
  RadarChart,
  PolarGrid,
  PolarAngleAxis,
  PolarRadiusAxis,
  Radar,
} from "recharts"
import { CalendarIcon, Download, Share2 } from "lucide-react"

// Mock data for analytics
const MONTHLY_DETECTIONS = [
  { name: "Jan", bags: 65, electronics: 42, accessories: 28, other: 15 },
  { name: "Feb", bags: 59, electronics: 39, accessories: 32, other: 18 },
  { name: "Mar", bags: 80, electronics: 48, accessories: 35, other: 21 },
  { name: "Apr", bags: 81, electronics: 55, accessories: 30, other: 19 },
  { name: "May", bags: 56, electronics: 49, accessories: 38, other: 22 },
  { name: "Jun", bags: 55, electronics: 51, accessories: 35, other: 25 },
  { name: "Jul", bags: 40, electronics: 37, accessories: 30, other: 20 },
  { name: "Aug", bags: 45, electronics: 43, accessories: 36, other: 22 },
  { name: "Sep", bags: 62, electronics: 50, accessories: 39, other: 26 },
  { name: "Oct", bags: 68, electronics: 56, accessories: 45, other: 28 },
  { name: "Nov", bags: 71, electronics: 60, accessories: 50, other: 30 },
  { name: "Dec", bags: 85, electronics: 65, accessories: 55, other: 35 },
]

const RECOVERY_TREND = [
  { name: "Jan", rate: 65 },
  { name: "Feb", rate: 68 },
  { name: "Mar", rate: 72 },
  { name: "Apr", rate: 75 },
  { name: "May", rate: 82 },
  { name: "Jun", rate: 85 },
  { name: "Jul", rate: 86 },
  { name: "Aug", rate: 88 },
  { name: "Sep", rate: 87 },
  { name: "Oct", rate: 89 },
  { name: "Nov", rate: 90 },
  { name: "Dec", rate: 92 },
]

const LOCATION_DISTRIBUTION = [
  { name: "Library", value: 32 },
  { name: "Cafeteria", value: 24 },
  { name: "Computer Lab", value: 18 },
  { name: "Main Hall", value: 14 },
  { name: "Gym", value: 12 },
]

const COLORS = ["#0088FE", "#00C49F", "#FFBB28", "#FF8042", "#8884D8"]

const DETECTION_TIME = [
  { hour: "00:00", count: 5 },
  { hour: "02:00", count: 3 },
  { hour: "04:00", count: 2 },
  { hour: "06:00", count: 8 },
  { hour: "08:00", count: 25 },
  { hour: "10:00", count: 38 },
  { hour: "12:00", count: 45 },
  { hour: "14:00", count: 42 },
  { hour: "16:00", count: 35 },
  { hour: "18:00", count: 28 },
  { hour: "20:00", count: 15 },
  { hour: "22:00", count: 8 },
]

const DETECTION_ACCURACY = [
  { category: "Bags", accuracy: 94 },
  { category: "Electronics", accuracy: 92 },
  { category: "Accessories", accuracy: 88 },
  { category: "Clothing", accuracy: 85 },
  { category: "Other", accuracy: 80 },
]

const DETECTION_SCATTER = [
  { x: 10, y: 30, z: 200, name: "Backpack" },
  { x: 30, y: 100, z: 260, name: "Laptop" },
  { x: 45, y: 150, z: 280, name: "Smartphone" },
  { x: 70, y: 220, z: 375, name: "Wallet" },
  { x: 90, y: 70, z: 190, name: "Water Bottle" },
  { x: 110, y: 130, z: 320, name: "Umbrella" },
  { x: 150, y: 185, z: 280, name: "Headphones" },
  { x: 170, y: 210, z: 340, name: "Tablet" },
  { x: 190, y: 160, z: 270, name: "Book" },
]

export default function AnalyticsPage() {
  const [date, setDate] = useState(new Date())
  const [timeRange, setTimeRange] = useState("year")

  return (
    <div className="container py-8">
      <div className="flex flex-col space-y-6">
        <div className="flex flex-col space-y-2">
          <h1 className="text-3xl font-bold">Analytics Dashboard</h1>
          <p className="text-muted-foreground">
            Comprehensive analytics and insights for the lost object detection system
          </p>
        </div>

        <div className="flex flex-col md:flex-row justify-between items-center gap-4">
          <Tabs defaultValue="year" value={timeRange} onValueChange={setTimeRange} className="w-full md:w-auto">
            <TabsList>
              <TabsTrigger value="day">Day</TabsTrigger>
              <TabsTrigger value="week">Week</TabsTrigger>
              <TabsTrigger value="month">Month</TabsTrigger>
              <TabsTrigger value="year">Year</TabsTrigger>
            </TabsList>
          </Tabs>

          <div className="flex items-center gap-2">
            <Popover>
              <PopoverTrigger asChild>
                <Button variant="outline" className="w-[240px] justify-start text-left font-normal">
                  <CalendarIcon className="mr-2 h-4 w-4" />
                  {date ? format(date, "PPP") : <span>Pick a date</span>}
                </Button>
              </PopoverTrigger>
              <PopoverContent className="w-auto p-0" align="end">
                <Calendar mode="single" selected={date} onSelect={(date) => date && setDate(date)} initialFocus />
              </PopoverContent>
            </Popover>

            <Button variant="outline" size="icon">
              <Download className="h-4 w-4" />
            </Button>
            <Button variant="outline" size="icon">
              <Share2 className="h-4 w-4" />
            </Button>
          </div>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
          <Card>
            <CardHeader className="pb-2">
              <CardTitle className="text-sm font-medium">Total Detections</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">1,248</div>
              <p className="text-xs text-muted-foreground">+12.5% from previous period</p>
            </CardContent>
          </Card>
          <Card>
            <CardHeader className="pb-2">
              <CardTitle className="text-sm font-medium">Recovery Rate</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">92%</div>
              <p className="text-xs text-muted-foreground">+7% from previous period</p>
            </CardContent>
          </Card>
          <Card>
            <CardHeader className="pb-2">
              <CardTitle className="text-sm font-medium">Avg. Detection Time</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">28s</div>
              <p className="text-xs text-muted-foreground">-2.1s from previous period</p>
            </CardContent>
          </Card>
          <Card>
            <CardHeader className="pb-2">
              <CardTitle className="text-sm font-medium">Detection Accuracy</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">94%</div>
              <p className="text-xs text-muted-foreground">+1.5% from previous period</p>
            </CardContent>
          </Card>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          <Card>
            <CardHeader>
              <CardTitle>Monthly Detections by Category</CardTitle>
              <CardDescription>Number of objects detected per month by category</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="h-[400px]">
                <ResponsiveContainer width="100%" height="100%">
                  <BarChart data={MONTHLY_DETECTIONS} margin={{ top: 20, right: 30, left: 0, bottom: 0 }}>
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis dataKey="name" />
                    <YAxis />
                    <Tooltip />
                    <Legend />
                    <Bar dataKey="bags" name="Bags" fill="#0088FE" />
                    <Bar dataKey="electronics" name="Electronics" fill="#00C49F" />
                    <Bar dataKey="accessories" name="Accessories" fill="#FFBB28" />
                    <Bar dataKey="other" name="Other" fill="#FF8042" />
                  </BarChart>
                </ResponsiveContainer>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle>Recovery Rate Trend</CardTitle>
              <CardDescription>Percentage of items recovered over time</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="h-[400px]">
                <ResponsiveContainer width="100%" height="100%">
                  <AreaChart data={RECOVERY_TREND} margin={{ top: 20, right: 30, left: 0, bottom: 0 }}>
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis dataKey="name" />
                    <YAxis />
                    <Tooltip />
                    <Area type="monotone" dataKey="rate" stroke="#0088FE" fill="#0088FE" fillOpacity={0.2} />
                  </AreaChart>
                </ResponsiveContainer>
              </div>
            </CardContent>
          </Card>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          <Card>
            <CardHeader>
              <CardTitle>Location Distribution</CardTitle>
              <CardDescription>Areas with most lost items</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="h-[300px]">
                <ResponsiveContainer width="100%" height="100%">
                  <PieChart>
                    <Pie
                      data={LOCATION_DISTRIBUTION}
                      cx="50%"
                      cy="50%"
                      labelLine={false}
                      outerRadius={80}
                      fill="#8884d8"
                      dataKey="value"
                      label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}
                    >
                      {LOCATION_DISTRIBUTION.map((entry, index) => (
                        <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                      ))}
                    </Pie>
                    <Tooltip />
                  </PieChart>
                </ResponsiveContainer>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle>Detection Time Distribution</CardTitle>
              <CardDescription>Number of detections by time of day</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="h-[300px]">
                <ResponsiveContainer width="100%" height="100%">
                  <LineChart data={DETECTION_TIME} margin={{ top: 20, right: 30, left: 0, bottom: 0 }}>
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis dataKey="hour" />
                    <YAxis />
                    <Tooltip />
                    <Line type="monotone" dataKey="count" stroke="#0088FE" strokeWidth={2} />
                  </LineChart>
                </ResponsiveContainer>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle>Detection Accuracy by Category</CardTitle>
              <CardDescription>Model accuracy for different object types</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="h-[300px]">
                <ResponsiveContainer width="100%" height="100%">
                  <RadarChart cx="50%" cy="50%" outerRadius={80} data={DETECTION_ACCURACY}>
                    <PolarGrid />
                    <PolarAngleAxis dataKey="category" />
                    <PolarRadiusAxis angle={30} domain={[0, 100]} />
                    <Radar
                      name="Accuracy"
                      dataKey="accuracy"
                      stroke="#0088FE"
                      fill="#0088FE"
                      fillOpacity={0.6}
                    />
                    <Tooltip />
                  </RadarChart>
                </ResponsiveContainer>
              </div>
            </CardContent>
          </Card>
        </div>

        <Card>
          <CardHeader>
            <CardTitle>Object Detection Correlation</CardTitle>
            <CardDescription>
              Relationship between detection time (x), confidence score (y), and object size (z)
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="h-[400px]">
              <ResponsiveContainer width="100%" height="100%">
                <ScatterChart margin={{ top: 20, right: 30, bottom: 10, left: 10 }}>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis
                    dataKey="x"
                    name="Processing Time"
                    unit="ms"
                    label={{ value: "Processing Time (ms)", position: "bottom", offset: 0 }}
                  />
                  <YAxis
                    dataKey="y"
                    name="Confidence"
                    unit="%"
                    label={{ value: "Confidence Score (%)", angle: -90, position: "left" }}
                  />
                  <ZAxis dataKey="z" range={[60, 400]} name="Size" unit="px" />
                  <Tooltip cursor={{ strokeDasharray: "3 3" }} />
                  <Legend />
                  <Scatter name="Objects" data={DETECTION_SCATTER} fill="#0088FE" />
                </ScatterChart>
              </ResponsiveContainer>
            </div>
          </CardContent>
        </Card>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          <Card>
            <CardHeader>
              <CardTitle>System Performance Metrics</CardTitle>
              <CardDescription>Key performance indicators over time</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="h-[300px]">
                <ResponsiveContainer width="100%" height="100%">
                  <LineChart
                    data={[
                      { name: "Jan", cpu: 45, memory: 60, storage: 30 },
                      { name: "Feb", cpu: 50, memory: 65, storage: 35 },
                      { name: "Mar", cpu: 55, memory: 70, storage: 40 },
                      { name: "Apr", cpu: 60, memory: 75, storage: 45 },
                      { name: "May", cpu: 65, memory: 80, storage: 50 },
                      { name: "Jun", cpu: 70, memory: 85, storage: 55 },
                      { name: "Jul", cpu: 75, memory: 90, storage: 60 },
                      { name: "Aug", cpu: 70, memory: 85, storage: 65 },
                      { name: "Sep", cpu: 65, memory: 80, storage: 70 },
                      { name: "Oct", cpu: 60, memory: 75, storage: 75 },
                      { name: "Nov", cpu: 55, memory: 70, storage: 80 },
                      { name: "Dec", cpu: 50, memory: 65, storage: 85 },
                    ]}
                    margin={{ top: 20, right: 30, left: 0, bottom: 0 }}
                  >
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis dataKey="name" />
                    <YAxis />
                    <Tooltip />
                    <Legend />
                    <Line type="monotone" dataKey="cpu" name="CPU Usage (%)" stroke="#0088FE" />
                    <Line type="monotone" dataKey="memory" name="Memory Usage (%)" stroke="#00C49F" />
                    <Line type="monotone" dataKey="storage" name="Storage Usage (%)" stroke="#FFBB28" />
                  </LineChart>
                </ResponsiveContainer>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle>User Activity</CardTitle>
              <CardDescription>System usage and user interactions</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="h-[300px]">
                <ResponsiveContainer width="100%" height="100%">
                  <BarChart
                    data={[
                      { name: "Jan", reports: 120, searches: 180, claims: 45 },
                      { name: "Feb", reports: 110, searches: 165, claims: 40 },
                      { name: "Mar", reports: 130, searches: 200, claims: 55 },
                      { name: "Apr", reports: 125, searches: 195, claims: 50 },
                      { name: "May", reports: 140, searches: 220, claims: 65 },
                      { name: "Jun", reports: 135, searches: 210, claims: 60 },
                      { name: "Jul", reports: 145, searches: 230, claims: 70 },
                      { name: "Aug", reports: 150, searches: 235, claims: 75 },
                      { name: "Sep", reports: 155, searches: 240, claims: 80 },
                      { name: "Oct", reports: 160, searches: 250, claims: 85 },
                      { name: "Nov", reports: 165, searches: 260, claims: 90 },
                      { name: "Dec", reports: 170, searches: 270, claims: 95 },
                    ]}
                    margin={{ top: 20, right: 30, left: 0, bottom: 0 }}
                  >
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis dataKey="name" />
                    <YAxis />
                    <Tooltip />
                    <Legend />
                    <Bar dataKey="reports" name="Reports" fill="#0088FE" />
                    <Bar dataKey="searches" name="Searches" fill="#00C49F" />
                    <Bar dataKey="claims" name="Claims" fill="#FFBB28" />
                  </BarChart>
                </ResponsiveContainer>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  )
}



===== FILE: ./app/api/auth/[...nextauth]/route.ts =====
import NextAuth from "next-auth"
import { authOptions } from "@/lib/auth-options"

// Export authOptions for use in other files
export { authOptions }

// Export the NextAuth handler
const handler = NextAuth(authOptions)

export { handler as GET, handler as POST }



===== FILE: ./app/api/auth/register/route.ts =====
import { NextResponse } from "next/server";
import bcrypt from "bcryptjs";
import { z } from "zod";

// User registration schema for validation
const userSchema = z.object({
  name: z.string().min(2, "Name must be at least 2 characters"),
  email: z.string().email("Invalid email address"),
  password: z.string().min(8, "Password must be at least 8 characters"),
  contactInformation: z.string().optional(),
});

// Define the User type to avoid type errors
type MockUser = {
  _id: string;
  name: string;
  email: string;
  password: string;
  role: string;
  contactInformation?: string;
};

// Mock database for development
let mockUsers: MockUser[] = [
  {
    _id: "user-1",
    name: "Test User",
    email: "test@example.com",
    password: bcrypt.hashSync("password123", 12),
    role: "user",
    contactInformation: "555-123-4567",
  }
];

export async function POST(request: Request) {
  try {
    const body = await request.json();

    // Validate request body
    const validation = userSchema.safeParse(body);
    if (!validation.success) {
      return NextResponse.json(
        { error: "Invalid data", details: validation.error.issues },
        { status: 400 }
      );
    }

    const { name, email, password, contactInformation } = validation.data;

    // In development, simulate database operations with mock data
    // Check if user already exists
    const existingUser = mockUsers.find(user => user.email === email);
    if (existingUser) {
      return NextResponse.json(
        { error: "User already exists with this email" },
        { status: 400 }
      );
    }

    // Hash the password
    const hashedPassword = await bcrypt.hash(password, 12);

    // Create new user in mock database
    const newUser: MockUser = {
      _id: `user-${mockUsers.length + 1}`,
      name,
      email,
      password: hashedPassword,
      contactInformation,
      role: "user",
    };
    
    mockUsers.push(newUser);

    // Remove password from response
    const safeUser = {
      id: newUser._id,
      name: newUser.name,
      email: newUser.email,
    };

    console.log("User registered successfully:", email);
    
    return NextResponse.json(
      { message: "User registered successfully", user: safeUser },
      { status: 201 }
    );
  } catch (error) {
    console.error("Error registering user:", error);
    return NextResponse.json(
      { error: "An error occurred during registration" },
      { status: 500 }
    );
  }
} 


===== FILE: ./app/api/dashboard/route.ts =====
import { NextRequest, NextResponse } from 'next/server';

const API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8080';

export async function GET(request: NextRequest) {
  try {
    // Get the time range from query parameters
    const searchParams = request.nextUrl.searchParams;
    const timeRange = searchParams.get('timeRange') || 'week';

    // Fetch all dashboard data in parallel
    const [stats, recentDetections, categoryDistribution, recoveryRate] = await Promise.all([
      // Get overall statistics
      fetch(`${API_BASE_URL}/api/dashboard/stats?timeRange=${timeRange}`).then(res => res.json()),
      
      // Get recent detections
      fetch(`${API_BASE_URL}/api/detection/recent?limit=5`).then(res => res.json()),
      
      // Get category distribution
      fetch(`${API_BASE_URL}/api/dashboard/categories`).then(res => res.json()),
      
      // Get recovery rate over time
      fetch(`${API_BASE_URL}/api/dashboard/recovery-rate?timeRange=${timeRange}`).then(res => res.json())
    ]);

    // Transform the data to match the frontend format
    const transformedData = {
      stats: {
        totalDetections: stats.totalDetections,
        detectionChange: stats.detectionChange,
        recoveryRate: stats.recoveryRate,
        recoveryChange: stats.recoveryChange,
        activeUsers: stats.activeUsers,
        userChange: stats.userChange,
      },
      recentDetections: recentDetections.map((detection: any) => ({
        id: detection.id,
        name: detection.name || 'Unnamed Item',
        location: detection.location || 'Unknown Location',
        timestamp: detection.detectionDate,
        image: detection.imageUrl || '/placeholder.svg',
        confidence: Math.round(detection.confidence * 100),
      })),
      categoryDistribution: categoryDistribution.map((cat: any) => ({
        name: cat.name,
        value: cat.count,
      })),
      recoveryRate: recoveryRate.map((rate: any) => ({
        name: rate.month,
        rate: rate.percentage,
      })),
    };

    return NextResponse.json(transformedData);
  } catch (error) {
    console.error('Error fetching dashboard data:', error);
    return NextResponse.json(
      { error: 'Failed to fetch dashboard data' },
      { status: 500 }
    );
  }
} 


===== FILE: ./app/api/lost-objects/route.ts =====
import { NextRequest, NextResponse } from 'next/server';
import connectToDatabase from "@/lib/mongodb"
import LostObject from "@/lib/models/LostObject"
import { getServerSession } from "next-auth"
import { authOptions } from "@/app/api/auth/[...nextauth]/route"

const API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8080';

// GET /api/lost-objects
export async function GET(request: NextRequest) {
  try {
    // Get search parameters from the request
    const searchParams = request.nextUrl.searchParams;
    const query = searchParams.get('query');
    const category = searchParams.get('category');
    const page = searchParams.get('page') || '0';
    const size = searchParams.get('size') || '10';
    
    // Build the API URL with query parameters
    let url = `${API_BASE_URL}/api/items/public?page=${page}&size=${size}`;
    if (query) url += `&query=${encodeURIComponent(query)}`;
    if (category && category !== 'all') url += `&category=${encodeURIComponent(category)}`;

    // Fetch data from Spring Boot backend
    const response = await fetch(url, {
      headers: {
        'Content-Type': 'application/json',
      },
    });

    if (!response.ok) {
      throw new Error(`API responded with status: ${response.status}`);
    }

    const data = await response.json();

    // Transform the data to match the frontend format
    const transformedData = {
      objects: data.content.map((item: any) => ({
        id: item.id,
        name: item.name || 'Unnamed Item',
        location: item.location || 'Unknown Location',
        date: item.detectionDate ? new Date(item.detectionDate).toISOString().split('T')[0] : 'Unknown Date',
        time: item.detectionDate ? new Date(item.detectionDate).toTimeString().split(' ')[0] : 'Unknown Time',
        image: item.imageUrl || '/placeholder.svg',
        category: item.category?.toLowerCase() || 'other',
        description: item.description,
        status: item.status,
      })),
      totalItems: data.totalElements,
      totalPages: data.totalPages,
      currentPage: data.number,
    };
    
    return NextResponse.json(transformedData);
  } catch (error) {
    console.error('Error fetching lost objects:', error);
    return NextResponse.json(
      { error: 'Failed to fetch lost objects' },
      { status: 500 }
    );
  }
}

// POST /api/lost-objects
export async function POST(request: Request) {
  try {
    await connectToDatabase()
    
    // Get session or use mock user if session is not available
    let session = null
    try {
      session = await getServerSession(authOptions)
    } catch (err) {
      console.warn("Session error:", err)
    }
    
    // Create a mock session for development if needed
    if (!session && process.env.NODE_ENV === 'development') {
      console.warn("Using mock session for development")
      session = {
        user: {
          id: 'mock-user-id',
          email: 'mock@example.com',
          name: 'Mock User'
        }
      }
    }
    
    // Check authentication in production
    if (!session && process.env.NODE_ENV === 'production') {
      return NextResponse.json(
        { error: "Authentication required" },
        { status: 401 }
      )
    }
    
    const data = await request.json()

    // Validate required fields
    if (!data.name || !data.location || !data.category || !data.image) {
      return NextResponse.json(
        { error: "Missing required fields" },
        { status: 400 }
      )
    }

    let newObject
    try {
      // Create new object with user reference
      newObject = await LostObject.create({
        ...data,
        reporter: session?.user?.id || 'anonymous',
        date: data.date || new Date(),
        time: data.time || new Date().toTimeString().split(" ")[0].substring(0, 5),
        status: "found"
      })
    } catch (err) {
      console.warn("Error creating document in database:", err)
      
      // Create a mock response for development
      if (process.env.NODE_ENV === 'development') {
        newObject = {
          _id: `mock-${Date.now()}`,
          ...data,
          reporter: session?.user?.id || 'anonymous',
          date: data.date || new Date(),
          time: data.time || new Date().toTimeString().split(" ")[0].substring(0, 5),
          status: "found",
          createdAt: new Date()
        }
      } else {
        throw err
      }
    }

    return NextResponse.json(
      { message: "Object reported successfully", object: newObject },
      { status: 201 }
    )
  } catch (error) {
    console.error("Error creating lost object:", error)
    return NextResponse.json(
      { error: "Failed to process request" },
      { status: 500 }
    )
  }
}



===== FILE: ./app/api/search/image/route.ts =====
import { NextRequest, NextResponse } from 'next/server';

const API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8080';

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { features, minScore } = body;
    
    if (!features || !Array.isArray(features)) {
      return NextResponse.json(
        { error: 'Invalid features data' },
        { status: 400 }
      );
    }
    
    // Send search request to Spring Boot backend
    const response = await fetch(`${API_BASE_URL}/api/search/image`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        features,
        minScore: minScore || 0.7,
      }),
    });

    if (!response.ok) {
      throw new Error(`API responded with status: ${response.status}`);
    }

    const data = await response.json();

    // Transform the results to match the frontend format
    const transformedResults = data.results.map((item: any) => ({
      id: item.id,
      name: item.name || 'Unnamed Item',
      location: item.location || 'Unknown Location',
      date: item.detectionDate ? new Date(item.detectionDate).toISOString().split('T')[0] : 'Unknown Date',
      image: item.imageUrl || '/placeholder.svg',
      matchScore: Math.round(item.similarityScore * 100),
      category: item.category?.toLowerCase() || 'other',
    }));
    
    return NextResponse.json({
      results: transformedResults,
      totalMatches: data.totalMatches,
    });
  } catch (error) {
    console.error('Error performing image search:', error);
    return NextResponse.json(
      { error: 'Failed to perform image search' },
      { status: 500 }
    );
  }
}

// Add server config to handle larger payloads (feature vectors)
export const config = {
  api: {
    responseLimit: '8mb',
    bodyParser: {
      sizeLimit: '8mb',
    },
  },
}; 


===== FILE: ./app/api/search/route.ts =====
import { NextResponse } from "next/server"

// Mock database for lost objects (same as in lost-objects route)
const MOCK_LOST_OBJECTS = [
  {
    id: 1,
    name: "Black Backpack",
    location: "Library, 2nd Floor",
    date: "2025-05-15",
    time: "14:30",
    image: "/placeholder.svg?height=200&width=200",
    category: "bag",
    description: "Black backpack with red logo, contains laptop and notebooks",
    status: "found",
    coordinates: { x: 150, y: 120 },
  },
  {
    id: 2,
    name: "Blue Smartphone",
    location: "Cafeteria",
    date: "2025-05-16",
    time: "12:15",
    image: "/placeholder.svg?height=200&width=200",
    category: "electronics",
    description: "Samsung Galaxy S22, blue case with scratches on screen",
    status: "found",
    coordinates: { x: 320, y: 280 },
  },
  // More objects would be here in a real implementation
]

// POST /api/search
export async function POST(request: Request) {
  try {
    const data = await request.json()

    // This would be where the image matching algorithm would run
    // For now, we'll simulate results with mock data and random match scores

    if (data.searchType === "photo") {
      // In a real implementation, this would:
      // 1. Process the uploaded image
      // 2. Extract features or embeddings
      // 3. Compare with database images
      // 4. Return matches with confidence scores

      // For demo purposes, return mock results with simulated match scores
      const results = MOCK_LOST_OBJECTS.filter((obj) => obj.category === (data.category || obj.category))
        .map((obj) => ({
          ...obj,
          matchScore: Math.floor(Math.random() * 40) + 60, // Random score between 60-99
        }))
        .sort((a, b) => b.matchScore - a.matchScore)
        .slice(0, 5) // Return top 5 matches

      return NextResponse.json({ results })
    } else if (data.searchType === "details") {
      // Filter objects based on provided details
      let filteredObjects = [...MOCK_LOST_OBJECTS]

      if (data.category) {
        filteredObjects = filteredObjects.filter((obj) => obj.category === data.category)
      }

      if (data.color) {
        filteredObjects = filteredObjects.filter((obj) =>
          obj.description.toLowerCase().includes(data.color.toLowerCase()),
        )
      }

      if (data.description) {
        const keywords = data.description.toLowerCase().split(" ")
        filteredObjects = filteredObjects.filter((obj) =>
          keywords.some(
            (keyword) => obj.name.toLowerCase().includes(keyword) || obj.description.toLowerCase().includes(keyword),
          ),
        )
      }

      if (data.location) {
        filteredObjects = filteredObjects.filter((obj) =>
          obj.location.toLowerCase().includes(data.location.toLowerCase()),
        )
      }

      // Calculate a simple relevance score
      const results = filteredObjects
        .map((obj) => {
          let score = 70 // Base score

          // Increase score based on matches
          if (data.category && obj.category === data.category) score += 10
          if (data.color && obj.description.toLowerCase().includes(data.color.toLowerCase())) score += 5
          if (data.location && obj.location.toLowerCase().includes(data.location.toLowerCase())) score += 5

          return {
            ...obj,
            matchScore: Math.min(score, 99), // Cap at 99
          }
        })
        .sort((a, b) => b.matchScore - a.matchScore)

      return NextResponse.json({ results })
    }

    return NextResponse.json({ error: "Invalid search type" }, { status: 400 })
  } catch (error) {
    return NextResponse.json({ error: "Failed to process search request" }, { status: 500 })
  }
}



===== FILE: ./app/api/upload/route.ts =====
import { NextResponse } from "next/server";
import { getServerSession } from "next-auth";
import { authOptions } from "@/app/api/auth/[...nextauth]/route";
import { uploadImage } from "@/lib/cloudinary";
import { extractImageFeatures } from "@/lib/ai/feature-extraction";

// Maximum file size (5MB)
const MAX_FILE_SIZE = 5 * 1024 * 1024;

export async function POST(request: Request) {
  try {
    // Check authentication
    let session = null;
    try {
      session = await getServerSession(authOptions);
    } catch (err) {
      console.warn("Session error:", err);
    }
    
    // In development, allow uploads without authentication
    if (!session && process.env.NODE_ENV !== 'development') {
      return NextResponse.json(
        { error: "Authentication required" },
        { status: 401 }
      );
    }

    // Parse form data with file
    const formData = await request.formData();
    const file = formData.get("file") as File | null;

    if (!file) {
      return NextResponse.json(
        { error: "No file provided" },
        { status: 400 }
      );
    }

    // Validate file type
    if (!file.type.startsWith("image/")) {
      return NextResponse.json(
        { error: "File must be an image" },
        { status: 400 }
      );
    }

    // Validate file size
    if (file.size > MAX_FILE_SIZE) {
      return NextResponse.json(
        { error: "File size exceeds 5MB limit" },
        { status: 400 }
      );
    }

    // Convert file to buffer
    const bytes = await file.arrayBuffer();
    const buffer = Buffer.from(bytes);

    // Upload to Cloudinary
    const imageData = await uploadImage(buffer);

    // Extract image features for AI matching (if available)
    let features = null;
    try {
      features = await extractImageFeatures(imageData.url);
    } catch (error) {
      console.warn("Feature extraction failed:", error);
      // Continue without features if extraction fails
    }

    return NextResponse.json({
      success: true,
      image: {
        url: imageData.url,
        publicId: imageData.publicId,
        width: imageData.width,
        height: imageData.height,
        features,
      },
    });
  } catch (error) {
    console.error("Error uploading image:", error);
    return NextResponse.json(
      { error: "Image upload failed" },
      { status: 500 }
    );
  }
}

// Configure Next.js to handle larger file sizes
export const config = {
  api: {
    bodyParser: false,
    responseLimit: '10mb',
  },
}; 


===== FILE: ./app/auth/register/page.tsx =====
"use client"

import { useState } from "react"
import { useForm } from "react-hook-form"
import { zodResolver } from "@hookform/resolvers/zod"
import { z } from "zod"
import { useRouter } from "next/navigation"
import Link from "next/link"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { Loader2 } from "lucide-react"

// Form validation schema
const registerSchema = z.object({
  name: z.string().min(2, "Name must be at least 2 characters"),
  email: z.string().email("Please enter a valid email address"),
  password: z.string().min(8, "Password must be at least 8 characters"),
  contactInformation: z.string().optional(),
})
.refine(data => data.name.trim().length > 0, {
  message: "Name cannot be empty",
  path: ["name"],
})

type RegisterFormValues = z.infer<typeof registerSchema>

export default function RegisterPage() {
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const [success, setSuccess] = useState(false)
  const router = useRouter()

  const { register, handleSubmit, formState: { errors } } = useForm<RegisterFormValues>({
    resolver: zodResolver(registerSchema),
    defaultValues: {
      name: "",
      email: "",
      password: "",
      contactInformation: "",
    },
  })

  const onSubmit = async (data: RegisterFormValues) => {
    setLoading(true)
    setError(null)
    setSuccess(false)

    try {
      console.log("Attempting to register:", data.email);
      
      const response = await fetch("/api/auth/register", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(data),
      })

      const result = await response.json()

      if (!response.ok) {
        // Show existing account message for test@example.com
        if (data.email === "test@example.com") {
          setError("This email is already in use. Please try another email or sign in.")
        } else {
          setError(result.error || "Registration failed")
        }
        setLoading(false)
        return
      }

      setSuccess(true)
      
      // Redirect to sign in page after short delay
      setTimeout(() => {
        router.push("/auth/signin")
      }, 2000)
    } catch (err) {
      setError("An error occurred during registration")
      setLoading(false)
    }
  }

  return (
    <div className="container mx-auto flex min-h-screen items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
      <div className="w-full max-w-md space-y-8">
        <div className="text-center">
          <h1 className="text-3xl font-bold tracking-tight">Create an Account</h1>
          <p className="text-muted-foreground mt-3">Register to report and find lost items</p>
          
          {/* Development mode notice */}
          <Alert className="mt-6 bg-blue-50 border-blue-200">
            <AlertDescription className="text-blue-700">
              Development Mode: Try any email except <strong>test@example.com</strong> which is already registered
            </AlertDescription>
          </Alert>
        </div>

        <Card className="shadow-lg">
          <CardHeader className="space-y-1">
            <CardTitle className="text-2xl text-center">Register</CardTitle>
            <CardDescription className="text-center">Enter your details to create a new account</CardDescription>
          </CardHeader>
          <form onSubmit={handleSubmit(onSubmit)}>
            <CardContent className="space-y-4 pt-2">
              {error && (
                <Alert variant="destructive">
                  <AlertDescription>{error}</AlertDescription>
                </Alert>
              )}
              
              {success && (
                <Alert className="border-green-500 bg-green-50 text-green-700">
                  <AlertDescription>
                    Registration successful! Redirecting to sign in...
                  </AlertDescription>
                </Alert>
              )}
              
              <div className="space-y-2">
                <Label htmlFor="name">Full Name</Label>
                <Input 
                  id="name" 
                  placeholder="John Doe" 
                  {...register("name")}
                />
                {errors.name && (
                  <p className="text-sm text-destructive">{errors.name.message}</p>
                )}
              </div>
              
              <div className="space-y-2">
                <Label htmlFor="email">Email</Label>
                <Input 
                  id="email" 
                  type="email" 
                  placeholder="you@example.com" 
                  {...register("email")}
                />
                {errors.email && (
                  <p className="text-sm text-destructive">{errors.email.message}</p>
                )}
              </div>
              
              <div className="space-y-2">
                <Label htmlFor="password">Password</Label>
                <Input 
                  id="password" 
                  type="password" 
                  placeholder="••••••••" 
                  {...register("password")} 
                />
                {errors.password && (
                  <p className="text-sm text-destructive">{errors.password.message}</p>
                )}
              </div>
              
              <div className="space-y-2">
                <Label htmlFor="contactInformation">Contact Information (Optional)</Label>
                <Input 
                  id="contactInformation" 
                  placeholder="Phone number or other contact info" 
                  {...register("contactInformation")}
                />
                {errors.contactInformation && (
                  <p className="text-sm text-destructive">{errors.contactInformation.message}</p>
                )}
              </div>
            </CardContent>
            <CardFooter className="flex flex-col">
              <Button type="submit" className="w-full" disabled={loading || success}>
                {loading ? (
                  <>
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                    Registering...
                  </>
                ) : (
                  "Register"
                )}
              </Button>
              <div className="mt-4 text-center text-sm">
                Already have an account?{" "}
                <Link href="/auth/signin" className="text-primary hover:underline">
                  Sign In
                </Link>
              </div>
            </CardFooter>
          </form>
        </Card>
      </div>
    </div>
  )
} 


===== FILE: ./app/auth/signin/page.tsx =====
"use client"

import { useState } from "react"
import { useForm } from "react-hook-form"
import { signIn } from "next-auth/react"
import { zodResolver } from "@hookform/resolvers/zod"
import { z } from "zod"
import { useRouter } from "next/navigation"
import Link from "next/link"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Loader2, Mail } from "lucide-react"

// Form validation schema
const loginSchema = z.object({
  email: z.string().email("Please enter a valid email address"),
  password: z.string().min(8, "Password must be at least 8 characters"),
})

type LoginFormValues = z.infer<typeof loginSchema>

export default function SignInPage() {
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const router = useRouter()

  const { register, handleSubmit, formState: { errors } } = useForm<LoginFormValues>({
    resolver: zodResolver(loginSchema),
    defaultValues: {
      email: "",
      password: "",
    },
  })

  const onSubmit = async (data: LoginFormValues) => {
    setLoading(true)
    setError(null)

    try {
      // For development, show test account credentials
      console.log("Attempting login with:", data.email);
      
      // For development, you can use:
      // test@example.com / password123
      // admin@example.com / admin123
      const result = await signIn("credentials", {
        redirect: false,
        email: data.email,
        password: data.password,
      })

      if (result?.error) {
        setError("Invalid email or password")
        setLoading(false)
        return
      }

      // Redirect to home page on successful login
      router.push("/")
      router.refresh()
    } catch (err) {
      setError("An error occurred during sign-in")
      setLoading(false)
    }
  }

  const handleGoogleSignIn = async () => {
    setLoading(true)
    // In development, use a mock flow
    setError("Social login is disabled in development mode. Please use credentials.")
    setLoading(false)
    // In production: await signIn("google", { callbackUrl: "/" })
  }

  return (
    <div className="container mx-auto flex min-h-screen items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
      <div className="w-full max-w-md space-y-8">
        <div className="text-center">
          <h1 className="text-3xl font-bold tracking-tight">Welcome Back</h1>
          <p className="text-muted-foreground mt-3">Sign in to your account to continue</p>
          
          {/* Development mode notice */}
          <Alert className="mt-6 bg-blue-50 border-blue-200">
            <AlertDescription className="text-blue-700">
              Development Mode: Use <strong>test@example.com / password123</strong> to login
            </AlertDescription>
          </Alert>
        </div>

        <Tabs defaultValue="credentials" className="w-full">
          <TabsList className="grid w-full grid-cols-2 mb-6">
            <TabsTrigger value="credentials">Email & Password</TabsTrigger>
            <TabsTrigger value="providers">Social Login</TabsTrigger>
          </TabsList>

          <TabsContent value="credentials">
            <Card className="shadow-lg">
              <CardHeader className="space-y-1">
                <CardTitle className="text-2xl text-center">Sign In</CardTitle>
                <CardDescription className="text-center">Enter your credentials below</CardDescription>
              </CardHeader>
              <form onSubmit={handleSubmit(onSubmit)}>
                <CardContent className="space-y-4 pt-2">
                  {error && (
                    <Alert variant="destructive">
                      <AlertDescription>{error}</AlertDescription>
                    </Alert>
                  )}
                  <div className="space-y-2">
                    <Label htmlFor="email">Email</Label>
                    <Input 
                      id="email" 
                      type="email" 
                      placeholder="you@example.com" 
                      {...register("email")}
                    />
                    {errors.email && (
                      <p className="text-sm text-destructive">{errors.email.message}</p>
                    )}
                  </div>
                  <div className="space-y-2">
                    <div className="flex items-center justify-between">
                      <Label htmlFor="password">Password</Label>
                      <Link 
                        href="/auth/forgot-password" 
                        className="text-sm text-primary hover:underline"
                      >
                        Forgot password?
                      </Link>
                    </div>
                    <Input 
                      id="password" 
                      type="password" 
                      {...register("password")} 
                    />
                    {errors.password && (
                      <p className="text-sm text-destructive">{errors.password.message}</p>
                    )}
                  </div>
                </CardContent>
                <CardFooter className="flex flex-col">
                  <Button type="submit" className="w-full" disabled={loading}>
                    {loading ? (
                      <>
                        <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                        Signing In...
                      </>
                    ) : (
                      "Sign In"
                    )}
                  </Button>
                  <div className="mt-4 text-center text-sm">
                    Don't have an account?{" "}
                    <Link href="/auth/register" className="text-primary hover:underline">
                      Register
                    </Link>
                  </div>
                </CardFooter>
              </form>
            </Card>
          </TabsContent>

          <TabsContent value="providers">
            <Card className="shadow-lg">
              <CardHeader className="space-y-1">
                <CardTitle className="text-2xl text-center">Social Login</CardTitle>
                <CardDescription className="text-center">Sign in using your social accounts</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4 pt-2">
                <Button 
                  variant="outline" 
                  className="w-full" 
                  onClick={handleGoogleSignIn}
                  disabled={loading}
                >
                  {loading ? (
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  ) : (
                    <svg className="mr-2 h-4 w-4" viewBox="0 0 24 24">
                      <path
                        fill="currentColor"
                        d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"
                      />
                      <path
                        fill="currentColor"
                        d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"
                      />
                      <path
                        fill="currentColor"
                        d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"
                      />
                      <path
                        fill="currentColor"
                        d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"
                      />
                    </svg>
                  )}
                  Sign in with Google
                </Button>
                
                <Button 
                  variant="outline" 
                  className="w-full" 
                  onClick={() => setError("Email link is disabled in development mode")}
                  disabled={loading}
                >
                  <Mail className="mr-2 h-4 w-4" />
                  Sign in with Email Link
                </Button>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  )
} 


===== FILE: ./app/components/footer.tsx =====
"use client"

import Link from "next/link"
import Image from "next/image"
import { Mail, Phone, MapPin, Github, Linkedin, Twitter } from "lucide-react"

export function Footer() {
  const currentYear = new Date().getFullYear()

  return (
    <footer className="border-t bg-background/80 backdrop-blur-lg w-full">
      <div className="max-w-[1800px] mx-auto px-4 sm:px-6 lg:px-8">
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8 py-12">
          {/* Brand column */}
          <div className="space-y-4">
            <Link href="/" className="inline-block">
              <Image src="/logo.svg" alt="RECOVR Logo" width={140} height={40} />
            </Link>
            <p className="text-sm text-muted-foreground max-w-xs">
              Using advanced AI technology to help you recover your lost belongings quickly and efficiently.
            </p>
            <div className="flex items-center space-x-4 mt-4">
              <Link href="#" className="text-muted-foreground hover:text-primary transition-colors">
                <Github className="h-5 w-5" />
                <span className="sr-only">GitHub</span>
              </Link>
              <Link href="#" className="text-muted-foreground hover:text-primary transition-colors">
                <Twitter className="h-5 w-5" />
                <span className="sr-only">Twitter</span>
              </Link>
              <Link href="#" className="text-muted-foreground hover:text-primary transition-colors">
                <Linkedin className="h-5 w-5" />
                <span className="sr-only">LinkedIn</span>
              </Link>
            </div>
          </div>

          {/* Quick links */}
          <div>
            <h3 className="text-base font-medium mb-4">Quick Links</h3>
            <ul className="space-y-2">
              {[
                { title: "Home", href: "/" },
                { title: "Lost Items", href: "/lost-objects" },
                { title: "Report Item", href: "/report" },
                { title: "Find Item", href: "/search" },
                { title: "Map", href: "/map" },
              ].map((link) => (
                <li key={link.title}>
                  <Link 
                    href={link.href}
                    className="text-sm text-muted-foreground hover:text-primary transition-colors"
                  >
                    {link.title}
                  </Link>
                </li>
              ))}
            </ul>
          </div>

          {/* Resources */}
          <div>
            <h3 className="text-base font-medium mb-4">Resources</h3>
            <ul className="space-y-2">
              {[
                { title: "Help Center", href: "/help" },
                { title: "Privacy Policy", href: "/privacy" },
                { title: "Terms of Service", href: "/terms" },
                { title: "FAQ", href: "/faq" },
                { title: "Blog", href: "/blog" },
              ].map((link) => (
                <li key={link.title}>
                  <Link 
                    href={link.href}
                    className="text-sm text-muted-foreground hover:text-primary transition-colors"
                  >
                    {link.title}
                  </Link>
                </li>
              ))}
            </ul>
          </div>

          {/* Contact info */}
          <div>
            <h3 className="text-base font-medium mb-4">Contact</h3>
            <ul className="space-y-3">
              <li className="flex items-start space-x-3 text-sm">
                <MapPin className="h-5 w-5 text-muted-foreground shrink-0" />
                <span className="text-muted-foreground">
                  123 Recovery Street, Tech Park<br />
                  San Francisco, CA 94107
                </span>
              </li>
              <li className="flex items-center space-x-3 text-sm">
                <Mail className="h-5 w-5 text-muted-foreground" />
                <a href="mailto:contact@recovr.tech" className="text-muted-foreground hover:text-primary transition-colors">
                  contact@recovr.tech
                </a>
              </li>
              <li className="flex items-center space-x-3 text-sm">
                <Phone className="h-5 w-5 text-muted-foreground" />
                <a href="tel:+1-800-RECOVR" className="text-muted-foreground hover:text-primary transition-colors">
                  +1-800-RECOVR
                </a>
              </li>
            </ul>
          </div>
        </div>

        <div className="border-t py-6 flex flex-col sm:flex-row justify-between items-center">
          <p className="text-xs text-muted-foreground">
            © {currentYear} RECOVR Technologies. All rights reserved.
          </p>
          <div className="flex items-center space-x-4 mt-4 sm:mt-0">
            <Link href="/privacy" className="text-xs text-muted-foreground hover:text-primary transition-colors">
              Privacy
            </Link>
            <Link href="/terms" className="text-xs text-muted-foreground hover:text-primary transition-colors">
              Terms
            </Link>
            <Link href="/cookies" className="text-xs text-muted-foreground hover:text-primary transition-colors">
              Cookies
            </Link>
          </div>
        </div>
      </div>
    </footer>
  )
} 


===== FILE: ./app/dashboard/loading.tsx =====
export default function Loading() {
  return null
}



===== FILE: ./app/dashboard/page.tsx =====
"use client"

import { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Badge } from "@/components/ui/badge"
import { Progress } from "@/components/ui/progress"
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  ResponsiveContainer,
  PieChart,
  Pie,
  Cell,
  LineChart,
  Line,
} from "recharts"
import {
  ArrowUpRight,
  ArrowDownRight,
  Package,
  Users,
  CameraIcon,
  Clock,
  MapPin,
  Search,
  Bell,
  Settings,
  LogOut,
  Loader2,
} from "lucide-react"
import Image from "next/image"
import Link from "next/link"

const COLORS = ["#0088FE", "#00C49F", "#FFBB28", "#FF8042", "#8884D8"]

interface DashboardData {
  stats: {
    totalDetections: number;
    detectionChange: number;
    recoveryRate: number;
    recoveryChange: number;
    activeUsers: number;
    userChange: number;
  };
  recentDetections: Array<{
    id: string;
    name: string;
    location: string;
    timestamp: string;
    image: string;
    confidence: number;
  }>;
  categoryDistribution: Array<{
    name: string;
    value: number;
  }>;
  recoveryRate: Array<{
    name: string;
    rate: number;
  }>;
}

export default function DashboardPage() {
  const [activeTab, setActiveTab] = useState("overview")
  const [data, setData] = useState<DashboardData | null>(null)
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [timeRange, setTimeRange] = useState("week")

  // Load dashboard data
  useEffect(() => {
    const loadDashboardData = async () => {
      setLoading(true);
      setError(null);
      
      try {
        const response = await fetch(`/api/dashboard?timeRange=${timeRange}`);
        
        if (!response.ok) {
          throw new Error("Failed to fetch dashboard data");
        }
        
        const dashboardData = await response.json();
        setData(dashboardData);
        
      } catch (err) {
        console.error("Error loading dashboard data:", err);
        setError("Failed to load dashboard data. Please try again.");
      } finally {
        setLoading(false);
      }
    };
    
    loadDashboardData();
  }, [timeRange]);

  // Format numbers with + or - sign
  const formatChange = (value: number) => {
    const sign = value >= 0 ? "+" : "";
    return `${sign}${value}%`;
  };

  // Format timestamp to relative time
  const formatTimestamp = (timestamp: string) => {
    const date = new Date(timestamp);
    const now = new Date();
    const diff = now.getTime() - date.getTime();
    
    const minutes = Math.floor(diff / 60000);
    const hours = Math.floor(minutes / 60);
    const days = Math.floor(hours / 24);
    
    if (days > 0) return `${days} day${days === 1 ? "" : "s"} ago`;
    if (hours > 0) return `${hours} hour${hours === 1 ? "" : "s"} ago`;
    if (minutes > 0) return `${minutes} minute${minutes === 1 ? "" : "s"} ago`;
    return "Just now";
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <Loader2 className="h-8 w-8 animate-spin text-primary" />
      </div>
    );
  }

  if (error) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="text-center">
          <h2 className="text-2xl font-bold text-red-600 mb-2">Error</h2>
          <p className="text-muted-foreground">{error}</p>
          <Button 
            variant="outline" 
            className="mt-4"
            onClick={() => window.location.reload()}
          >
            Try Again
          </Button>
        </div>
      </div>
    );
  }

  if (!data) {
    return null;
  }

  return (
    <div className="flex min-h-screen">
      {/* Sidebar */}
      <div className="hidden md:flex w-64 flex-col fixed inset-y-0 border-r bg-background z-30">
        <div className="flex h-14 items-center border-b px-4">
          <Link href="/" className="flex items-center gap-2 font-semibold">
            <Image
              src="/placeholder.svg?height=32&width=32"
              width={32}
              height={32}
              alt="Logo"
              className="rounded-full bg-primary p-1"
            />
            <span>RECOVR Admin</span>
          </Link>
        </div>
        <div className="flex-1 overflow-auto py-2">
          <nav className="grid gap-1 px-2">
            <Link
              href="/dashboard"
              className={`flex items-center gap-3 rounded-md px-3 py-2 text-sm font-medium ${
                activeTab === "overview" ? "bg-secondary" : "hover:bg-secondary/50"
              }`}
              onClick={() => setActiveTab("overview")}
            >
              <Package className="h-4 w-4" />
              Overview
            </Link>
            <Link
              href="/dashboard"
              className={`flex items-center gap-3 rounded-md px-3 py-2 text-sm font-medium ${
                activeTab === "detections" ? "bg-secondary" : "hover:bg-secondary/50"
              }`}
              onClick={() => setActiveTab("detections")}
            >
              <CameraIcon className="h-4 w-4" />
              Detections
            </Link>
            <Link
              href="/dashboard"
              className={`flex items-center gap-3 rounded-md px-3 py-2 text-sm font-medium ${
                activeTab === "users" ? "bg-secondary" : "hover:bg-secondary/50"
              }`}
              onClick={() => setActiveTab("users")}
            >
              <Users className="h-4 w-4" />
              Users
            </Link>
            <Link
              href="/dashboard"
              className={`flex items-center gap-3 rounded-md px-3 py-2 text-sm font-medium ${
                activeTab === "analytics" ? "bg-secondary" : "hover:bg-secondary/50"
              }`}
              onClick={() => setActiveTab("analytics")}
            >
              <BarChart className="h-4 w-4" />
              Analytics
            </Link>
            <Link
              href="/dashboard"
              className={`flex items-center gap-3 rounded-md px-3 py-2 text-sm font-medium ${
                activeTab === "settings" ? "bg-secondary" : "hover:bg-secondary/50"
              }`}
              onClick={() => setActiveTab("settings")}
            >
              <Settings className="h-4 w-4" />
              Settings
            </Link>
          </nav>
        </div>
        <div className="border-t p-4">
          <div className="flex items-center gap-3">
            <Image
              src="/placeholder.svg?height=40&width=40"
              width={40}
              height={40}
              alt="User"
              className="rounded-full"
            />
            <div>
              <p className="text-sm font-medium">Admin User</p>
              <p className="text-xs text-muted-foreground">admin@recovr.tech</p>
            </div>
            <Button variant="ghost" size="icon" className="ml-auto">
              <LogOut className="h-4 w-4" />
              <span className="sr-only">Log out</span>
            </Button>
          </div>
        </div>
      </div>

      {/* Main content */}
      <div className="flex-1 md:pl-64">
        <header className="sticky top-0 z-20 flex h-14 items-center gap-4 border-b bg-background px-4 sm:px-6">
          <div className="flex flex-1 items-center gap-2">
            <Button variant="outline" size="sm" className="md:hidden">
              <Package className="h-4 w-4" />
              <span className="sr-only">Toggle sidebar</span>
            </Button>
            <h1 className="text-lg font-semibold">Dashboard</h1>
          </div>
          <div className="flex items-center gap-2">
            <Button variant="outline" size="sm">
              <Bell className="h-4 w-4" />
              <span className="sr-only">Notifications</span>
            </Button>
            <Button variant="outline" size="sm">
              <Search className="h-4 w-4" />
              <span className="sr-only">Search</span>
            </Button>
          </div>
        </header>

        <main className="grid gap-4 p-4 sm:px-6 sm:py-6 md:gap-8">
          <Tabs defaultValue="overview" value={activeTab} onValueChange={setActiveTab} className="w-full">
            <TabsList className="grid w-full grid-cols-4 md:w-auto">
              <TabsTrigger value="overview">Overview</TabsTrigger>
              <TabsTrigger value="detections">Detections</TabsTrigger>
              <TabsTrigger value="users">Users</TabsTrigger>
              <TabsTrigger value="analytics">Analytics</TabsTrigger>
            </TabsList>

            <TabsContent value="overview" className="space-y-4 mt-4">
              <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
                <Card>
                  <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                    <CardTitle className="text-sm font-medium">Total Detections</CardTitle>
                    <Package className="h-4 w-4 text-muted-foreground" />
                  </CardHeader>
                  <CardContent>
                    <div className="text-2xl font-bold">{data.stats.totalDetections.toLocaleString()}</div>
                    <p className="text-xs text-muted-foreground">
                      <span className={`${data.stats.detectionChange >= 0 ? "text-green-500" : "text-red-500"} flex items-center`}>
                        {data.stats.detectionChange >= 0 ? (
                        <ArrowUpRight className="h-3 w-3 mr-1" />
                        ) : (
                          <ArrowDownRight className="h-3 w-3 mr-1" />
                        )}
                        {formatChange(data.stats.detectionChange)}
                      </span>{" "}
                      from last period
                    </p>
                  </CardContent>
                </Card>

                <Card>
                  <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                    <CardTitle className="text-sm font-medium">Recovery Rate</CardTitle>
                    <ArrowUpRight className="h-4 w-4 text-muted-foreground" />
                  </CardHeader>
                  <CardContent>
                    <div className="text-2xl font-bold">{data.stats.recoveryRate}%</div>
                    <p className="text-xs text-muted-foreground">
                      <span className={`${data.stats.recoveryChange >= 0 ? "text-green-500" : "text-red-500"} flex items-center`}>
                        {data.stats.recoveryChange >= 0 ? (
                        <ArrowUpRight className="h-3 w-3 mr-1" />
                        ) : (
                          <ArrowDownRight className="h-3 w-3 mr-1" />
                        )}
                        {formatChange(data.stats.recoveryChange)}
                      </span>{" "}
                      from last period
                    </p>
                  </CardContent>
                </Card>

                <Card>
                  <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                    <CardTitle className="text-sm font-medium">Active Users</CardTitle>
                    <Users className="h-4 w-4 text-muted-foreground" />
                  </CardHeader>
                  <CardContent>
                    <div className="text-2xl font-bold">{data.stats.activeUsers}</div>
                    <p className="text-xs text-muted-foreground">
                      <span className={`${data.stats.userChange >= 0 ? "text-green-500" : "text-red-500"} flex items-center`}>
                        {data.stats.userChange >= 0 ? (
                        <ArrowUpRight className="h-3 w-3 mr-1" />
                        ) : (
                        <ArrowDownRight className="h-3 w-3 mr-1" />
                        )}
                        {formatChange(data.stats.userChange)}
                      </span>{" "}
                      from last period
                    </p>
                  </CardContent>
                </Card>
              </div>

              <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-7">
                <Card className="col-span-4">
                  <CardHeader>
                    <CardTitle>Recovery Rate Over Time</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="h-[300px]">
                      <ResponsiveContainer width="100%" height="100%">
                        <LineChart data={data.recoveryRate}>
                          <CartesianGrid strokeDasharray="3 3" />
                          <XAxis dataKey="name" />
                          <YAxis />
                          <Tooltip />
                          <Line
                            type="monotone"
                            dataKey="rate"
                            stroke="#8884d8"
                            strokeWidth={2}
                          />
                        </LineChart>
                      </ResponsiveContainer>
                    </div>
                  </CardContent>
                </Card>

                <Card className="col-span-3">
                  <CardHeader>
                    <CardTitle>Category Distribution</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="h-[300px]">
                      <ResponsiveContainer width="100%" height="100%">
                        <PieChart>
                          <Pie
                            data={data.categoryDistribution}
                            dataKey="value"
                            nameKey="name"
                            cx="50%"
                            cy="50%"
                            outerRadius={80}
                            label
                          >
                            {data.categoryDistribution.map((entry, index) => (
                              <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                            ))}
                          </Pie>
                          <Tooltip />
                        </PieChart>
                      </ResponsiveContainer>
                    </div>
                  </CardContent>
                </Card>
              </div>

              <Card>
                  <CardHeader>
                    <CardTitle>Recent Detections</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4">
                    {data.recentDetections.map((detection) => (
                        <div key={detection.id} className="flex items-center gap-4">
                        <div className="relative h-12 w-12">
                            <Image
                            src={detection.image}
                              alt={detection.name}
                              fill
                            className="rounded-md object-cover"
                            />
                          </div>
                        <div className="flex-1">
                          <p className="font-medium">{detection.name}</p>
                          <div className="flex items-center text-sm text-muted-foreground">
                            <MapPin className="h-3 w-3 mr-1" />
                              {detection.location}
                            <Clock className="h-3 w-3 ml-3 mr-1" />
                            {formatTimestamp(detection.timestamp)}
                          </div>
                        </div>
                        <Badge variant="secondary">
                          {detection.confidence}% match
                        </Badge>
                      </div>
                    ))}
                    </div>
                  </CardContent>
                </Card>
            </TabsContent>

            <TabsContent value="detections" className="space-y-4 mt-4">
              <Card>
                <CardHeader>
                  <CardTitle>Detections Content</CardTitle>
                  <CardDescription>Manage and view all detected objects</CardDescription>
                </CardHeader>
                <CardContent>
                  <p>Detections tab content would go here...</p>
                </CardContent>
              </Card>
            </TabsContent>

            <TabsContent value="users" className="space-y-4 mt-4">
              <Card>
                <CardHeader>
                  <CardTitle>Users Content</CardTitle>
                  <CardDescription>Manage system users and permissions</CardDescription>
                </CardHeader>
                <CardContent>
                  <p>Users tab content would go here...</p>
                </CardContent>
              </Card>
            </TabsContent>

            <TabsContent value="analytics" className="space-y-4 mt-4">
              <Card>
                <CardHeader>
                  <CardTitle>Analytics Content</CardTitle>
                  <CardDescription>Detailed system analytics and reports</CardDescription>
                </CardHeader>
                <CardContent>
                  <p>Analytics tab content would go here...</p>
                </CardContent>
              </Card>
            </TabsContent>
          </Tabs>
        </main>
      </div>
    </div>
  )
}



===== FILE: ./app/detection/page.tsx =====
"use client"

import { useState, useEffect, useRef } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Slider } from "@/components/ui/slider"
import { Switch } from "@/components/ui/switch"
import { Label } from "@/components/ui/label"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { CameraIcon, Play, Pause, RotateCw, Download, Maximize2, Settings, AlertCircle } from "lucide-react"
import Image from "next/image"

// Mock detection results
const MOCK_DETECTIONS = [
  {
    id: 1,
    objectType: "Backpack",
    confidence: 98.2,
    status: "abandoned",
    timeDetected: "10:15:32",
    boundingBox: { x: 120, y: 150, width: 100, height: 120 },
  },
  {
    id: 2,
    objectType: "Smartphone",
    confidence: 95.7,
    status: "moving",
    timeDetected: "10:15:35",
    boundingBox: { x: 320, y: 220, width: 40, height: 80 },
  },
  {
    id: 3,
    objectType: "Laptop",
    confidence: 97.1,
    status: "stationary",
    timeDetected: "10:15:40",
    boundingBox: { x: 450, y: 180, width: 120, height: 80 },
  },
]

export default function DetectionPage() {
  const [isPlaying, setIsPlaying] = useState(true)
  const [confidenceThreshold, setConfidenceThreshold] = useState([80])
  const [detectionMode, setDetectionMode] = useState("real-time")
  const [showBoundingBoxes, setShowBoundingBoxes] = useState(true)
  const [showLabels, setShowLabels] = useState(true)
  const [detections, setDetections] = useState(MOCK_DETECTIONS)
  const [selectedDetection, setSelectedDetection] = useState(null)
  const canvasRef = useRef(null)
  const videoRef = useRef(null)

  // Simulate video feed and detection
  useEffect(() => {
    let animationId
    let frameCount = 0

    const drawVideoFrame = () => {
      const canvas = canvasRef.current
      const ctx = canvas?.getContext("2d")

      if (ctx && isPlaying) {
        // Clear canvas
        ctx.clearRect(0, 0, canvas.width, canvas.height)

        // Draw mock video frame (gray background)
        ctx.fillStyle = "#f3f4f6"
        ctx.fillRect(0, 0, canvas.width, canvas.height)

        // Draw some mock scene elements
        ctx.fillStyle = "#d1d5db"
        ctx.fillRect(50, 150, 200, 100) // Table
        ctx.fillRect(400, 100, 150, 80) // Shelf
        ctx.fillRect(300, 300, 180, 60) // Bench

        // Draw detected objects with bounding boxes
        if (showBoundingBoxes) {
          detections.forEach((detection) => {
            const { x, y, width, height } = detection.boundingBox
            const isSelected = selectedDetection?.id === detection.id

            // Draw bounding box
            ctx.strokeStyle =
              detection.status === "abandoned"
                ? "#ef4444" // Red for abandoned
                : detection.status === "stationary"
                  ? "#f59e0b" // Amber for stationary
                  : "#22c55e" // Green for moving
            ctx.lineWidth = isSelected ? 3 : 2
            ctx.strokeRect(x, y, width, height)

            // Draw semi-transparent background for label
            if (showLabels) {
              ctx.fillStyle = "rgba(0, 0, 0, 0.5)"
              ctx.fillRect(x, y - 20, width, 20)

              // Draw label text
              ctx.fillStyle = "#ffffff"
              ctx.font = "12px sans-serif"
              ctx.fillText(`${detection.objectType} (${detection.confidence.toFixed(1)}%)`, x + 5, y - 5)
            }
          })
        }

        // Simulate object movement for the "moving" object
        if (frameCount % 5 === 0) {
          setDetections((prev) =>
            prev.map((det) => {
              if (det.status === "moving") {
                return {
                  ...det,
                  boundingBox: {
                    ...det.boundingBox,
                    x: det.boundingBox.x + (Math.random() > 0.5 ? 1 : -1) * 2,
                    y: det.boundingBox.y + (Math.random() > 0.5 ? 1 : -1) * 2,
                  },
                }
              }
              return det
            }),
          )
        }

        frameCount++
      }

      animationId = requestAnimationFrame(drawVideoFrame)
    }

    drawVideoFrame()

    return () => {
      cancelAnimationFrame(animationId)
    }
  }, [isPlaying, detections, showBoundingBoxes, showLabels, selectedDetection])

  const handleDetectionClick = (detection) => {
    setSelectedDetection(detection)
  }

  return (
    <div className="container py-8">
      <div className="flex flex-col space-y-6">
        <div className="flex flex-col space-y-2">
          <h1 className="text-3xl font-bold">Object Detection System</h1>
          <p className="text-muted-foreground">
            Real-time monitoring and detection of abandoned objects using computer vision
          </p>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          <div className="lg:col-span-2 space-y-6">
            <Card>
              <CardHeader className="pb-2">
                <div className="flex justify-between items-center">
                  <div>
                    <CardTitle>Video Feed</CardTitle>
                    <CardDescription>Camera 1 - Main Hall</CardDescription>
                  </div>
                  <Badge variant={isPlaying ? "default" : "outline"} className="ml-auto">
                    {isPlaying ? "LIVE" : "PAUSED"}
                  </Badge>
                </div>
              </CardHeader>
              <CardContent className="p-0">
                <div className="relative aspect-video bg-muted">
                  <canvas
                    ref={canvasRef}
                    width={800}
                    height={450}
                    className="w-full h-full"
                    onClick={(e) => {
                      const canvas = canvasRef.current
                      const rect = canvas.getBoundingClientRect()
                      const x = (e.clientX - rect.left) * (canvas.width / rect.width)
                      const y = (e.clientY - rect.top) * (canvas.height / rect.height)

                      // Check if click is inside any bounding box
                      const clicked = detections.find((det) => {
                        const { x: bx, y: by, width, height } = det.boundingBox
                        return x >= bx && x <= bx + width && y >= by && y <= by + height
                      })

                      if (clicked) {
                        handleDetectionClick(clicked)
                      } else {
                        setSelectedDetection(null)
                      }
                    }}
                  />
                  <video ref={videoRef} className="hidden" />
                </div>
              </CardContent>
              <CardFooter className="flex justify-between p-4">
                <div className="flex space-x-2">
                  <Button
                    variant="outline"
                    size="icon"
                    onClick={() => setIsPlaying(!isPlaying)}
                    aria-label={isPlaying ? "Pause" : "Play"}
                  >
                    {isPlaying ? <Pause className="h-4 w-4" /> : <Play className="h-4 w-4" />}
                  </Button>
                  <Button variant="outline" size="icon" aria-label="Refresh">
                    <RotateCw className="h-4 w-4" />
                  </Button>
                  <Button variant="outline" size="icon" aria-label="Download">
                    <Download className="h-4 w-4" />
                  </Button>
                  <Button variant="outline" size="icon" aria-label="Fullscreen">
                    <Maximize2 className="h-4 w-4" />
                  </Button>
                </div>
                <Select defaultValue="camera1">
                  <SelectTrigger className="w-[180px]">
                    <SelectValue placeholder="Select camera" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="camera1">Camera 1 - Main Hall</SelectItem>
                    <SelectItem value="camera2">Camera 2 - Library</SelectItem>
                    <SelectItem value="camera3">Camera 3 - Cafeteria</SelectItem>
                    <SelectItem value="camera4">Camera 4 - Entrance</SelectItem>
                  </SelectContent>
                </Select>
              </CardFooter>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>Detection Settings</CardTitle>
                <CardDescription>Configure detection parameters and visualization options</CardDescription>
              </CardHeader>
              <CardContent>
                <Tabs defaultValue="real-time" value={detectionMode} onValueChange={setDetectionMode}>
                  <TabsList className="grid w-full grid-cols-2">
                    <TabsTrigger value="real-time">Real-time Detection</TabsTrigger>
                    <TabsTrigger value="recorded">Recorded Footage</TabsTrigger>
                  </TabsList>
                  <TabsContent value="real-time" className="space-y-4 mt-4">
                    <div className="space-y-2">
                      <div className="flex justify-between">
                        <Label>Confidence Threshold (%)</Label>
                        <span>{confidenceThreshold}%</span>
                      </div>
                      <Slider
                        value={confidenceThreshold}
                        onValueChange={setConfidenceThreshold}
                        min={50}
                        max={100}
                        step={1}
                      />
                    </div>

                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div className="flex items-center space-x-2">
                        <Switch
                          id="bounding-boxes"
                          checked={showBoundingBoxes}
                          onCheckedChange={setShowBoundingBoxes}
                        />
                        <Label htmlFor="bounding-boxes">Show Bounding Boxes</Label>
                      </div>
                      <div className="flex items-center space-x-2">
                        <Switch id="labels" checked={showLabels} onCheckedChange={setShowLabels} />
                        <Label htmlFor="labels">Show Labels</Label>
                      </div>
                      <div className="flex items-center space-x-2">
                        <Switch id="tracking" defaultChecked />
                        <Label htmlFor="tracking">Enable Object Tracking</Label>
                      </div>
                      <div className="flex items-center space-x-2">
                        <Switch id="abandoned" defaultChecked />
                        <Label htmlFor="abandoned">Detect Abandoned Objects</Label>
                      </div>
                    </div>

                    <div className="flex items-center space-x-2 pt-2">
                      <AlertCircle className="h-4 w-4 text-muted-foreground" />
                      <p className="text-xs text-muted-foreground">
                        Objects are considered abandoned after being stationary for 30 seconds
                      </p>
                    </div>
                  </TabsContent>
                  <TabsContent value="recorded" className="space-y-4 mt-4">
                    <p className="text-sm text-muted-foreground">Upload recorded footage to analyze for lost objects</p>
                    <Button variant="outline" className="w-full">
                      <CameraIcon className="mr-2 h-4 w-4" />
                      Upload Video File
                    </Button>
                  </TabsContent>
                </Tabs>
              </CardContent>
            </Card>
          </div>

          <div className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle>Detection Results</CardTitle>
                <CardDescription>Objects detected in the current frame</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {detections.length > 0 ? (
                    detections.map((detection) => (
                      <div
                        key={detection.id}
                        className={`p-3 rounded-lg border ${
                          selectedDetection?.id === detection.id ? "border-primary bg-primary/5" : ""
                        } ${
                          detection.status === "abandoned"
                            ? "border-red-200 bg-red-50 dark:border-red-900 dark:bg-red-950/20"
                            : detection.status === "stationary"
                              ? "border-amber-200 bg-amber-50 dark:border-amber-900 dark:bg-amber-950/20"
                              : "border-green-200 bg-green-50 dark:border-green-900 dark:bg-green-950/20"
                        } cursor-pointer`}
                        onClick={() => handleDetectionClick(detection)}
                      >
                        <div className="flex justify-between items-start">
                          <div>
                            <div className="font-medium">{detection.objectType}</div>
                            <div className="text-xs text-muted-foreground">Detected at {detection.timeDetected}</div>
                          </div>
                          <Badge
                            variant={
                              detection.status === "abandoned"
                                ? "destructive"
                                : detection.status === "stationary"
                                  ? "outline"
                                  : "secondary"
                            }
                          >
                            {detection.status.toUpperCase()}
                          </Badge>
                        </div>
                        <div className="mt-2 flex justify-between items-center">
                          <div className="text-sm">
                            Confidence: <span className="font-medium">{detection.confidence.toFixed(1)}%</span>
                          </div>
                          <Button variant="ghost" size="sm">
                            Details
                          </Button>
                        </div>
                      </div>
                    ))
                  ) : (
                    <div className="text-center py-8">
                      <CameraIcon className="mx-auto h-8 w-8 text-muted-foreground mb-2" />
                      <p className="text-muted-foreground">No objects detected</p>
                    </div>
                  )}
                </div>
              </CardContent>
              <CardFooter>
                <Button variant="outline" className="w-full">
                  View All Detections
                </Button>
              </CardFooter>
            </Card>

            {selectedDetection && (
              <Card>
                <CardHeader>
                  <CardTitle>Object Details</CardTitle>
                  <CardDescription>Information about the selected object</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    <div className="aspect-video relative bg-muted rounded-md overflow-hidden">
                      <div className="absolute inset-0 flex items-center justify-center">
                        <Image
                          src="/placeholder.svg?height=200&width=300"
                          width={300}
                          height={200}
                          alt="Object thumbnail"
                          className="w-full h-full object-cover"
                        />
                      </div>
                    </div>

                    <div className="grid grid-cols-2 gap-2 text-sm">
                      <div className="space-y-1">
                        <p className="text-muted-foreground">Object Type</p>
                        <p className="font-medium">{selectedDetection.objectType}</p>
                      </div>
                      <div className="space-y-1">
                        <p className="text-muted-foreground">Status</p>
                        <p className="font-medium capitalize">{selectedDetection.status}</p>
                      </div>
                      <div className="space-y-1">
                        <p className="text-muted-foreground">Confidence</p>
                        <p className="font-medium">{selectedDetection.confidence.toFixed(1)}%</p>
                      </div>
                      <div className="space-y-1">
                        <p className="text-muted-foreground">Time Detected</p>
                        <p className="font-medium">{selectedDetection.timeDetected}</p>
                      </div>
                    </div>

                    <div className="pt-2 flex justify-between">
                      <Button variant="outline" size="sm">
                        <Download className="mr-2 h-4 w-4" />
                        Save Image
                      </Button>
                      <Button size="sm">
                        <Settings className="mr-2 h-4 w-4" />
                        Process Object
                      </Button>
                    </div>
                  </div>
                </CardContent>
              </Card>
            )}
          </div>
        </div>
      </div>
    </div>
  )
}



===== FILE: ./app/globals.css =====
@import 'leaflet/dist/leaflet.css';
@tailwind base;
@tailwind components;
@tailwind utilities;

@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap');

body {
  font-family: 'Poppins', sans-serif;
}

/* Smooth scrolling for the whole page */
html {
  scroll-behavior: smooth;
}

@layer utilities {
  .text-balance {
    text-wrap: balance;
  }
  
  .animate-fade-in {
    animation: fadeIn 0.6s ease-in-out;
  }
  
  .animate-slide-up {
    animation: slideUp 0.8s ease-out;
  }
  
  .animate-slide-in-right {
    animation: slideInRight 0.8s ease-out;
  }
  
  .animate-slide-in-left {
    animation: slideInLeft 0.8s ease-out;
  }
  
  .animate-bounce-in {
    animation: bounceIn 0.8s cubic-bezier(0.215, 0.61, 0.355, 1);
  }
  
  .animate-float {
    animation: float 6s ease-in-out infinite;
  }
  
  .animate-pulse-slow {
    animation: pulseSlow 3s infinite;
  }
  
  .page-transition {
    animation: fadeIn 0.4s ease-in-out;
  }
  
  .glass-effect {
    background: rgba(255, 255, 255, 0.15);
    backdrop-filter: blur(10px);
    -webkit-backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.2);
  }
  
  .glass-card {
    background: rgba(255, 255, 255, 0.7);
    backdrop-filter: blur(16px);
    -webkit-backdrop-filter: blur(16px);
    border: 1px solid rgba(255, 255, 255, 0.3);
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.05);
  }
  
  .text-gradient {
    background-clip: text;
    -webkit-background-clip: text;
    color: transparent;
    background-image: linear-gradient(90deg, #1e293b, #020617);
  }
  
  .dark .text-gradient {
    background-image: linear-gradient(90deg, #e2e8f0, #f8fafc);
    color: transparent;
    /* Ensure text is visible and bright in dark mode */
    text-shadow: 0 0 1px rgba(255, 255, 255, 0.1);
  }
  
  .text-gradient-blue {
    background-clip: text;
    -webkit-background-clip: text;
    color: transparent;
    background-image: linear-gradient(135deg, #1e40af, #0c4a6e);
  }
  
  .dark .text-gradient-blue {
    background-image: linear-gradient(135deg, #60a5fa, #38bdf8);
    color: transparent;
    /* Ensure text is visible and bright in dark mode */
    text-shadow: 0 0 1px rgba(255, 255, 255, 0.1);
  }
  
  .text-gradient-purple {
    background-clip: text;
    -webkit-background-clip: text;
    color: transparent;
    background-image: linear-gradient(135deg, #1e1b4b, #312e81);
  }
  
  .dark .text-gradient-purple {
    background-image: linear-gradient(135deg, #c7d2fe, #a5b4fc);
  }
  
  .bg-gradient-subtle {
    background: linear-gradient(120deg, #f8fafc 0%, #f1f5f9 100%);
  }
  
  .shadow-soft {
    box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.05), 0 8px 10px -6px rgba(0, 0, 0, 0.02);
  }
  
  .shadow-glow {
    box-shadow: 0 0 15px rgba(56, 189, 248, 0.35);
  }

  .border-gradient {
    border: double 1px transparent;
    background-image: linear-gradient(white, white), 
                      linear-gradient(to right, hsl(var(--primary-gradient-from)), hsl(var(--primary-gradient-to)));
    background-origin: border-box;
    background-clip: padding-box, border-box;
  }
  
  /* Scroll Animation Classes */
  .scroll-fade-in {
    opacity: 0;
    transition: opacity 0.8s ease;
  }
  
  .scroll-fade-in.visible {
    opacity: 1;
  }
  
  .scroll-slide-up {
    opacity: 0;
    transform: translateY(30px);
    transition: transform 0.8s ease, opacity 0.8s ease;
  }
  
  .scroll-slide-up.visible {
    opacity: 1;
    transform: translateY(0);
  }
  
  .scroll-slide-left {
    opacity: 0;
    transform: translateX(-30px);
    transition: transform 0.8s ease, opacity 0.8s ease;
  }
  
  .scroll-slide-left.visible {
    opacity: 1;
    transform: translateX(0);
  }
  
  .scroll-slide-right {
    opacity: 0;
    transform: translateX(30px);
    transition: transform 0.8s ease, opacity 0.8s ease;
  }
  
  .scroll-slide-right.visible {
    opacity: 1;
    transform: translateX(0);
  }
  
  .scroll-zoom-in {
    opacity: 0;
    transform: scale(0.95);
    transition: transform 0.8s ease, opacity 0.8s ease;
  }
  
  .scroll-zoom-in.visible {
    opacity: 1;
    transform: scale(1);
  }
  
  .scroll-bounce {
    opacity: 0;
    transition: transform 0.8s cubic-bezier(0.215, 0.61, 0.355, 1), opacity 0.8s ease;
  }
  
  .scroll-bounce.visible {
    opacity: 1;
    animation: bounceInOnce 0.8s cubic-bezier(0.215, 0.61, 0.355, 1);
  }

  .animate-loadingBar {
    animation: loadingBarAnimation 1.2s ease-in-out infinite;
    background-size: 400% 400%;
    background-image: linear-gradient(to right, #1e293b, #0f172a, #020617, #000000);
  }

  .page-navigating * {
    transition: none !important;
    animation-play-state: paused !important;
  }
}

@keyframes fadeIn {
  from { opacity: 0; }
  to { opacity: 1; }
}

@keyframes slideUp {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes slideInRight {
  from {
    opacity: 0;
    transform: translateX(30px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

@keyframes slideInLeft {
  from {
    opacity: 0;
    transform: translateX(-30px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

@keyframes bounceIn {
  0% {
    opacity: 0;
    transform: scale3d(0.3, 0.3, 0.3);
  }
  20% {
    transform: scale3d(1.1, 1.1, 1.1);
  }
  40% {
    transform: scale3d(0.9, 0.9, 0.9);
  }
  60% {
    opacity: 1;
    transform: scale3d(1.03, 1.03, 1.03);
  }
  80% {
    transform: scale3d(0.97, 0.97, 0.97);
  }
  100% {
    opacity: 1;
    transform: scale3d(1, 1, 1);
  }
}

@keyframes bounceInOnce {
  0% {
    transform: scale3d(0.9, 0.9, 0.9);
  }
  20% {
    transform: scale3d(1.05, 1.05, 1.05);
  }
  40% {
    transform: scale3d(0.95, 0.95, 0.95);
  }
  60% {
    transform: scale3d(1.02, 1.02, 1.02);
  }
  100% {
    transform: scale3d(1, 1, 1);
  }
}

@keyframes float {
  0% {
    transform: translateY(0px);
  }
  50% {
    transform: translateY(-10px);
  }
  100% {
    transform: translateY(0px);
  }
}

@keyframes pulseSlow {
  0%, 100% {
    opacity: 1;
  }
  50% {
    opacity: 0.7;
  }
}

@keyframes loadingBarAnimation {
  0% { width: 0%; }
  25% { width: 35%; }
  50% { width: 60%; }
  75% { width: 85%; }
  100% { width: 100%; }
}

@layer base {
  :root {
    --background: 210 33% 98%;
    --foreground: 224 47% 11%;
    --card: 0 0% 100%;
    --card-foreground: 224 47% 11%;
    --popover: 0 0% 100%;
    --popover-foreground: 224 47% 11%;
    --primary: 222 84% 20%;
    --primary-foreground: 210 40% 98%;
    --primary-gradient-from: 222 84% 20%;
    --primary-gradient-to: 225 85% 15%;
    --secondary: 215 85% 25%;
    --secondary-foreground: 224 47% 11%;
    --muted: 210 40% 96.1%;
    --muted-foreground: 215.4 16.3% 46.9%;
    --accent: 225 85% 15%;
    --accent-foreground: 224 47% 11%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;
    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 222 84% 20%;
    --radius: 0.75rem;
    
    --sidebar-background: 225 90% 10%;
    --sidebar-foreground: 210 40% 98%;
    --sidebar-primary: 222 84% 20%;
    --sidebar-primary-foreground: 210 40% 98%;
    --sidebar-accent: 225 85% 15%;
    --sidebar-accent-foreground: 210 40% 98%;
    --sidebar-border: 217.2 32.6% 17.5%;
    --sidebar-ring: 224.3 76.3% 48%;
  }

  .dark {
    --background: 224 47% 8%;
    --foreground: 210 40% 98%;
    --card: 224 47% 8%;
    --card-foreground: 210 40% 98%;
    --popover: 224 47% 8%;
    --popover-foreground: 210 40% 98%;
    --primary: 222 84% 25%;
    --primary-foreground: 222.2 47.4% 11.2%;
    --primary-gradient-from: 222 84% 25%;
    --primary-gradient-to: 225 85% 10%;
    --secondary: 215 85% 25%;
    --secondary-foreground: 222.2 47.4% 11.2%;
    --muted: 217.2 32.6% 17.5%;
    --muted-foreground: 215 20.2% 65.1%;
    --accent: 225 90% 10%;
    --accent-foreground: 210 40% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 40% 98%;
    --border: 217.2 32.6% 17.5%;
    --input: 217.2 32.6% 17.5%;
    --ring: 224.3 76.3% 48%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

.card-hover {
  transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.card-hover:hover {
  transform: translateY(-5px);
  box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1);
}

.feature-icon {
  @apply relative overflow-hidden flex items-center justify-center rounded-xl;
  background: linear-gradient(135deg, hsl(var(--primary)), hsl(var(--accent)));
}

.feature-icon::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 200%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255,255,255,0.3), transparent);
  transition: all 0.6s ease;
}

.feature-icon:hover::before {
  left: 100%;
}

/* General transition for UI elements */
button, a, input, select, .transition-all {
  transition: all 0.3s ease;
}

/* Add button press effect */
button:active:not(:disabled) {
  transform: scale(0.98);
}

/* Fancy highlight effect */
.highlight-container {
  position: relative;
}

.highlight {
  position: relative;
  z-index: 1;
}

.highlight::after {
  content: "";
  position: absolute;
  z-index: -1;
  bottom: 0;
  left: 0;
  height: 30%;
  width: 100%;
  background: linear-gradient(90deg, hsla(var(--primary), 0.2), hsla(var(--accent), 0.2));
  transition: height 0.3s ease;
}

.highlight:hover::after {
  height: 100%;
}

/* 3D Button Effect */
.btn-3d {
  position: relative;
  transform: translateZ(0);
  transition: transform 0.3s, box-shadow 0.3s;
}

.btn-3d:hover {
  transform: translateY(-2px);
  box-shadow: 0 10px 20px -10px rgba(0, 0, 0, 0.2);
}

.btn-3d:active {
  transform: translateY(0);
  box-shadow: 0 5px 10px -5px rgba(0, 0, 0, 0.2);
}

/* Back to top button */
.back-to-top {
  position: fixed;
  bottom: 20px;
  right: 20px;
  z-index: 99;
  opacity: 0;
  visibility: hidden;
  background-color: hsl(var(--primary));
  color: white;
  border-radius: 50%;
  width: 40px;
  height: 40px;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  transition: opacity 0.3s, visibility 0.3s, transform 0.3s;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
}

.back-to-top.visible {
  opacity: 1;
  visibility: visible;
}

.back-to-top:hover {
  transform: translateY(-3px);
}

/* Performance optimizations */
.transform-gpu {
  transform: translateZ(0);
  will-change: transform, opacity;
}

/* Ensure images don't cause layout shifts and optimize for performance */
img, svg {
  transform: translateZ(0);
}

/* Custom scrollbar for webkit browsers */
::-webkit-scrollbar {
  width: 10px;
}

::-webkit-scrollbar-track {
  background-color: rgba(0, 0, 0, 0.05);
}

::-webkit-scrollbar-thumb {
  background-color: rgba(0, 0, 0, 0.15);
  border-radius: 5px;
}

::-webkit-scrollbar-thumb:hover {
  background-color: rgba(0, 0, 0, 0.25);
}

/* Scroll performance optimizations */
body.is-scrolling * {
  pointer-events: none !important;
}

body.is-scrolling .back-to-top,
body.is-scrolling button,
body.is-scrolling a,
body.is-scrolling input,
body.is-scrolling select,
body.is-scrolling .modal,
body.is-scrolling [role="dialog"] {
  pointer-events: auto !important;
}

/* Force hardware acceleration for smoother animations */
.transform-gpu,
.animate-fade-in,
.animate-slide-up,
.animate-slide-in-right,
.animate-slide-in-left,
.animate-bounce-in,
.animate-float,
.animate-pulse-slow,
.btn-3d,
.glass-card,
.card-hover {
  -webkit-backface-visibility: hidden;
  backface-visibility: hidden;
  transform: translate3d(0, 0, 0);
  perspective: 1000px;
}

/* Add this grid pattern to the CSS file */
.bg-grid-pattern {
  background-image:
    linear-gradient(to right, rgba(15, 23, 42, 0.1) 1px, transparent 1px),
    linear-gradient(to bottom, rgba(15, 23, 42, 0.1) 1px, transparent 1px);
  background-size: 30px 30px;
}

/* Dark mode enhancements */
.dark .active-nav-item {
  color: white !important;
  font-weight: bold;
}

.dark .text-muted-foreground {
  color: rgba(255, 255, 255, 0.7) !important;
}

.dark .link-hover:hover {
  color: white !important;
  text-shadow: 0 0 8px rgba(255, 255, 255, 0.2);
}



===== FILE: ./app/layout.tsx =====
import type React from "react"
import "@/app/globals.css"
import { Poppins } from "next/font/google"
import { ThemeProvider } from "@/components/theme-provider"
import { ClientWrapper } from "@/components/client-wrapper"
import { PageTransition } from "@/components/page-transition"
import { Toaster } from "@/components/ui/toaster"
import { SessionProvider } from "@/components/session-provider"
import { BackToTop } from "@/components/back-to-top"
import { ScrollPerformanceOptimizer } from "@/components/scroll-performance"
import { LoadingIndicator } from "@/components/loading-indicator"
import { Footer } from "./components/footer"
import { getServerSession } from "next-auth"
import { authOptions } from "@/lib/auth-options"

const poppins = Poppins({ 
  subsets: ["latin"],
  weight: ["300", "400", "500", "600", "700"],
  variable: "--font-poppins",
})

export const metadata = {
  title: "RECOVR - Advanced Lost & Found Recovery System",
  description: "AI-powered system for detecting, tracking, and recovering lost objects using advanced image recognition technology.",
  keywords: "lost and found, object recovery, AI, image matching, lost items, found items",
  author: "RECOVR Team",
  generator: 'v0.dev'
}

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode
}>) {
  // Get the session from the server
  const session = await getServerSession(authOptions);
  
  return (
    <html lang="en" suppressHydrationWarning>
      <body className={`${poppins.className} min-h-screen bg-background antialiased`}>
        <SessionProvider session={session}>
          <ThemeProvider attribute="class" defaultTheme="light" enableSystem disableTransitionOnChange>
            <LoadingIndicator />
            <div className="relative flex min-h-screen flex-col items-center">
              <div className="w-full max-w-[1800px] mx-auto">
                <ClientWrapper />
                <main className="flex-1 w-full">
                  <PageTransition>
                    {children}
                  </PageTransition>
                </main>
              </div>
              <Footer />
              <BackToTop />
            </div>
            <ScrollPerformanceOptimizer />
            <Toaster />
          </ThemeProvider>
        </SessionProvider>
      </body>
    </html>
  )
}



===== FILE: ./app/loading.tsx =====
export default function Loading() {
  return null
}



===== FILE: ./app/login/page.tsx =====
"use client";

import { useEffect } from "react";
import { useRouter } from "next/navigation";
import { Loader2 } from "lucide-react";

export default function LoginPage() {
  const router = useRouter();

  useEffect(() => {
    router.push("/auth/signin");
  }, [router]);

  return (
    <div className="flex h-screen w-full items-center justify-center">
      <div className="flex flex-col items-center gap-2">
        <Loader2 className="h-8 w-8 animate-spin text-primary" />
        <p className="text-lg text-muted-foreground">Redirecting to login...</p>
      </div>
    </div>
  );
} 


===== FILE: ./app/lost-objects/page.tsx =====
"use client"

import { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { MapPin, Calendar, Clock, Filter, Loader2 } from "lucide-react"
import Image from "next/image"
import Link from "next/link"
import { useSearchParams, useRouter } from "next/navigation"

interface LostObject {
  id: string;
  name: string;
  location: string;
  date: string;
  time: string;
  image: string;
  category: string;
  description?: string;
  status?: string;
}

export default function LostObjectsPage() {
  const router = useRouter();
  const searchParams = useSearchParams();
  
  const [searchTerm, setSearchTerm] = useState(searchParams.get("query") || "")
  const [activeCategory, setActiveCategory] = useState(searchParams.get("category") || "all")
  const [objects, setObjects] = useState<LostObject[]>([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [currentPage, setCurrentPage] = useState(0)
  const [totalPages, setTotalPages] = useState(0)
  const [totalItems, setTotalItems] = useState(0)

  // Load objects when search parameters change
  useEffect(() => {
    const loadObjects = async () => {
      setLoading(true);
      setError(null);
      
      try {
        // Build query parameters
        const params = new URLSearchParams({
          page: currentPage.toString(),
          size: "12",
        });
        
        if (searchTerm) params.append("query", searchTerm);
        if (activeCategory !== "all") params.append("category", activeCategory);
        
        // Fetch data from API
        const response = await fetch(`/api/lost-objects?${params.toString()}`);
        
        if (!response.ok) {
          throw new Error("Failed to fetch objects");
        }
        
        const data = await response.json();
        
        setObjects(data.objects);
        setTotalPages(data.totalPages);
        setTotalItems(data.totalItems);
        
        // Update URL without reloading page
        const newParams = new URLSearchParams(searchParams);
        if (searchTerm) newParams.set("query", searchTerm);
        if (activeCategory !== "all") newParams.set("category", activeCategory);
        router.push(`/lost-objects?${newParams.toString()}`, { scroll: false });
        
      } catch (err) {
        console.error("Error loading objects:", err);
        setError("Failed to load objects. Please try again.");
      } finally {
        setLoading(false);
      }
    };
    
    loadObjects();
  }, [searchTerm, activeCategory, currentPage, router, searchParams]);

  // Handle search input with debounce
  useEffect(() => {
    const timer = setTimeout(() => {
      setCurrentPage(0); // Reset to first page on new search
    }, 500);
    
    return () => clearTimeout(timer);
  }, [searchTerm]);

  // Handle category change
  const handleCategoryChange = (category: string) => {
    setActiveCategory(category);
    setCurrentPage(0); // Reset to first page on category change
  };

  return (
    <div className="container py-8">
      <div className="flex flex-col space-y-6">
        <div className="flex flex-col space-y-2">
          <h1 className="text-3xl font-bold">Lost Objects</h1>
          <p className="text-muted-foreground">
            Browse through recently detected lost objects or search for specific items
          </p>
        </div>

        <div className="flex flex-col space-y-4 md:flex-row md:space-y-0 md:space-x-4">
          <div className="flex-1">
            <Input
              placeholder="Search by name or location..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="w-full"
            />
          </div>
          <div className="flex space-x-2">
            <Button variant="outline" size="icon">
              <Filter className="h-4 w-4" />
            </Button>
            <Link href="/map">
              <Button variant="outline">View Map</Button>
            </Link>
          </div>
        </div>

        <Tabs defaultValue="all" value={activeCategory} onValueChange={handleCategoryChange}>
          <TabsList className="grid grid-cols-5 w-full max-w-md">
            <TabsTrigger value="all">All</TabsTrigger>
            <TabsTrigger value="bag">Bags</TabsTrigger>
            <TabsTrigger value="electronics">Electronics</TabsTrigger>
            <TabsTrigger value="accessory">Accessories</TabsTrigger>
            <TabsTrigger value="other">Other</TabsTrigger>
          </TabsList>

          {error && (
            <div className="mt-4 p-4 bg-red-50 text-red-700 rounded-md">
              {error}
            </div>
          )}

          <div className="mt-6">
            {loading ? (
              <div className="flex justify-center items-center h-64">
                <Loader2 className="h-8 w-8 animate-spin text-primary" />
              </div>
            ) : objects.length === 0 ? (
              <div className="text-center py-12 text-muted-foreground">
                No objects found. Try adjusting your search criteria.
            </div>
            ) : (
              <>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                  {objects.map((object) => (
                <LostObjectCard key={object.id} object={object} />
              ))}
            </div>

                {/* Pagination */}
                {totalPages > 1 && (
                  <div className="flex justify-center items-center space-x-2 mt-8">
                    <Button
                      variant="outline"
                      onClick={() => setCurrentPage(p => Math.max(0, p - 1))}
                      disabled={currentPage === 0}
                    >
                      Previous
                    </Button>
                    <span className="text-sm text-muted-foreground">
                      Page {currentPage + 1} of {totalPages}
                    </span>
                    <Button
                      variant="outline"
                      onClick={() => setCurrentPage(p => Math.min(totalPages - 1, p + 1))}
                      disabled={currentPage === totalPages - 1}
                    >
                      Next
                    </Button>
            </div>
                )}
              </>
            )}
            </div>
        </Tabs>
      </div>
    </div>
  )
}

function LostObjectCard({ object }: { object: LostObject }) {
  return (
    <Card className="overflow-hidden">
      <div className="aspect-square relative">
        <Image 
          src={object.image || "/placeholder.svg"} 
          alt={object.name} 
          fill 
          className="object-cover"
        />
      </div>
      <CardHeader>
        <CardTitle>{object.name}</CardTitle>
      </CardHeader>
      <CardContent>
        <div className="space-y-2 text-sm">
          <div className="flex items-center">
            <MapPin className="h-4 w-4 mr-2 text-muted-foreground" />
            <span>{object.location}</span>
          </div>
          <div className="flex items-center">
            <Calendar className="h-4 w-4 mr-2 text-muted-foreground" />
            <span>{object.date}</span>
          </div>
          <div className="flex items-center">
            <Clock className="h-4 w-4 mr-2 text-muted-foreground" />
            <span>{object.time}</span>
          </div>
        </div>
      </CardContent>
      <CardFooter>
        <Button variant="outline" className="w-full" asChild>
          <Link href={`/lost-objects/${object.id}`}>
          View Details
          </Link>
        </Button>
      </CardFooter>
    </Card>
  )
}



===== FILE: ./app/map/page.tsx =====
"use client"

import { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { MapPin, Search, Layers, List } from "lucide-react"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Input } from "@/components/ui/input"
import dynamic from "next/dynamic"

// Import MapViewer component dynamically to avoid SSR issues
const MapViewer = dynamic(() => import("@/components/map-viewer"), { ssr: false })

// Mock data for initial development
const MOCK_OBJECT_LOCATIONS = [
  {
    id: 1,
    name: "Black Backpack",
    location: "Library, 2nd Floor",
    date: "2025-05-15",
    image: "/placeholder.svg?height=100&width=100",
    category: "bag",
    coordinates: {
      lat: 40.7128,
      lng: -74.006,
      x: 150,
      y: 120,
    },
  },
  {
    id: 2,
    name: "Blue Smartphone",
    location: "Cafeteria",
    date: "2025-05-16",
    image: "/placeholder.svg?height=100&width=100",
    category: "electronics",
    coordinates: {
      lat: 40.7138,
      lng: -74.013,
      x: 320,
      y: 280,
    },
  },
  {
    id: 3,
    name: "Red Wallet",
    location: "Gym Area",
    date: "2025-05-17",
    image: "/placeholder.svg?height=100&width=100",
    category: "accessory",
    coordinates: {
      lat: 40.7148,
      lng: -74.001,
      x: 450,
      y: 380,
    },
  },
]

export default function MapPage() {
  const [objects, setObjects] = useState(MOCK_OBJECT_LOCATIONS)
  const [selectedCategory, setSelectedCategory] = useState("all")
  const [loading, setLoading] = useState(false)
  const [searchQuery, setSearchQuery] = useState("")
  
  // In a real app, fetch from API
  useEffect(() => {
    const fetchData = async () => {
      setLoading(true)
      
      try {
        // Simulate API call
        // In production, replace with real API call:
        // const response = await fetch('/api/lost-objects?status=found');
        // const data = await response.json();
        // setObjects(data.objects);
        
        // For now, just simulate a delay
        setTimeout(() => {
          setLoading(false)
        }, 500)
      } catch (error) {
        console.error("Error fetching object locations:", error)
        setLoading(false)
      }
    }
    
    fetchData()
  }, [])
  
  // Filter objects by category and search query
  const filteredObjects = objects.filter(obj => {
    const categoryMatch = selectedCategory === "all" || obj.category === selectedCategory
    const searchMatch = !searchQuery || 
      obj.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
      obj.location.toLowerCase().includes(searchQuery.toLowerCase())
    
    return categoryMatch && searchMatch
  })

  return (
    <div className="container py-8">
      <div className="flex flex-col space-y-4">
        <div>
          <h1 className="text-3xl font-bold">Lost Object Map</h1>
          <p className="text-muted-foreground">Locate and track lost items on the map</p>
        </div>
        
        <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
          {/* Sidebar filters */}
          <div className="lg:col-span-1">
            <Card>
              <CardHeader>
                <CardTitle>Filters</CardTitle>
                <CardDescription>Narrow down your search</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="space-y-2">
                  <label className="text-sm font-medium">Category</label>
                  <Select value={selectedCategory} onValueChange={setSelectedCategory}>
                    <SelectTrigger>
                      <SelectValue placeholder="Select category" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="all">All Categories</SelectItem>
                      <SelectItem value="bag">Bags</SelectItem>
                      <SelectItem value="electronics">Electronics</SelectItem>
                      <SelectItem value="accessory">Accessories</SelectItem>
                      <SelectItem value="clothing">Clothing</SelectItem>
                      <SelectItem value="document">Documents</SelectItem>
                      <SelectItem value="other">Other</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                
                <div className="space-y-2">
                  <label className="text-sm font-medium">Search</label>
                  <div className="relative">
                    <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
                    <Input
                      type="search"
                      placeholder="Search by name or location"
                      className="pl-8"
                      value={searchQuery}
                      onChange={(e) => setSearchQuery(e.target.value)}
                    />
                  </div>
                </div>
              </CardContent>
              
              <CardFooter>
                <Button
                  variant="outline"
                  className="w-full"
                  onClick={() => {
                    setSelectedCategory("all")
                    setSearchQuery("")
                  }}
                >
                  Reset Filters
                </Button>
              </CardFooter>
            </Card>
            
            <div className="mt-4">
              <Card>
                <CardHeader className="p-4">
                  <CardTitle className="text-lg">Found Objects ({filteredObjects.length})</CardTitle>
                </CardHeader>
                <CardContent className="p-4 max-h-[400px] overflow-y-auto">
                  {loading ? (
                    <div className="text-center py-8">Loading...</div>
                  ) : filteredObjects.length === 0 ? (
                    <div className="text-center py-8 text-muted-foreground">
                      No objects found matching your criteria
                    </div>
                  ) : (
                    <div className="space-y-4">
                      {filteredObjects.map((obj) => (
                        <div
                          key={obj.id}
                          className="flex items-center p-2 border rounded-md hover:bg-muted transition cursor-pointer"
                        >
                          <div className="w-12 h-12 rounded-md mr-3 overflow-hidden">
                            <img
                              src={obj.image}
                              alt={obj.name}
                              className="w-full h-full object-cover"
                            />
                          </div>
                          <div className="flex-1">
                            <h4 className="font-medium">{obj.name}</h4>
                            <div className="flex items-center text-xs text-muted-foreground">
                              <MapPin className="h-3 w-3 mr-1" />
                              {obj.location}
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                  )}
                </CardContent>
              </Card>
            </div>
          </div>
          
          {/* Map view */}
          <div className="lg:col-span-3">
            <Tabs defaultValue="map" className="w-full">
              <TabsList>
                <TabsTrigger value="map">
                  <Layers className="h-4 w-4 mr-2" />
                  Map View
                </TabsTrigger>
                <TabsTrigger value="list">
                  <List className="h-4 w-4 mr-2" />
                  List View
                </TabsTrigger>
              </TabsList>
              
              <TabsContent value="map">
                <Card>
                  <CardContent className="p-0 relative overflow-hidden">
                    <div className="w-full h-[600px]">
                      {!loading && (
                        <MapViewer objects={filteredObjects} />
                      )}
                    </div>
                  </CardContent>
                </Card>
              </TabsContent>
              
              <TabsContent value="list">
                <Card>
                  <CardContent>
                    <div className="space-y-4 py-4">
                      {filteredObjects.length === 0 ? (
                        <div className="text-center py-8 text-muted-foreground">
                          No objects found matching your criteria
                        </div>
                      ) : (
                        filteredObjects.map((obj) => (
                          <Card key={obj.id}>
                            <CardContent className="p-4">
                              <div className="flex flex-col sm:flex-row gap-4">
                                <div className="sm:w-1/4">
                                  <img
                                    src={obj.image}
                                    alt={obj.name}
                                    className="w-full aspect-square object-cover rounded-md"
                                  />
                                </div>
                                <div className="flex-1">
                                  <h3 className="text-lg font-bold">{obj.name}</h3>
                                  <div className="mt-2 space-y-1">
                                    <div className="flex items-center gap-1 text-sm">
                                      <MapPin className="h-4 w-4 text-muted-foreground" />
                                      <span>{obj.location}</span>
                                    </div>
                                    <p className="text-sm">Found on: {obj.date}</p>
                                    <p className="text-sm capitalize">Category: {obj.category}</p>
                                  </div>
                                  <div className="mt-4">
                                    <Button size="sm">View Details</Button>
                                  </div>
                                </div>
                              </div>
                            </CardContent>
                          </Card>
                        ))
                      )}
                    </div>
                  </CardContent>
                </Card>
              </TabsContent>
            </Tabs>
          </div>
        </div>
      </div>
    </div>
  )
}



===== FILE: ./app/page.tsx =====
import { HeroSection } from "@/components/hero-section"
import { FeaturesSection } from "@/components/features-section"
import { HowItWorks } from "@/components/how-it-works"
import { FeatureGallery } from "@/components/feature-gallery"
import { Testimonials } from "@/components/testimonials"

export default function Home() {
  return (
    <div className="flex flex-col">
      <HeroSection />
      <FeatureGallery />
      <FeaturesSection />
      <HowItWorks />
      <Testimonials />
    </div>
  )
}



===== FILE: ./app/report/page.tsx =====
"use client"

import { useState } from "react"
import { useForm } from "react-hook-form"
import { zodResolver } from "@hookform/resolvers/zod"
import { z } from "zod"
import { useRouter } from "next/navigation"
import { useSession } from "next-auth/react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Calendar } from "@/components/ui/calendar"
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover"
import { cn } from "@/lib/utils"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { format } from "date-fns"
import { CalendarIcon, MapPin, Upload, Loader2, X } from "lucide-react"
import { PageContainer } from "@/components/page-container"

// Form validation schema
const reportSchema = z.object({
  name: z.string().min(3, "Name must be at least 3 characters"),
  location: z.string().min(3, "Location is required"),
  description: z.string().min(10, "Please provide a detailed description"),
  category: z.string().min(1, "Please select a category"),
  date: z.date({ required_error: "Date is required" }),
  time: z.string().min(1, "Time is required"),
  image: z.string().min(1, "Please upload an image of the item"),
  contactInformation: z.string().optional()
})

type ReportFormValues = z.infer<typeof reportSchema>

export default function ReportPage() {
  const { data: session, status } = useSession()
  const router = useRouter()
  const [date, setDate] = useState<Date | undefined>(new Date())
  const [isUploading, setIsUploading] = useState(false)
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [uploadedImage, setUploadedImage] = useState<string | null>(null)
  const [error, setError] = useState<string | null>(null)
  const [success, setSuccess] = useState(false)

  const { register, handleSubmit, setValue, formState: { errors }, reset } = useForm<ReportFormValues>({
    resolver: zodResolver(reportSchema),
    defaultValues: {
      name: "",
      location: "",
      description: "",
      category: "",
      time: "",
      contactInformation: session?.user?.email || ""
    }
  })

  // Set date and image when they change
  if (date) {
    setValue("date", date)
  }

  if (uploadedImage) {
    setValue("image", uploadedImage)
  }

  const handleImageUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0]
    if (!file) return

    // Reset any previous errors
    setError(null)

    // Validate file type
    if (!file.type.startsWith("image/")) {
      setError("File must be an image")
      return
    }

    // Validate file size (5MB max)
    if (file.size > 5 * 1024 * 1024) {
      setError("File size must be less than 5MB")
      return
    }

      setIsUploading(true)

    try {
      // Create form data for upload
      const formData = new FormData()
      formData.append("file", file)

      // Upload image to server
      const response = await fetch("/api/upload", {
        method: "POST",
        body: formData,
      })

      if (!response.ok) {
        throw new Error("Failed to upload image")
      }

      const data = await response.json()
      setUploadedImage(data.image.url)
    } catch (err) {
      console.error("Upload error:", err)
      setError("Failed to upload image. Please try again.")
    } finally {
        setIsUploading(false)
    }
  }

  const onSubmit = async (data: ReportFormValues) => {
    if (status === "unauthenticated") {
      // Save form data to session storage and redirect to sign in
      sessionStorage.setItem("reportFormData", JSON.stringify(data))
      router.push("/auth/signin?callbackUrl=/report&reason=report")
      return
    }

    setIsSubmitting(true)
    setError(null)

    try {
      // Format date for submission
      const formattedDate = format(data.date, "yyyy-MM-dd")

      // Prepare coordinates (in a real app, this would be from a map picker)
      const coordinates = {
        x: Math.floor(Math.random() * 500), // Mock coordinates for demo
        y: Math.floor(Math.random() * 400),
        lat: 40.7128 + (Math.random() * 0.01), // Mock NYC area coordinates
        lng: -74.006 + (Math.random() * 0.01)
      }

      // Submit to API
      const response = await fetch("/api/lost-objects", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          ...data,
          date: formattedDate,
          coordinates
        }),
      })

      if (!response.ok) {
        const result = await response.json()
        throw new Error(result.error || "Failed to submit report")
      }

      // Success
      setSuccess(true)
      reset()
      setUploadedImage(null)
      
      // Redirect to confirmation page after a short delay
    setTimeout(() => {
        router.push("/lost-objects")
      }, 2000)
    } catch (err: any) {
      setError(err.message || "An error occurred while submitting your report")
    } finally {
      setIsSubmitting(false)
    }
  }

  return (
    <PageContainer>
      <div className="max-w-2xl mx-auto">
        <div className="flex flex-col space-y-2 mb-6">
          <h1 className="text-3xl font-bold">Report a Found Item</h1>
          <p className="text-muted-foreground">
            Fill out the form below with details about the item you found
          </p>
        </div>

        {success && (
          <Alert className="mb-6 border-green-500 bg-green-50 text-green-700">
            <AlertDescription>
              Your item has been reported successfully! Redirecting...
            </AlertDescription>
          </Alert>
        )}

        <Card className="transform-gpu">
          <CardHeader>
            <CardTitle>Item Details</CardTitle>
            <CardDescription>
              Provide as much information as possible to help someone find their lost item
            </CardDescription>
          </CardHeader>
          <CardContent>
            <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
              {error && (
                <Alert variant="destructive">
                  <AlertDescription>{error}</AlertDescription>
                </Alert>
              )}

              <div className="space-y-4">
                <div className="grid grid-cols-1 gap-4 sm:grid-cols-2">
                  <div className="space-y-2">
                    <Label htmlFor="name">Item Name</Label>
                    <Input
                      id="name"
                      placeholder="e.g., Black Backpack"
                      {...register("name")}
                    />
                    {errors.name && (
                      <p className="text-sm text-destructive">{errors.name.message}</p>
                    )}
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="category">Category</Label>
                    <Select
                      onValueChange={(value) => setValue("category", value)}
                      defaultValue=""
                    >
                      <SelectTrigger id="category">
                        <SelectValue placeholder="Select category" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="bag">Bag</SelectItem>
                        <SelectItem value="electronics">Electronics</SelectItem>
                        <SelectItem value="accessory">Accessory</SelectItem>
                        <SelectItem value="clothing">Clothing</SelectItem>
                        <SelectItem value="document">Document</SelectItem>
                        <SelectItem value="other">Other</SelectItem>
                      </SelectContent>
                    </Select>
                    {errors.category && (
                      <p className="text-sm text-destructive">{errors.category.message}</p>
                    )}
                  </div>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="description">Description</Label>
                  <Textarea
                    id="description"
                    placeholder="Describe the item in detail (color, brand, distinguishing features, etc.)"
                    rows={4}
                    {...register("description")}
                  />
                  {errors.description && (
                    <p className="text-sm text-destructive">{errors.description.message}</p>
                  )}
                </div>

                <div className="grid grid-cols-1 gap-4 sm:grid-cols-2">
                  <div className="space-y-2">
                    <Label>Date Found</Label>
                    <Popover>
                      <PopoverTrigger asChild>
                        <Button
                          variant={"outline"}
                          className={cn("w-full justify-start text-left font-normal", !date && "text-muted-foreground")}
                        >
                          <CalendarIcon className="mr-2 h-4 w-4" />
                          {date ? format(date, "PPP") : <span>Pick a date</span>}
                        </Button>
                      </PopoverTrigger>
                      <PopoverContent className="w-auto p-0">
                        <Calendar
                          mode="single"
                          selected={date}
                          onSelect={setDate}
                          initialFocus
                        />
                      </PopoverContent>
                    </Popover>
                    {errors.date && (
                      <p className="text-sm text-destructive">{errors.date.message}</p>
                    )}
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="time">Approximate Time</Label>
                    <Input
                      id="time"
                      type="time"
                      {...register("time")}
                    />
                    {errors.time && (
                      <p className="text-sm text-destructive">{errors.time.message}</p>
                    )}
                  </div>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="location">Found Location</Label>
                  <div className="flex space-x-2">
                    <Input
                      id="location"
                      placeholder="e.g., Library, 2nd Floor"
                      className="flex-1"
                      {...register("location")}
                    />
                    <Button type="button" variant="outline" size="icon" title="Pick location on map">
                      <MapPin className="h-4 w-4" />
                    </Button>
                  </div>
                  {errors.location && (
                    <p className="text-sm text-destructive">{errors.location.message}</p>
                  )}
                </div>

                <div className="space-y-2">
                  <Label htmlFor="image">Upload Image</Label>
                  <div className="flex flex-col items-center justify-center border-2 border-dashed rounded-md p-6 relative">
                    {uploadedImage ? (
                      <div className="relative w-full h-48">
                        <img
                          src={uploadedImage}
                          alt="Uploaded item"
                          className="w-full h-full object-contain"
                        />
                        <Button
                          type="button"
                          variant="outline"
                          size="icon"
                          className="absolute top-2 right-2"
                          onClick={() => {
                            setUploadedImage(null)
                            setValue("image", "")
                          }}
                        >
                          <X className="h-4 w-4" />
                        </Button>
                      </div>
                    ) : (
                      <>
                        {isUploading ? (
                          <div className="flex flex-col items-center justify-center py-4">
                            <Loader2 className="h-8 w-8 animate-spin text-primary mb-2" />
                            <p className="text-sm text-muted-foreground">Uploading image...</p>
                          </div>
                        ) : (
                          <>
                            <Upload className="h-10 w-10 text-muted-foreground mb-2" />
                            <p className="text-sm text-muted-foreground mb-2">Drag and drop or click to upload</p>
                            <p className="text-xs text-muted-foreground">PNG, JPG or JPEG (max. 5MB)</p>
                            <Input
                              id="image"
                              type="file"
                              accept="image/*"
                              className="absolute inset-0 w-full h-full opacity-0 cursor-pointer"
                              onChange={handleImageUpload}
                            />
                          </>
                        )}
                      </>
                    )}
                  </div>
                  {errors.image && (
                    <p className="text-sm text-destructive">{errors.image.message}</p>
                  )}
                </div>

                <div className="space-y-2">
                  <Label htmlFor="contactInformation">Contact Information (Optional)</Label>
                  <Input
                    id="contactInformation"
                    placeholder="Email or phone number where you can be reached"
                    {...register("contactInformation")}
                    defaultValue={session?.user?.email || ""}
                  />
                </div>
              </div>

              <CardFooter className="px-0 pt-4">
                <Button
                  type="submit"
                  className="w-full"
                  disabled={isSubmitting || isUploading || success}
                >
                  {isSubmitting ? (
                    <>
                      <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                      Submitting...
                    </>
                  ) : (
                    "Submit Report"
                  )}
                </Button>
              </CardFooter>
            </form>
          </CardContent>
        </Card>
      </div>
    </PageContainer>
  )
}




===== FILE: ./app/search/loading.tsx =====
export default function Loading() {
  return null
}



===== FILE: ./app/search/page.tsx =====
"use client"

import { useState, useCallback } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Badge } from "@/components/ui/badge"
import { Loader2, Upload, Search as SearchIcon, Image as ImageIcon } from "lucide-react"
import Image from "next/image"
import { useDropzone } from "react-dropzone"

interface SearchResult {
  id: string;
  name: string;
  location: string;
  date: string;
  image: string;
  matchScore: number;
  category: string;
}

export default function SearchPage() {
  const [searchMethod, setSearchMethod] = useState<"image" | "text">("text")
  const [searchTerm, setSearchTerm] = useState("")
  const [uploadedImage, setUploadedImage] = useState<File | null>(null)
  const [imagePreview, setImagePreview] = useState<string | null>(null)
  const [results, setResults] = useState<SearchResult[]>([])
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)
  
  const onDrop = useCallback((acceptedFiles: File[]) => {
    const file = acceptedFiles[0]
    if (file) {
      setUploadedImage(file)
      const reader = new FileReader()
      reader.onload = () => {
        setImagePreview(reader.result as string)
      }
      reader.readAsDataURL(file)
    }
  }, [])

  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    onDrop,
    accept: {
      'image/*': ['.jpeg', '.jpg', '.png']
    },
    maxFiles: 1,
    multiple: false
  })

  const handleTextSearch = async () => {
    if (!searchTerm.trim()) return

    setLoading(true)
    setError(null)

    try {
      const response = await fetch(`/api/lost-objects?search=${encodeURIComponent(searchTerm)}`)
      
      if (!response.ok) {
        throw new Error("Failed to search objects")
      }
      
      const data = await response.json()
      setResults(data.items.map((item: any) => ({
        id: item.id,
        name: item.name,
        location: item.location,
        date: item.date,
        image: item.image,
        matchScore: 100, // Text search doesn't have match scores
        category: item.category
      })))
    } catch (err) {
      console.error("Error searching objects:", err)
      setError("Failed to search objects. Please try again.")
    } finally {
      setLoading(false)
    }
  }

  const handleImageSearch = async () => {
    if (!uploadedImage) return

    setLoading(true)
    setError(null)

    try {
      // First, get image features using the detection service
      const formData = new FormData()
      formData.append("image", uploadedImage)

      const featuresResponse = await fetch("/api/detection/features", {
        method: "POST",
        body: formData
      })

      if (!featuresResponse.ok) {
        throw new Error("Failed to extract image features")
      }
      
      const { features } = await featuresResponse.json()

      // Then, search using the features
      const searchResponse = await fetch("/api/search/image", {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          features,
          minScore: 0.7 // Minimum similarity score
        })
      })
      
      if (!searchResponse.ok) {
        throw new Error("Failed to search with image")
      }
      
      const data = await searchResponse.json()
      setResults(data.results)
    } catch (err) {
      console.error("Error searching with image:", err)
      setError("Failed to search with image. Please try again.")
    } finally {
      setLoading(false)
    }
  }

  const formatDate = (dateString: string) => {
    const date = new Date(dateString)
    return date.toLocaleDateString("fr-FR", {
      year: "numeric",
      month: "long",
      day: "numeric"
    })
  }

  return (
    <div className="container mx-auto py-8">
      <div className="max-w-4xl mx-auto">
        <h1 className="text-3xl font-bold mb-8">Rechercher un objet perdu</h1>

        <Tabs defaultValue="text" value={searchMethod} onValueChange={(v) => setSearchMethod(v as "image" | "text")}>
          <TabsList className="grid w-full grid-cols-2 mb-8">
            <TabsTrigger value="text">Recherche par texte</TabsTrigger>
            <TabsTrigger value="image">Recherche par image</TabsTrigger>
        </TabsList>

          <TabsContent value="text">
            <Card>
              <CardHeader>
                <CardTitle>Recherche par texte</CardTitle>
                <CardDescription>
                  Entrez une description de l'objet que vous recherchez
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="flex gap-4">
                  <Input
                    placeholder="Ex: Sac à dos noir, téléphone Samsung..."
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    onKeyDown={(e) => e.key === "Enter" && handleTextSearch()}
                  />
                  <Button onClick={handleTextSearch} disabled={loading}>
                    {loading ? (
                      <Loader2 className="h-4 w-4 animate-spin" />
                        ) : (
                      <SearchIcon className="h-4 w-4" />
                    )}
                    <span className="ml-2">Rechercher</span>
                      </Button>
                </div>
              </CardContent>
            </Card>
        </TabsContent>
        
          <TabsContent value="image">
          <Card>
            <CardHeader>
                <CardTitle>Recherche par image</CardTitle>
                <CardDescription>
                  Téléchargez une photo de l'objet que vous recherchez
                </CardDescription>
            </CardHeader>
            <CardContent>
                <div
                  {...getRootProps()}
                  className={`border-2 border-dashed rounded-lg p-8 text-center cursor-pointer transition-colors ${
                    isDragActive ? "border-primary bg-primary/5" : "border-muted-foreground/25"
                  }`}
                >
                  <input {...getInputProps()} />
                  {imagePreview ? (
                <div className="space-y-4">
                      <div className="relative h-48 w-full">
                        <Image
                          src={imagePreview}
                          alt="Preview"
                          fill
                          className="object-contain rounded-lg"
                        />
                      </div>
                      <Button onClick={handleImageSearch} disabled={loading}>
                        {loading ? (
                          <Loader2 className="h-4 w-4 animate-spin" />
                        ) : (
                          <SearchIcon className="h-4 w-4" />
                        )}
                        <span className="ml-2">Rechercher</span>
                      </Button>
                    </div>
                  ) : (
                    <div className="space-y-4">
                      <div className="mx-auto w-12 h-12 rounded-full bg-primary/10 flex items-center justify-center">
                        <Upload className="h-6 w-6 text-primary" />
                      </div>
                      <div>
                        <p className="text-sm font-medium">
                          Glissez-déposez une image ici, ou cliquez pour sélectionner
                        </p>
                        <p className="text-sm text-muted-foreground mt-1">
                          Formats acceptés: JPG, JPEG, PNG
                        </p>
                  </div>
                  </div>
                  )}
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>

        {error && (
          <div className="mt-4 p-4 bg-red-50 border border-red-200 rounded-lg">
            <p className="text-sm text-red-600">{error}</p>
          </div>
        )}

        {results.length > 0 && (
              <div className="mt-8">
            <h2 className="text-xl font-semibold mb-4">
              Résultats de la recherche ({results.length})
            </h2>
            <div className="grid gap-4 md:grid-cols-2">
              {results.map((result) => (
                <Card key={result.id}>
                  <div className="relative h-48 w-full">
                              <Image
                      src={result.image}
                                alt={result.name}
                                fill
                      className="object-cover rounded-t-lg"
                              />
                    {result.matchScore && (
                      <Badge
                        variant="secondary"
                        className="absolute top-2 right-2"
                      >
                        {Math.round(result.matchScore * 100)}% match
                      </Badge>
                    )}
                            </div>
                  <CardContent className="p-4">
                    <h3 className="font-semibold">{result.name}</h3>
                    <p className="text-sm text-muted-foreground mt-1">
                      {result.location}
                                </p>
                    <p className="text-sm text-muted-foreground">
                      {formatDate(result.date)}
                          </p>
                    <Badge variant="outline" className="mt-2">
                      {result.category}
                    </Badge>
                  </CardContent>
                      </Card>
                    ))}
                  </div>
          </div>
        )}

        {!loading && results.length === 0 && searchTerm && (
          <div className="mt-8 text-center text-muted-foreground">
            Aucun résultat trouvé pour votre recherche
                </div>
              )}
      </div>
    </div>
  )
}



===== FILE: ./app/signup/page.tsx =====
"use client";

import { useEffect } from "react";
import { useRouter } from "next/navigation";
import { Loader2 } from "lucide-react";

export default function SignupPage() {
  const router = useRouter();

  useEffect(() => {
    router.push("/auth/register");
  }, [router]);

  return (
    <div className="flex h-screen w-full items-center justify-center">
      <div className="flex flex-col items-center gap-2">
        <Loader2 className="h-8 w-8 animate-spin text-primary" />
        <p className="text-lg text-muted-foreground">Redirecting to signup...</p>
      </div>
    </div>
  );
} 


===== FILE: ./components/back-to-top.tsx =====
"use client"

import { useState, useEffect } from 'react'
import { ChevronUp } from 'lucide-react'

export function BackToTop() {
  const [isVisible, setIsVisible] = useState(false)

  useEffect(() => {
    // Show button when page is scrolled down 300px
    const toggleVisibility = () => {
      if (window.scrollY > 300) {
        setIsVisible(true)
      } else {
        setIsVisible(false)
      }
    }

    window.addEventListener('scroll', toggleVisibility, { passive: true })

    return () => window.removeEventListener('scroll', toggleVisibility)
  }, [])

  const scrollToTop = () => {
    window.scrollTo({
      top: 0,
      behavior: 'smooth'
    })
  }

  return (
    <button
      onClick={scrollToTop}
      className={`back-to-top ${isVisible ? 'visible' : ''}`}
      aria-label="Scroll to top"
    >
      <ChevronUp className="h-5 w-5" />
    </button>
  )
} 


===== FILE: ./components/client-wrapper.tsx =====
"use client"

import { Navbar } from "./navbar"

export function ClientWrapper() {
  return <Navbar />
} 


===== FILE: ./components/cta.tsx =====
import Link from "next/link"
import { GradientButton } from "@/components/ui/gradient-button"
import { Button } from "@/components/ui/button"

export function Cta() {
  return (
    <section className="border-t bg-muted/30 py-20">
      <div className="container px-4 md:px-6">
        <div className="grid gap-6 items-center">
          <div className="flex flex-col gap-4 text-center mx-auto max-w-[900px]">
            <div className="space-y-4">
              <h2 className="text-3xl font-bold tracking-tighter sm:text-4xl md:text-5xl">Ready to Find Your Lost Items?</h2>
              <p className="mx-auto max-w-[700px] text-muted-foreground md:text-xl/relaxed">
                Start using our AI-powered lost and found system today to quickly recover your valuable belongings.
              </p>
            </div>
            <div className="mx-auto flex flex-col sm:flex-row gap-4 min-[400px]:w-full min-[400px]:max-w-md">
              <Link href="/report" className="w-full">
                <GradientButton size="lg" className="w-full" animation="shimmer">
                  Get Started Now
                </GradientButton>
              </Link>
              <Link href="/search" className="w-full">
                <Button size="lg" variant="outline" className="w-full">
                  Learn More
                </Button>
              </Link>
            </div>
          </div>
        </div>
      </div>
    </section>
  )
} 


===== FILE: ./components/feature-gallery.tsx =====
"use client"

import Image from "next/image"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Card, CardContent } from "@/components/ui/card"
import { Smartphone, CameraIcon, Search as SearchIcon, CheckCircle, BarChart, BellRing } from "lucide-react"

export function FeatureGallery() {
  return (
    <section className="py-20 bg-background relative overflow-hidden">
      <div className="container px-4 md:px-6 mx-auto">
        <div className="flex flex-col items-center justify-center space-y-4 text-center mb-12">
          <h2 className="text-3xl font-bold tracking-tighter md:text-4xl/tight">
            How <span className="text-gradient">RECOVR</span> Works
          </h2>
          <p className="max-w-[700px] text-muted-foreground md:text-lg/relaxed">
            Our advanced AI system efficiently connects people with their lost items through a simple process
          </p>
        </div>
        
        <div className="mx-auto max-w-4xl">
          <Tabs defaultValue="report" className="w-full">
            <TabsList className="grid w-full grid-cols-3 mb-8">
              <TabsTrigger value="report" className="data-[state=active]:bg-background">
                <div className="flex items-center gap-2">
                  <CameraIcon className="h-4 w-4" />
                  <span>Report</span>
                </div>
              </TabsTrigger>
              <TabsTrigger value="match" className="data-[state=active]:bg-background">
                <div className="flex items-center gap-2">
                  <SearchIcon className="h-4 w-4" />
                  <span>Match</span>
                </div>
              </TabsTrigger>
              <TabsTrigger value="recover" className="data-[state=active]:bg-background">
                <div className="flex items-center gap-2">
                  <CheckCircle className="h-4 w-4" />
                  <span>Recover</span>
                </div>
              </TabsTrigger>
            </TabsList>
            
            <TabsContent value="report" className="border rounded-lg p-1">
              <div className="relative overflow-hidden rounded-md aspect-video bg-muted">
                <Image 
                  src="/report-step.svg" 
                  alt="Reporting lost item on RECOVR"
                  fill
                  className="object-cover"
                />
                <div className="absolute inset-0 bg-gradient-to-t from-black/60 to-transparent flex flex-col justify-end p-6 text-white">
                  <h3 className="text-xl font-bold mb-2">Report Your Lost Item</h3>
                  <p className="text-sm text-white/80">
                    Take a photo or upload an image of your lost item along with a description and location details.
                  </p>
                </div>
              </div>
              
              <div className="grid grid-cols-2 gap-4 mt-4">
                <Card className="overflow-hidden">
                  <CardContent className="p-0 relative aspect-[4/3]">
                    <Image 
                      src="/report-detail.svg"
                      alt="Adding item details on RECOVR" 
                      fill 
                      className="object-cover"
                    />
                  </CardContent>
                </Card>
                <Card className="overflow-hidden">
                  <CardContent className="p-0 relative aspect-[4/3]">
                    <Image 
                      src="/mobile-upload.svg"
                      alt="Mobile reporting on RECOVR" 
                      fill 
                      className="object-cover"
                    />
                  </CardContent>
                </Card>
              </div>
            </TabsContent>
            
            <TabsContent value="match" className="border rounded-lg p-1">
              <div className="relative overflow-hidden rounded-md aspect-video bg-muted">
                <Image 
                  src="/matching-step.svg" 
                  alt="AI matching process" 
                  fill 
                  className="object-cover"
                />
                <div className="absolute inset-0 bg-gradient-to-t from-black/60 to-transparent flex flex-col justify-end p-6 text-white">
                  <h3 className="text-xl font-bold mb-2">AI-Powered Matching</h3>
                  <p className="text-sm text-white/80">
                    Our advanced AI analyzes images to find potential matches from our database with high accuracy.
                  </p>
                </div>
              </div>
              
              <div className="grid grid-cols-2 gap-4 mt-4">
                <Card className="overflow-hidden">
                  <CardContent className="p-0 relative aspect-[4/3]">
                    <Image 
                      src="/ai-analysis.svg"
                      alt="AI vision analysis" 
                      fill 
                      className="object-cover"
                    />
                  </CardContent>
                </Card>
                <Card className="overflow-hidden">
                  <CardContent className="p-0 relative aspect-[4/3]">
                    <Image 
                      src="/matching-results.svg"
                      alt="Item matching results" 
                      fill 
                      className="object-cover"
                    />
                  </CardContent>
                </Card>
              </div>
            </TabsContent>
            
            <TabsContent value="recover" className="border rounded-lg p-1">
              <div className="relative overflow-hidden rounded-md aspect-video bg-muted">
                <Image 
                  src="/recover-step.svg" 
                  alt="Recovering lost item" 
                  fill 
                  className="object-cover"
                />
                <div className="absolute inset-0 bg-gradient-to-t from-black/60 to-transparent flex flex-col justify-end p-6 text-white">
                  <h3 className="text-xl font-bold mb-2">Recover Your Item</h3>
                  <p className="text-sm text-white/80">
                    Get notified when your item is found and arrange for safe recovery through our secure system.
                  </p>
                </div>
              </div>
              
              <div className="grid grid-cols-2 gap-4 mt-4">
                <Card className="overflow-hidden">
                  <CardContent className="p-0 relative aspect-[4/3]">
                    <Image 
                      src="/notify-step.svg"
                      alt="Notification on RECOVR" 
                      fill 
                      className="object-cover"
                    />
                  </CardContent>
                </Card>
                <Card className="overflow-hidden">
                  <CardContent className="p-0 relative aspect-[4/3]">
                    <Image 
                      src="/handover.svg"
                      alt="Item handover" 
                      fill 
                      className="object-cover"
                    />
                  </CardContent>
                </Card>
              </div>
            </TabsContent>
          </Tabs>
        </div>
        
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mt-20">
          <div className="flex flex-col items-center text-center p-4">
            <div className="h-12 w-12 rounded-full bg-primary/10 flex items-center justify-center mb-4">
              <Smartphone className="h-6 w-6 text-primary" />
            </div>
            <h3 className="text-lg font-semibold mb-2">Mobile-Ready</h3>
            <p className="text-sm text-muted-foreground">
              Report and track your lost items on the go with our responsive mobile interface.
            </p>
          </div>
          <div className="flex flex-col items-center text-center p-4">
            <div className="h-12 w-12 rounded-full bg-primary/10 flex items-center justify-center mb-4">
              <BellRing className="h-6 w-6 text-primary" />
            </div>
            <h3 className="text-lg font-semibold mb-2">Instant Alerts</h3>
            <p className="text-sm text-muted-foreground">
              Get immediate notifications when a potential match for your item is found.
            </p>
          </div>
          <div className="flex flex-col items-center text-center p-4">
            <div className="h-12 w-12 rounded-full bg-primary/10 flex items-center justify-center mb-4">
              <BarChart className="h-6 w-6 text-primary" />
            </div>
            <h3 className="text-lg font-semibold mb-2">Recovery Rate</h3>
            <p className="text-sm text-muted-foreground">
              Our system boasts a 96% success rate for returning items to their owners.
            </p>
          </div>
        </div>
      </div>
    </section>
  )
} 


===== FILE: ./components/features-section.tsx =====
"use client"

import { MapPin, Search, Upload, Clock, Shield, Image as ImageIcon, Database, Map } from "lucide-react"

const features = [
  {
    icon: <Upload className="h-5 w-5" />,
    name: "Easy Reporting",
    description:
      "Report lost items in seconds with our intuitive form. Upload images and provide details to improve matching accuracy.",
  },
  {
    icon: <ImageIcon className="h-5 w-5" />,
    name: "AI Image Matching",
    description:
      "Our system uses TensorFlow.js to extract features from images and match your lost items with found objects.",
  },
  {
    icon: <MapPin className="h-5 w-5" />,
    name: "Location Tracking",
    description:
      "Track where items were lost or found with interactive maps to help narrow down search areas.",
  },
  {
    icon: <Search className="h-5 w-5" />,
    name: "Smart Search",
    description:
      "Find items using text descriptions, categories, or upload an image for visual similarity search.",
  },
  {
    icon: <Database className="h-5 w-5" />,
    name: "Secure Storage",
    description:
      "All data is securely stored in MongoDB with proper authentication and encryption protocols.",
  },
  {
    icon: <Map className="h-5 w-5" />,
    name: "Interactive Maps",
    description:
      "View lost and found items on a map to easily locate where objects were reported.",
  },
  {
    icon: <Clock className="h-5 w-5" />,
    name: "Real-time Updates",
    description:
      "Receive notifications when potential matches are found for your lost items.",
  },
  {
    icon: <Shield className="h-5 w-5" />,
    name: "Secure System",
    description:
      "JWT authentication, secure API endpoints, and data encryption protect your information.",
  },
]

export function FeaturesSection() {
  return (
    <section className="bg-muted/30 py-20 md:py-24 lg:py-28 w-full">
      <div className="px-4 sm:px-6 lg:px-8 max-w-[1800px] mx-auto">
        <div className="flex flex-col items-center justify-center space-y-5 text-center md:max-w-3xl md:mx-auto">
          <div className="inline-flex items-center rounded-full border bg-background/50 px-3 py-1 text-sm font-semibold">
            <span className="text-primary">Powerful Features</span>
          </div>
          <h2 className="text-3xl font-bold tracking-tighter sm:text-4xl md:text-5xl">Advanced Technology Made Simple</h2>
          <p className="max-w-[700px] text-muted-foreground text-base md:text-lg/relaxed">
            Our system combines cutting-edge AI technology with user-friendly interfaces to create the most effective lost and found solution available.
          </p>
        </div>

        <div className="mx-auto grid max-w-none gap-8 pt-16 md:grid-cols-2 lg:grid-cols-4">
          {features.map((feature, index) => (
            <div key={index} className="group relative flex flex-col gap-2 rounded-lg border bg-background p-6 shadow-sm transition-all duration-200 hover:shadow-md">
              <div className="feature-icon h-12 w-12 flex items-center justify-center text-white">
                {feature.icon}
              </div>
              <h3 className="pt-4 text-xl font-semibold">{feature.name}</h3>
              <p className="text-muted-foreground text-sm">{feature.description}</p>
            </div>
          ))}
        </div>
      </div>
    </section>
  )
} 


===== FILE: ./components/footer.tsx =====
"use client"

import Link from "next/link"
import Image from "next/image"
import { Mail, Phone, MapPin, Github, Linkedin, Twitter } from "lucide-react"

export function Footer() {
  const currentYear = new Date().getFullYear()

  return (
    <footer className="border-t bg-background/80 backdrop-blur-lg w-full">
      <div className="max-w-[1800px] mx-auto px-4 sm:px-6 lg:px-8">
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8 py-12">
          {/* Brand column */}
          <div className="space-y-4">
            <Link href="/" className="inline-block">
              <Image src="/logo.svg" alt="RECOVR Logo" width={140} height={40} />
            </Link>
            <p className="text-sm text-muted-foreground max-w-xs">
              Using advanced AI technology to help you recover your lost belongings quickly and efficiently.
            </p>
            <div className="flex items-center space-x-4 mt-4">
              <Link href="#" className="text-muted-foreground hover:text-primary transition-colors">
                <Github className="h-5 w-5" />
                <span className="sr-only">GitHub</span>
              </Link>
              <Link href="#" className="text-muted-foreground hover:text-primary transition-colors">
                <Twitter className="h-5 w-5" />
                <span className="sr-only">Twitter</span>
              </Link>
              <Link href="#" className="text-muted-foreground hover:text-primary transition-colors">
                <Linkedin className="h-5 w-5" />
                <span className="sr-only">LinkedIn</span>
              </Link>
            </div>
          </div>

          {/* Quick links */}
          <div>
            <h3 className="text-base font-medium mb-4">Quick Links</h3>
            <ul className="space-y-2">
              {[
                { title: "Home", href: "/" },
                { title: "Lost Items", href: "/lost-objects" },
                { title: "Report Item", href: "/report" },
                { title: "Find Item", href: "/search" },
                { title: "Map", href: "/map" },
              ].map((link) => (
                <li key={link.title}>
                  <Link 
                    href={link.href}
                    className="text-sm text-muted-foreground hover:text-primary transition-colors"
                  >
                    {link.title}
                  </Link>
                </li>
              ))}
            </ul>
          </div>

          {/* Resources */}
          <div>
            <h3 className="text-base font-medium mb-4">Resources</h3>
            <ul className="space-y-2">
              {[
                { title: "Help Center", href: "/help" },
                { title: "Privacy Policy", href: "/privacy" },
                { title: "Terms of Service", href: "/terms" },
                { title: "FAQ", href: "/faq" },
                { title: "Blog", href: "/blog" },
              ].map((link) => (
                <li key={link.title}>
                  <Link 
                    href={link.href}
                    className="text-sm text-muted-foreground hover:text-primary transition-colors"
                  >
                    {link.title}
                  </Link>
                </li>
              ))}
            </ul>
          </div>

          {/* Contact info */}
          <div>
            <h3 className="text-base font-medium mb-4">Contact</h3>
            <ul className="space-y-3">
              <li className="flex items-start space-x-3 text-sm">
                <MapPin className="h-5 w-5 text-muted-foreground shrink-0" />
                <span className="text-muted-foreground">
                  123 Recovery Street, Tech Park<br />
                  San Francisco, CA 94107
                </span>
              </li>
              <li className="flex items-center space-x-3 text-sm">
                <Mail className="h-5 w-5 text-muted-foreground" />
                <a href="mailto:contact@recovr.tech" className="text-muted-foreground hover:text-primary transition-colors">
                  contact@recovr.tech
                </a>
              </li>
              <li className="flex items-center space-x-3 text-sm">
                <Phone className="h-5 w-5 text-muted-foreground" />
                <a href="tel:+1-800-RECOVR" className="text-muted-foreground hover:text-primary transition-colors">
                  +1-800-RECOVR
                </a>
              </li>
            </ul>
          </div>
        </div>

        <div className="border-t py-6 flex flex-col sm:flex-row justify-between items-center">
          <p className="text-xs text-muted-foreground">
            © {currentYear} RECOVR Technologies. All rights reserved.
          </p>
          <div className="flex items-center space-x-4 mt-4 sm:mt-0">
            <Link href="/privacy" className="text-xs text-muted-foreground hover:text-primary transition-colors">
              Privacy
            </Link>
            <Link href="/terms" className="text-xs text-muted-foreground hover:text-primary transition-colors">
              Terms
            </Link>
            <Link href="/cookies" className="text-xs text-muted-foreground hover:text-primary transition-colors">
              Cookies
            </Link>
          </div>
        </div>
      </div>
    </footer>
  )
} 


===== FILE: ./components/hero-section.tsx =====
"use client"

import { useEffect, useRef } from "react"
import Link from "next/link"
import { ArrowRight, Search, Upload, Sparkles, ChevronDown, Globe, Shield, Clock, Wand2 } from "lucide-react"
import { GradientButton } from "@/components/ui/gradient-button"
import { Button } from "@/components/ui/button"
import Image from "next/image"

export function HeroSection() {
  return (
    <section className="relative overflow-hidden bg-gradient-to-b from-background to-muted/30 py-16 md:py-20 lg:py-24 w-full">
      {/* Enhanced decorative elements with subtler effects */}
      <div className="absolute inset-0 z-0 overflow-hidden">
        <div className="absolute top-[10%] -right-[15%] h-[600px] w-[600px] rounded-full bg-primary/5 blur-2xl animate-pulse-slow" />
        <div className="absolute -bottom-[30%] -left-[10%] h-[450px] w-[450px] rounded-full bg-accent/5 blur-2xl" />
        <div className="absolute top-[40%] left-[20%] h-[200px] w-[200px] rounded-full bg-secondary/5 blur-xl" />
        
        {/* Subtle grid pattern overlay for depth */}
        <div className="absolute inset-0 bg-grid-pattern opacity-[0.02]" />
        
        {/* Reduced number of particle dots for better performance */}
        <div className="hidden lg:block absolute top-[15%] left-[15%] h-1.5 w-1.5 rounded-full bg-primary/60 shadow-glow"></div>
        <div className="hidden lg:block absolute top-[35%] left-[65%] h-2 w-2 rounded-full bg-accent/60 shadow-glow"></div>
        <div className="hidden lg:block absolute top-[65%] left-[55%] h-1.5 w-1.5 rounded-full bg-secondary/60 shadow-glow"></div>
      </div>
      
      <div className="px-4 sm:px-6 lg:px-8 max-w-[1800px] mx-auto relative z-10">
        <div className="grid gap-8 lg:grid-cols-2 lg:gap-12 items-center">
          {/* Left column with text content */}
          <div className="flex flex-col space-y-6">
            <div className="inline-flex items-center gap-2 rounded-full border bg-background/90 backdrop-blur px-4 py-1.5 text-sm font-medium shadow-soft animate-fade-in max-w-max">
              <span className="flex h-5 w-5 items-center justify-center rounded-full bg-primary/20">
                <Sparkles className="h-3 w-3 text-primary" />
              </span>
              <span className="text-muted-foreground">
                AI-Powered Lost & Found System
              </span>
            </div>
            
            <div className="space-y-4 animate-slide-in-left">
              <h1 className="text-3xl font-bold tracking-tight sm:text-4xl xl:text-5xl/none">
                <span className="block">Lost Something?</span>
                <span className="block text-gradient dark:text-gradient-blue">Let's Recover It</span>
              </h1>
              <p className="max-w-[550px] text-muted-foreground text-base leading-relaxed md:text-lg">
                Using advanced AI vision technology to help you recover your lost belongings. Fast, reliable, and highly accurate.
              </p>
            </div>
            
            <div className="flex flex-col sm:flex-row gap-4 animate-slide-up" style={{animationDelay: "0.2s"}}>
              <Link href="/report">
                <GradientButton size="lg" variant="dark" className="w-full sm:w-auto text-base px-5 py-4 shadow-soft btn-3d">
                  Report Lost Item
                  <Upload className="ml-2 h-4 w-4" />
                </GradientButton>
              </Link>
              <Link href="/search">
                <Button size="lg" variant="outline" className="w-full sm:w-auto group text-base px-5 py-4 shadow-soft border-gradient dark:border-gray-600 dark:text-gray-100 dark:hover:bg-gray-800">
                  Search for Item
                  <Search className="ml-2 h-4 w-4 transition-transform group-hover:translate-x-1" />
                </Button>
              </Link>
            </div>
          </div>
          
          {/* Enhanced right column with interactive graphics */}
          <div className="relative mx-auto lg:ml-auto animate-slide-in-right">
            {/* Improved 3D effect background with subtle gradient */}
            <div className="absolute inset-0 -m-4 rounded-3xl bg-gradient-to-tr from-primary/5 via-transparent to-accent/5 blur-lg animate-pulse-slow">
              <div className="absolute inset-0 rounded-3xl bg-background/40 backdrop-blur-sm" />
            </div>

            {/* Main content card with improved aesthetics */}
            <div className="relative rounded-2xl overflow-hidden border shadow-lg glass-card max-w-[550px] mx-auto transform-gpu">
              {/* Mockup screen showing the application UI */}
              <div className="relative aspect-[4/3] transform-gpu">
                <div className="absolute inset-0 bg-gradient-to-b from-gray-900/30 via-transparent to-gray-900/30 z-10"></div>
                <Image
                  src="/hero-image.svg"
                  fill
                  alt="RECOVR AI Lost and Found System"
                  className="object-cover transform transition-transform duration-500 hover:scale-102"
                />
              
                {/* Floating elements that suggest AI functionality */}
                <div className="absolute top-6 right-6 h-16 w-24 rounded-lg glass-card p-2 shadow-md animate-float" style={{animationDelay: "0.5s"}}>
                  <div className="flex items-center gap-2">
                    <div className="flex h-6 w-6 items-center justify-center rounded-full bg-green-100">
                      <Shield className="h-3 w-3 text-green-600" />
                    </div>
                    <div>
                      <h4 className="text-xs font-medium text-gray-600">Recovery</h4>
                      <p className="text-sm font-bold text-gray-900">96.3%</p>
                    </div>
                  </div>
                </div>
                
                {/* AI recognition visualization */}
                <div className="absolute top-1/4 left-1/4 w-1/2 h-1/2 border-2 border-dashed border-white/30 rounded-lg flex items-center justify-center animate-pulse-slow">
                  <div className="h-10 w-10 rounded-full border-2 border-white/50 flex items-center justify-center">
                    <Wand2 className="h-5 w-5 text-white" />
                  </div>
                </div>
                
                <div className="absolute bottom-6 left-6 right-6 rounded-xl bg-background/80 backdrop-blur-md p-3 border shadow-lg">
                  <div className="flex items-center gap-3">
                    <div className="flex h-10 w-10 items-center justify-center rounded-full bg-gradient-to-br from-primary to-accent text-primary-foreground">
                      <Globe className="h-5 w-5" />
                    </div>
                    <div>
                      <h3 className="text-sm font-semibold">RECOVR Network</h3>
                      <p className="text-xs text-muted-foreground">
                        Fast, accurate item recognition and matching
                      </p>
                    </div>
                  </div>
                </div>
              </div>

              {/* Feature highlights below the image */}
              <div className="px-6 py-5 bg-background">
                <div className="flex justify-between items-center">
                  <div className="space-y-1">
                    <h3 className="text-sm font-medium">Match confidence</h3>
                    <div className="flex gap-1">
                      <div className="h-1 bg-primary rounded-full w-16"></div>
                      <div className="h-1 bg-primary/70 rounded-full w-6"></div>
                      <div className="h-1 bg-primary/40 rounded-full w-4"></div>
                      <div className="h-1 bg-primary/20 rounded-full w-3"></div>
                    </div>
                  </div>
                  <Button variant="outline" size="sm" className="text-xs px-3 h-8">
                    View Details
                    <ArrowRight className="ml-1 h-3 w-3" />
                  </Button>
                </div>
              </div>
            </div>
          </div>
        </div>

      </div>
      
      {/* Stylized scroll indicator with subtle bounce */}
      <div className="absolute bottom-5 left-1/2 transform -translate-x-1/2 animate-bounce hidden lg:block">
        <div className="w-10 h-16 flex flex-col items-center justify-center relative">
          <div className="w-px h-8 bg-gradient-to-b from-transparent to-muted-foreground/40 absolute top-0"></div>
          <div className="rounded-full border border-muted-foreground/40 h-6 w-6 flex items-center justify-center mt-7">
            <ChevronDown className="h-3 w-3 text-muted-foreground/70" />
          </div>
        </div>
      </div>
    </section>
  )
} 


===== FILE: ./components/how-it-works.tsx =====
"use client"

import { Camera, Search, Bell, ThumbsUp } from "lucide-react"
import Image from "next/image"

const steps = [
  {
    icon: <Camera className="h-6 w-6" />,
    title: "Report Your Lost Item",
    description: "Fill out a simple form with details about your lost item and upload a photo if available.",
    image: "/placeholder.svg",
  },
  {
    icon: <Search className="h-6 w-6" />,
    title: "AI-Powered Matching",
    description: "Our system uses advanced image recognition to match your lost item with found objects.",
    image: "/placeholder.svg",
  },
  {
    icon: <Bell className="h-6 w-6" />,
    title: "Get Notified",
    description: "Receive notifications when potential matches are found for your lost item.",
    image: "/placeholder.svg",
  },
  {
    icon: <ThumbsUp className="h-6 w-6" />,
    title: "Recover Your Item",
    description: "Connect with the finder and retrieve your lost item safely.",
    image: "/placeholder.svg",
  },
]

export function HowItWorks() {
  return (
    <section className="py-20 md:py-24 lg:py-28 overflow-hidden w-full">
      <div className="px-4 sm:px-6 lg:px-8 max-w-[1800px] mx-auto">
        <div className="flex flex-col items-center justify-center space-y-5 text-center md:max-w-3xl md:mx-auto mb-16">
          <div className="inline-flex items-center rounded-full border bg-background/50 px-3 py-1 text-sm font-semibold">
            <span className="text-primary">Simple Process</span>
          </div>
          <h2 className="text-3xl font-bold tracking-tighter sm:text-4xl md:text-5xl">How It Works</h2>
          <p className="max-w-[700px] text-muted-foreground text-base md:text-lg/relaxed">
            Our system makes finding lost items simple and efficient with a streamlined four-step process.
          </p>
        </div>
        
        <div className="relative">
          {/* Connection line */}
          <div className="absolute left-1/2 top-24 h-[calc(100%-6rem)] w-px -translate-x-1/2 bg-border md:block hidden"></div>
          
          <div className="space-y-20 md:space-y-28">
            {steps.map((step, index) => (
              <div 
                key={index} 
                className={`relative grid gap-10 md:grid-cols-2 md:gap-16 items-center ${
                  index % 2 === 1 ? "md:grid-flow-col-dense" : ""
                }`}
              >
                <div className={`flex flex-col space-y-4 ${index % 2 === 1 ? "md:items-end md:text-right" : ""}`}>
                  <div className="relative z-10 flex h-12 w-12 items-center justify-center rounded-full bg-primary text-primary-foreground shadow-md">
                    {step.icon}
                    <span className="absolute -right-2 -top-2 flex h-6 w-6 items-center justify-center rounded-full bg-background text-xs font-bold shadow">
                      {index + 1}
                    </span>
                  </div>
                  <h3 className="text-2xl font-bold">{step.title}</h3>
                  <p className="max-w-md text-muted-foreground">{step.description}</p>
                </div>
                
                <div className={`group relative overflow-hidden rounded-xl border bg-background p-1 shadow-lg transition-all hover:shadow-xl ${
                  index % 2 === 1 ? "md:order-first" : ""
                }`}>
                  <div className="absolute inset-0 bg-gradient-to-br from-primary/5 via-transparent to-accent/5"></div>
                  <Image
                    src={step.image}
                    alt={step.title}
                    width={600}
                    height={400}
                    className="w-full h-auto rounded-lg object-cover transition-transform duration-500 group-hover:scale-105"
                  />
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </section>
  )
} 


===== FILE: ./components/loading-indicator.tsx =====
"use client"

import { useState, useEffect } from "react"
import { usePathname, useSearchParams } from "next/navigation"

export function LoadingIndicator() {
  const [loading, setLoading] = useState(false)
  const pathname = usePathname()
  const searchParams = useSearchParams()

  useEffect(() => {
    const handleStart = () => {
      setLoading(true)
    }

    const handleComplete = () => {
      setTimeout(() => setLoading(false), 300)
    }
    
    // Create custom events for route change monitoring
    window.addEventListener("routeChangeStart", handleStart)
    window.addEventListener("routeChangeComplete", handleComplete)
    window.addEventListener("routeChangeError", handleComplete)

    // Next.js App Router doesn't expose route change events directly,
    // so we'll use a custom approach to detect navigation
    return () => {
      window.removeEventListener("routeChangeStart", handleStart)
      window.removeEventListener("routeChangeComplete", handleComplete)
      window.removeEventListener("routeChangeError", handleComplete)
    }
  }, [])
  
  // Reset loading state when path or search params change
  useEffect(() => {
    setLoading(false)
  }, [pathname, searchParams])
  
  // Listen for click events on links to preemptively show loading
  useEffect(() => {
    const handleLinkClick = (e: MouseEvent) => {
      const target = e.target as Element
      const link = target.closest('a')
      if (link && link.href && link.href.startsWith(window.location.origin)) {
        setLoading(true)
        // Dispatch custom event for route change start
        window.dispatchEvent(new Event("routeChangeStart"))
      }
    }
    
    document.addEventListener('click', handleLinkClick)
    return () => document.removeEventListener('click', handleLinkClick)
  }, [])

  if (!loading) return null

  return (
    <div className="fixed top-0 left-0 right-0 h-1 z-50 animate-loadingBar"></div>
  )
} 


===== FILE: ./components/map-viewer.tsx =====
"use client"

import { useState, useEffect } from 'react'
import dynamic from 'next/dynamic'

// Object type that matches our map data
interface MapObject {
  id: number
  name: string
  location: string
  date: string
  image: string
  category: string
  coordinates: {
    lat: number
    lng: number
    x?: number
    y?: number
  }
}

// Dynamically import the Map component to avoid SSR issues
const MapWithNoSSRComponent = dynamic(
  () => import('./map-with-no-ssr'),
  { 
    ssr: false,
    loading: () => (
      <div className="w-full h-[600px] flex items-center justify-center bg-muted">
        <p>Loading map resources...</p>
      </div>
    )
  }
)

// This component will only be rendered on the client side
const MapViewer = ({ objects }: { objects: MapObject[] }) => {
  // No need for state to manage keys, as we've fixed the underlying issue
  return (
    <div className="w-full h-full">
      <MapWithNoSSRComponent objects={objects} />
    </div>
  )
}

export default MapViewer 


===== FILE: ./components/map-with-no-ssr.tsx =====
"use client"

import React, { useEffect, useRef, useState } from 'react'
import L from 'leaflet'
import 'leaflet/dist/leaflet.css'
import { Button } from '@/components/ui/button'

// Fix the default icon issue
delete (L.Icon.Default.prototype as any)._getIconUrl
L.Icon.Default.mergeOptions({
  iconUrl: '/marker-icon.png',
  iconRetinaUrl: '/marker-icon-2x.png',
  shadowUrl: '/marker-shadow.png',
})

// Object type that matches our map data
interface MapObject {
  id: number
  name: string
  location: string
  date: string
  image: string
  category: string
  coordinates: {
    lat: number
    lng: number
    x?: number
    y?: number
  }
}

export interface MapWithNoSSRProps {
  objects: MapObject[]
}

const MapWithNoSSR = ({ objects }: MapWithNoSSRProps) => {
  const mapRef = useRef<L.Map | null>(null);
  const mapContainerRef = useRef<HTMLDivElement>(null);
  const [mapId] = useState(() => `map-${Math.random().toString(36).substring(2, 9)}`);
  const [isMapInitialized, setIsMapInitialized] = useState(false);

  // Initialize map once component is mounted
  useEffect(() => {
    // Safety check - if already initialized, clean up first
    if (mapRef.current) {
      mapRef.current.remove();
      mapRef.current = null;
      setIsMapInitialized(false);
    }

    // Only initialize if the container is available
    if (!mapContainerRef.current || isMapInitialized) return;

    try {
      // Create the map instance
      const map = L.map(mapContainerRef.current, {
        center: [40.7128, -74.006],
        zoom: 15,
        scrollWheelZoom: false
      });

      // Add the tile layer
      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
      }).addTo(map);

      // Add markers
      objects.forEach((obj) => {
        const marker = L.marker([obj.coordinates.lat, obj.coordinates.lng])
          .addTo(map)
          .bindPopup(`
            <div class="flex flex-col items-center">
              <img 
                src="${obj.image}" 
                alt="${obj.name}"
                class="w-16 h-16 object-cover my-2 rounded" 
              />
              <h4 class="font-medium">${obj.name}</h4>
              <div class="text-xs text-muted-foreground">${obj.location}</div>
              <div class="text-xs text-muted-foreground">${obj.date}</div>
              <button class="mt-2 px-2 py-1 bg-blue-600 text-white text-xs rounded">View Details</button>
            </div>
          `);
      });

      // Save the map instance to ref
      mapRef.current = map;
      setIsMapInitialized(true);
    } catch (error) {
      console.error("Error initializing map:", error);
    }

    // Clean up on unmount
    return () => {
      if (mapRef.current) {
        mapRef.current.remove();
        mapRef.current = null;
        setIsMapInitialized(false);
      }
    };
  }, [objects, mapId]);

  return (
    <div className="w-full h-full">
      <div 
        id={mapId}
        ref={mapContainerRef} 
        className="h-[600px] w-full" 
        style={{ height: "600px", width: "100%" }}
      />
    </div>
  );
}

export default MapWithNoSSR 


===== FILE: ./components/navbar.tsx =====
"use client"

import Link from "next/link"
import Image from "next/image"
import { Button } from "@/components/ui/button"
import { GradientButton } from "@/components/ui/gradient-button"
import { Sheet, SheetContent, SheetTrigger } from "@/components/ui/sheet"
import { Menu, Search, MapPin } from "lucide-react"
import { ThemeToggle } from "@/components/theme-toggle"
import { cn } from "@/lib/utils"
import { usePathname } from "next/navigation"
import { NotificationDropdown } from "@/components/ui/notification-dropdown"

const mainNavItems = [
  { title: "Home", href: "/" },
  { title: "Lost Items", href: "/lost-objects" },
  { title: "Report Item", href: "/report" },
  { title: "Find Item", href: "/search", className: "dark:text-white dark:font-bold dark:hover:text-primary-300" },
  { title: "Map", href: "/map" },
]

export function MainNav() {
  const pathname = usePathname()

  return (
    <div className="mr-4 hidden md:flex">
      <nav className="flex items-center gap-8 text-base">
        {mainNavItems.map((item, index) => (
          <Link
            key={index}
            href={item.href}
            className={cn(
              "transition-colors hover:text-primary py-2 relative group dark:hover:text-primary link-hover",
              pathname === item.href 
                ? "text-primary font-medium active-nav-item" 
                : "text-muted-foreground dark:text-gray-300",
              item.className
            )}
          >
            {item.title}
            <span className={cn(
              "absolute bottom-0 left-0 w-full h-0.5 bg-primary transform origin-left transition-transform duration-300", 
              pathname === item.href ? "scale-x-100" : "scale-x-0 group-hover:scale-x-100"
            )}></span>
          </Link>
        ))}
      </nav>
    </div>
  )
}

export function MobileNav() {
  const pathname = usePathname()

  return (
    <Sheet>
      <SheetTrigger asChild>
        <Button variant="ghost" className="px-2 md:hidden dark:text-gray-300">
          <Menu className="h-6 w-6" />
          <span className="sr-only">Toggle menu</span>
        </Button>
      </SheetTrigger>
      <SheetContent side="left" className="pr-0 sm:max-w-xs bg-background/95 backdrop-blur-xl">
        <Link href="/" className="flex items-center gap-2 px-2 mb-8">
          <Image src="/logo.svg" width={140} height={50} alt="RECOVR Logo" className="dark:filter dark:brightness-110" />
        </Link>
        <div className="my-6 flex flex-col gap-2">
          {mainNavItems.map((item, index) => (
            <Link
              key={index}
              href={item.href}
              className={cn(
                "flex w-full items-center py-3 px-4 text-base font-medium transition-all rounded-md link-hover",
                pathname === item.href
                  ? "font-medium text-primary bg-primary/5 active-nav-item"
                  : "text-muted-foreground hover:bg-muted dark:text-gray-200 dark:hover:text-primary",
                item.className
              )}
            >
              {item.title}
            </Link>
          ))}
        </div>
        <div className="mt-auto pt-4 border-t space-y-4 px-2">
          <Button className="w-full hover:text-white dark:text-gray-300 dark:hover:text-white" variant="outline" asChild>
            <Link href="/auth/signin">Log in</Link>
          </Button>
          <GradientButton variant="dark" className="w-full" asChild>
            <Link href="/auth/register">Sign up</Link>
          </GradientButton>
        </div>
      </SheetContent>
    </Sheet>
  )
}

export function Navbar({ className }: { className?: string }) {
  return (
    <header className={cn("sticky top-0 z-40 w-full border-b bg-background/95 backdrop-blur-xl supports-[backdrop-filter]:bg-background/60", className)}>
      <div className="max-w-[1800px] mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex h-20 items-center justify-between">
          <div className="flex items-center">
            <MobileNav />
            <Link href="/" className="flex items-center gap-2 mr-10 relative group">
              <div className="absolute -inset-2 rounded-xl bg-background opacity-0 group-hover:opacity-100 transition-opacity"></div>
              <Image 
                src="/logo.svg" 
                width={140} 
                height={50} 
                alt="RECOVR Logo" 
                priority 
                className="h-10 w-auto relative dark:filter dark:brightness-110" 
              />
            </Link>
            <MainNav />
          </div>
          <div className="flex items-center gap-3">
            <Button variant="ghost" size="icon" className="text-muted-foreground hidden sm:flex hover:bg-muted dark:text-gray-300 dark:hover:bg-gray-800">
              <Search className="h-5 w-5" />
              <span className="sr-only">Search</span>
            </Button>
            <Button variant="ghost" size="icon" className="text-muted-foreground hidden sm:flex hover:bg-muted dark:text-gray-300 dark:hover:bg-gray-800">
              <MapPin className="h-5 w-5" />
              <span className="sr-only">Map</span>
            </Button>
            <NotificationDropdown className="mr-2 hidden sm:flex" />
            <ThemeToggle />
            <div className="hidden md:flex md:gap-3 ml-2">
              <Button variant="outline" size="sm" className="h-10 px-4 hover:text-white dark:text-gray-300" asChild>
                <Link href="/auth/signin">Log in</Link>
              </Button>
              <GradientButton variant="dark" size="sm" className="h-10 px-4" asChild>
                <Link href="/auth/register">Sign up</Link>
              </GradientButton>
            </div>
          </div>
        </div>
      </div>
    </header>
  )
} 


===== FILE: ./components/page-container.tsx =====
import React from "react"
import { cn } from "@/lib/utils"

interface PageContainerProps {
  children: React.ReactNode
  className?: string
  maxWidth?: "sm" | "md" | "lg" | "xl" | "2xl" | "none"
}

/**
 * Consistent page container for all application pages
 * Ensures consistent centering, width and padding
 */
export function PageContainer({
  children,
  className,
  maxWidth = "none",
}: PageContainerProps) {
  
  const maxWidthClass = {
    sm: "max-w-screen-sm",
    md: "max-w-screen-md",
    lg: "max-w-screen-lg",
    xl: "max-w-screen-xl",
    "2xl": "max-w-screen-2xl",
    "none": "max-w-[1800px]", // Same as layout default
  }[maxWidth]
  
  return (
    <div className={cn(
      "w-full mx-auto px-4 sm:px-6 lg:px-8 py-6",
      maxWidthClass,
      className
    )}>
      {children}
    </div>
  )
} 


===== FILE: ./components/page-transition.tsx =====
"use client"

import { usePathname } from 'next/navigation'
import { useEffect, useState, ReactNode } from 'react'

interface PageTransitionProps {
  children: ReactNode
}

export function PageTransition({ children }: PageTransitionProps) {
  const pathname = usePathname()
  const [isTransitioning, setIsTransitioning] = useState(false)
  const [displayChildren, setDisplayChildren] = useState(children)
  
  useEffect(() => {
    // Only trigger transition when path changes
    if (pathname) {
      setIsTransitioning(true)
      
      // IMPORTANT: Must wait for new page content to be ready BEFORE transitioning
      // This helps prevent layout shifts and flickering
      const timer = setTimeout(() => {
        setDisplayChildren(children)
        
        // Small delay after children are updated to allow render to complete
        requestAnimationFrame(() => {
          requestAnimationFrame(() => {
            setIsTransitioning(false)
          })
        })
      }, 10)
      
      return () => clearTimeout(timer)
    }
  }, [pathname, children])
  
  return (
    <div
      className={`page-transition w-full transform-gpu ${isTransitioning ? 'opacity-0' : 'opacity-100'}`}
      style={{
        transition: isTransitioning ? 'none' : 'opacity 0.3s ease-in-out',
      }}
    >
      {displayChildren}
    </div>
  )
} 


===== FILE: ./components/scroll-animations.tsx =====
"use client"

import { useEffect, useRef, ReactNode } from 'react'

type AnimationType = 'fade-in' | 'slide-up' | 'slide-left' | 'slide-right' | 'zoom-in' | 'bounce'

interface ScrollRevealProps {
  children: ReactNode
  animation?: AnimationType
  delay?: number
  threshold?: number
  className?: string
  once?: boolean
}

export function ScrollReveal({
  children,
  animation = 'fade-in',
  delay = 0,
  threshold = 0.1,
  className = '',
  once = true,
}: ScrollRevealProps) {
  const ref = useRef<HTMLDivElement>(null)
  const enteredRef = useRef(false)

  useEffect(() => {
    const currentRef = ref.current
    if (!currentRef) return

    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            if (once && enteredRef.current) return
            
            enteredRef.current = true
            setTimeout(() => {
              currentRef.classList.add('visible')
            }, delay)
            
            if (once) observer.unobserve(currentRef)
          } else if (!once) {
            enteredRef.current = false
            currentRef.classList.remove('visible')
          }
        })
      },
      { threshold }
    )

    observer.observe(currentRef)

    return () => {
      if (currentRef) observer.unobserve(currentRef)
    }
  }, [delay, threshold, once])

  const getAnimationClass = () => {
    switch (animation) {
      case 'fade-in': return 'scroll-fade-in'
      case 'slide-up': return 'scroll-slide-up'
      case 'slide-left': return 'scroll-slide-left'
      case 'slide-right': return 'scroll-slide-right'
      case 'zoom-in': return 'scroll-zoom-in'
      case 'bounce': return 'scroll-bounce'
      default: return 'scroll-fade-in'
    }
  }

  return (
    <div 
      ref={ref} 
      className={`${getAnimationClass()} ${className}`}
      style={{ 
        opacity: 0,
        transition: `transform 0.8s ease, opacity 0.8s ease`,
        transitionDelay: `${delay}ms`,
        willChange: 'transform, opacity'
      }}
    >
      {children}
    </div>
  )
}

export function ParallaxSection({ 
  children,
  speed = 0.2,
  className = ''
}: { 
  children: ReactNode
  speed?: number
  className?: string
}) {
  const ref = useRef<HTMLDivElement>(null)
  
  useEffect(() => {
    const handleScroll = () => {
      if (!ref.current) return
      
      const scrollY = window.scrollY
      const elementTop = ref.current.offsetTop
      const viewport = window.innerHeight
      
      // Only apply parallax when element is visible
      if (scrollY + viewport > elementTop && scrollY < elementTop + ref.current.offsetHeight) {
        const offset = (scrollY - elementTop) * speed
        ref.current.style.transform = `translateY(${offset}px)`
      }
    }
    
    window.addEventListener('scroll', handleScroll, { passive: true })
    return () => window.removeEventListener('scroll', handleScroll)
  }, [speed])
  
  return (
    <div ref={ref} className={className}>
      {children}
    </div>
  )
}

// Smooth scrolling utility
export function enableSmoothScroll() {
  useEffect(() => {
    // Add smooth scrolling to all links
    const handleLinkClick = (e: MouseEvent) => {
      const target = e.target as HTMLElement
      const link = target.closest('a')
      
      if (!link) return
      const href = link.getAttribute('href')
      
      if (href?.startsWith('#') && href.length > 1) {
        e.preventDefault()
        const targetElement = document.querySelector(href)
        
        if (targetElement) {
          targetElement.scrollIntoView({
            behavior: 'smooth',
            block: 'start'
          })
        }
      }
    }
    
    document.addEventListener('click', handleLinkClick)
    return () => document.removeEventListener('click', handleLinkClick)
  }, [])
  
  return null
} 


===== FILE: ./components/scroll-performance.tsx =====
"use client"

import { useEffect } from 'react'

export function ScrollPerformanceOptimizer() {
  useEffect(() => {
    // Add a class to body during scroll to optimize rendering
    let scrollTimeout: NodeJS.Timeout
    const scrollHandler = () => {
      document.body.classList.add('is-scrolling')
      
      clearTimeout(scrollTimeout)
      scrollTimeout = setTimeout(() => {
        document.body.classList.remove('is-scrolling')
      }, 100)
    }
    
    // Using passive event listener for better scroll performance
    window.addEventListener('scroll', scrollHandler, { passive: true })
    
    // Other browser optimizations
    if ('requestIdleCallback' in window) {
      // Force browsers to use compositor-only animations
      window.requestIdleCallback(() => {
        const allAnimatedElements = document.querySelectorAll('.animate-fade-in, .animate-slide-up, .animate-slide-in-right, .animate-slide-in-left')
        allAnimatedElements.forEach(el => {
          if (el instanceof HTMLElement) {
            el.style.willChange = 'transform, opacity'
            el.style.transform = 'translateZ(0)'
          }
        })
      })
    }
    
    // Clean up
    return () => {
      window.removeEventListener('scroll', scrollHandler)
      clearTimeout(scrollTimeout)
    }
  }, [])
  
  return null
} 


===== FILE: ./components/session-provider.tsx =====
"use client"

import { SessionProvider as NextAuthSessionProvider } from "next-auth/react"
import type { Session } from "next-auth"
import React from "react"

export function SessionProvider({ 
  children,
  session
}: { 
  children: React.ReactNode,
  session?: Session | null
}) {
  return <NextAuthSessionProvider session={session}>{children}</NextAuthSessionProvider>
} 


===== FILE: ./components/stats.tsx =====
import { Users, Map, Search, ThumbsUp } from "lucide-react"

const stats = [
  {
    icon: <Users className="h-5 w-5" />,
    value: "10K+",
    label: "Active Users",
  },
  {
    icon: <Map className="h-5 w-5" />,
    value: "250+",
    label: "Locations",
  },
  {
    icon: <Search className="h-5 w-5" />,
    value: "15K+",
    label: "Items Found",
  },
  {
    icon: <ThumbsUp className="h-5 w-5" />,
    value: "95%",
    label: "Success Rate",
  },
]

export function Stats() {
  return (
    <section className="border-y py-12 bg-muted/20">
      <div className="container">
        <div className="grid grid-cols-2 gap-8 md:grid-cols-4">
          {stats.map((stat, index) => (
            <div
              key={index}
              className="flex flex-col items-center justify-center text-center"
            >
              <div className="mb-4 flex h-14 w-14 items-center justify-center rounded-full bg-primary/10">
                <div className="text-primary">{stat.icon}</div>
              </div>
              <h3 className="text-3xl font-bold">{stat.value}</h3>
              <p className="text-sm text-muted-foreground">{stat.label}</p>
            </div>
          ))}
        </div>
      </div>
    </section>
  )
} 


===== FILE: ./components/testimonials.tsx =====
"use client"

import Image from "next/image"
import { cn } from "@/lib/utils"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"

const testimonials = [
  {
    content: "I lost my laptop in the campus library and was devastated. The RECOVR system helped me locate it within hours! The image matching technology is incredibly accurate.",
    author: { name: "Alex Johnson", role: "Student", avatarSrc: "/user-1.jpg" }
  },
  {
    content: "Lost my phone at a conference. I reported it on RECOVR and within a day, someone had found it and uploaded it to the system. The notification feature is fantastic!",
    author: { name: "Sarah Chen", role: "Software Engineer", avatarSrc: "/user-2.jpg" }
  },
  {
    content: "As someone who's constantly traveling for work, I'm prone to losing things. RECOVR has saved me multiple times by helping me recover my items quickly and efficiently.",
    author: { name: "Michael Rodriguez", role: "Business Consultant", avatarSrc: "/user-3.jpg" }
  },
  {
    content: "I use RECOVR to manage lost items in my classroom. The system is so intuitive that even my students can use it to report and find their lost belongings.",
    author: { name: "Emily Watson", role: "Teacher", avatarSrc: "/user-4.jpg" }
  }
]

export function Testimonials() {
  return (
    <section className="py-20 md:py-24 lg:py-28 bg-gradient-to-b from-background to-muted/25">
      <div className="container">
        <div className="flex flex-col items-center justify-center space-y-4 text-center md:mx-auto md:max-w-3xl">
          <div className="inline-flex items-center rounded-full border bg-background/50 px-3 py-1 text-sm font-semibold">
            <span className="text-primary">User Experiences</span>
          </div>
          <h2 className="text-3xl font-bold tracking-tighter sm:text-4xl md:text-5xl">What Our Users Say</h2>
          <p className="max-w-[700px] text-muted-foreground md:text-lg/relaxed">
            Thousands of people have successfully recovered their lost items using our system. Here are some of their stories.
          </p>
        </div>

        <div className="mx-auto grid max-w-6xl gap-6 py-14 md:grid-cols-2 lg:grid-cols-2">
          {testimonials.map((testimonial, index) => (
            <div 
              key={index} 
              className={cn(
                "relative flex flex-col gap-4 rounded-xl border bg-background p-6 shadow transition-shadow hover:shadow-md",
                index === 0 ? "md:col-span-2 lg:col-span-1 lg:row-span-2" : ""
              )}
            >
              <div className="flex items-center gap-4">
                <div className="h-12 w-12 overflow-hidden rounded-full">
                  <Image
                    src={testimonial.author.avatarSrc}
                    alt={testimonial.author.name}
                    width={48}
                    height={48}
                    className="h-full w-full object-cover"
                    onError={(e) => {
                      e.currentTarget.src = "/placeholder-user.jpg";
                    }}
                  />
                </div>
                <div>
                  <h4 className="font-semibold">{testimonial.author.name}</h4>
                  <p className="text-sm text-muted-foreground">{testimonial.author.role}</p>
                </div>
              </div>
              <blockquote className="text-pretty text-muted-foreground">
                "{testimonial.content}"
              </blockquote>
              <div className="flex text-primary">
                {[1, 2, 3, 4, 5].map((star) => (
                  <svg
                    key={star}
                    className="h-4 w-4 fill-current"
                    xmlns="http://www.w3.org/2000/svg"
                    viewBox="0 0 24 24"
                  >
                    <path d="M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z" />
                  </svg>
                ))}
              </div>
            </div>
          ))}
        </div>
      </div>
    </section>
  )
} 


===== FILE: ./components/theme-provider.tsx =====
"use client"

import { ThemeProvider as NextThemesProvider } from "next-themes"
import { type ThemeProviderProps } from "next-themes"

export function ThemeProvider({ children, ...props }: ThemeProviderProps) {
  return <NextThemesProvider {...props}>{children}</NextThemesProvider>
}



===== FILE: ./components/theme-toggle.tsx =====
"use client"

import * as React from "react"
import { Moon, Sun } from "lucide-react"
import { useTheme } from "next-themes"

import { Button } from "@/components/ui/button"
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"

export function ThemeToggle() {
  const { setTheme, theme } = useTheme()

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="ghost" size="icon">
          <Sun className="h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0" />
          <Moon className="absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100" />
          <span className="sr-only">Toggle theme</span>
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end">
        <DropdownMenuItem onClick={() => setTheme("light")}>
          Light
        </DropdownMenuItem>
        <DropdownMenuItem onClick={() => setTheme("dark")}>
          Dark
        </DropdownMenuItem>
        <DropdownMenuItem onClick={() => setTheme("system")}>
          System
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  )
} 


===== FILE: ./components/ui/accordion.tsx =====
"use client"

import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
))

AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }



===== FILE: ./components/ui/alert-dialog.tsx =====
"use client"

import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}



===== FILE: ./components/ui/alert.tsx =====
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }



===== FILE: ./components/ui/aspect-ratio.tsx =====
"use client"

import * as AspectRatioPrimitive from "@radix-ui/react-aspect-ratio"

const AspectRatio = AspectRatioPrimitive.Root

export { AspectRatio }



===== FILE: ./components/ui/avatar.tsx =====
"use client"

import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }



===== FILE: ./components/ui/badge.tsx =====
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }



===== FILE: ./components/ui/breadcrumb.tsx =====
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"

const Breadcrumb = React.forwardRef<
  HTMLElement,
  React.ComponentPropsWithoutRef<"nav"> & {
    separator?: React.ReactNode
  }
>(({ ...props }, ref) => <nav ref={ref} aria-label="breadcrumb" {...props} />)
Breadcrumb.displayName = "Breadcrumb"

const BreadcrumbList = React.forwardRef<
  HTMLOListElement,
  React.ComponentPropsWithoutRef<"ol">
>(({ className, ...props }, ref) => (
  <ol
    ref={ref}
    className={cn(
      "flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5",
      className
    )}
    {...props}
  />
))
BreadcrumbList.displayName = "BreadcrumbList"

const BreadcrumbItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentPropsWithoutRef<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    className={cn("inline-flex items-center gap-1.5", className)}
    {...props}
  />
))
BreadcrumbItem.displayName = "BreadcrumbItem"

const BreadcrumbLink = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentPropsWithoutRef<"a"> & {
    asChild?: boolean
  }
>(({ asChild, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      className={cn("transition-colors hover:text-foreground", className)}
      {...props}
    />
  )
})
BreadcrumbLink.displayName = "BreadcrumbLink"

const BreadcrumbPage = React.forwardRef<
  HTMLSpanElement,
  React.ComponentPropsWithoutRef<"span">
>(({ className, ...props }, ref) => (
  <span
    ref={ref}
    role="link"
    aria-disabled="true"
    aria-current="page"
    className={cn("font-normal text-foreground", className)}
    {...props}
  />
))
BreadcrumbPage.displayName = "BreadcrumbPage"

const BreadcrumbSeparator = ({
  children,
  className,
  ...props
}: React.ComponentProps<"li">) => (
  <li
    role="presentation"
    aria-hidden="true"
    className={cn("[&>svg]:w-3.5 [&>svg]:h-3.5", className)}
    {...props}
  >
    {children ?? <ChevronRight />}
  </li>
)
BreadcrumbSeparator.displayName = "BreadcrumbSeparator"

const BreadcrumbEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    role="presentation"
    aria-hidden="true"
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More</span>
  </span>
)
BreadcrumbEllipsis.displayName = "BreadcrumbElipssis"

export {
  Breadcrumb,
  BreadcrumbList,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbPage,
  BreadcrumbSeparator,
  BreadcrumbEllipsis,
}



===== FILE: ./components/ui/button.tsx =====
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }



===== FILE: ./components/ui/calendar.tsx =====
"use client"

import * as React from "react"
import { ChevronLeft, ChevronRight } from "lucide-react"
import { DayPicker } from "react-day-picker"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

export type CalendarProps = React.ComponentProps<typeof DayPicker>

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}: CalendarProps) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
        month: "space-y-4",
        caption: "flex justify-center pt-1 relative items-center",
        caption_label: "text-sm font-medium",
        nav: "space-x-1 flex items-center",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100"
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-y-1",
        head_row: "flex",
        head_cell:
          "text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: "h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20",
        day: cn(
          buttonVariants({ variant: "ghost" }),
          "h-9 w-9 p-0 font-normal aria-selected:opacity-100"
        ),
        day_range_end: "day-range-end",
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside:
          "day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle:
          "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: ({ ...props }) => <ChevronLeft className="h-4 w-4" />,
        IconRight: ({ ...props }) => <ChevronRight className="h-4 w-4" />,
      }}
      {...props}
    />
  )
}
Calendar.displayName = "Calendar"

export { Calendar }



===== FILE: ./components/ui/card.tsx =====
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }



===== FILE: ./components/ui/carousel.tsx =====
"use client"

import * as React from "react"
import useEmblaCarousel, {
  type UseEmblaCarouselType,
} from "embla-carousel-react"
import { ArrowLeft, ArrowRight } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"

type CarouselApi = UseEmblaCarouselType[1]
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>
type CarouselOptions = UseCarouselParameters[0]
type CarouselPlugin = UseCarouselParameters[1]

type CarouselProps = {
  opts?: CarouselOptions
  plugins?: CarouselPlugin
  orientation?: "horizontal" | "vertical"
  setApi?: (api: CarouselApi) => void
}

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0]
  api: ReturnType<typeof useEmblaCarousel>[1]
  scrollPrev: () => void
  scrollNext: () => void
  canScrollPrev: boolean
  canScrollNext: boolean
} & CarouselProps

const CarouselContext = React.createContext<CarouselContextProps | null>(null)

function useCarousel() {
  const context = React.useContext(CarouselContext)

  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />")
  }

  return context
}

const Carousel = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & CarouselProps
>(
  (
    {
      orientation = "horizontal",
      opts,
      setApi,
      plugins,
      className,
      children,
      ...props
    },
    ref
  ) => {
    const [carouselRef, api] = useEmblaCarousel(
      {
        ...opts,
        axis: orientation === "horizontal" ? "x" : "y",
      },
      plugins
    )
    const [canScrollPrev, setCanScrollPrev] = React.useState(false)
    const [canScrollNext, setCanScrollNext] = React.useState(false)

    const onSelect = React.useCallback((api: CarouselApi) => {
      if (!api) {
        return
      }

      setCanScrollPrev(api.canScrollPrev())
      setCanScrollNext(api.canScrollNext())
    }, [])

    const scrollPrev = React.useCallback(() => {
      api?.scrollPrev()
    }, [api])

    const scrollNext = React.useCallback(() => {
      api?.scrollNext()
    }, [api])

    const handleKeyDown = React.useCallback(
      (event: React.KeyboardEvent<HTMLDivElement>) => {
        if (event.key === "ArrowLeft") {
          event.preventDefault()
          scrollPrev()
        } else if (event.key === "ArrowRight") {
          event.preventDefault()
          scrollNext()
        }
      },
      [scrollPrev, scrollNext]
    )

    React.useEffect(() => {
      if (!api || !setApi) {
        return
      }

      setApi(api)
    }, [api, setApi])

    React.useEffect(() => {
      if (!api) {
        return
      }

      onSelect(api)
      api.on("reInit", onSelect)
      api.on("select", onSelect)

      return () => {
        api?.off("select", onSelect)
      }
    }, [api, onSelect])

    return (
      <CarouselContext.Provider
        value={{
          carouselRef,
          api: api,
          opts,
          orientation:
            orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
          scrollPrev,
          scrollNext,
          canScrollPrev,
          canScrollNext,
        }}
      >
        <div
          ref={ref}
          onKeyDownCapture={handleKeyDown}
          className={cn("relative", className)}
          role="region"
          aria-roledescription="carousel"
          {...props}
        >
          {children}
        </div>
      </CarouselContext.Provider>
    )
  }
)
Carousel.displayName = "Carousel"

const CarouselContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { carouselRef, orientation } = useCarousel()

  return (
    <div ref={carouselRef} className="overflow-hidden">
      <div
        ref={ref}
        className={cn(
          "flex",
          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
          className
        )}
        {...props}
      />
    </div>
  )
})
CarouselContent.displayName = "CarouselContent"

const CarouselItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { orientation } = useCarousel()

  return (
    <div
      ref={ref}
      role="group"
      aria-roledescription="slide"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className
      )}
      {...props}
    />
  )
})
CarouselItem.displayName = "CarouselItem"

const CarouselPrevious = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute  h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-left-12 top-1/2 -translate-y-1/2"
          : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeft className="h-4 w-4" />
      <span className="sr-only">Previous slide</span>
    </Button>
  )
})
CarouselPrevious.displayName = "CarouselPrevious"

const CarouselNext = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollNext, canScrollNext } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-right-12 top-1/2 -translate-y-1/2"
          : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRight className="h-4 w-4" />
      <span className="sr-only">Next slide</span>
    </Button>
  )
})
CarouselNext.displayName = "CarouselNext"

export {
  type CarouselApi,
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
}



===== FILE: ./components/ui/chart.tsx =====
"use client"

import * as React from "react"
import * as RechartsPrimitive from "recharts"

import { cn } from "@/lib/utils"

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = { light: "", dark: ".dark" } as const

export type ChartConfig = {
  [k in string]: {
    label?: React.ReactNode
    icon?: React.ComponentType
  } & (
    | { color?: string; theme?: never }
    | { color?: never; theme: Record<keyof typeof THEMES, string> }
  )
}

type ChartContextProps = {
  config: ChartConfig
}

const ChartContext = React.createContext<ChartContextProps | null>(null)

function useChart() {
  const context = React.useContext(ChartContext)

  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />")
  }

  return context
}

const ChartContainer = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    config: ChartConfig
    children: React.ComponentProps<
      typeof RechartsPrimitive.ResponsiveContainer
    >["children"]
  }
>(({ id, className, children, config, ...props }, ref) => {
  const uniqueId = React.useId()
  const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`

  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-chart={chartId}
        ref={ref}
        className={cn(
          "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
          className
        )}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>
          {children}
        </RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  )
})
ChartContainer.displayName = "Chart"

const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
  const colorConfig = Object.entries(config).filter(
    ([_, config]) => config.theme || config.color
  )

  if (!colorConfig.length) {
    return null
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color =
      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
      itemConfig.color
    return color ? `  --color-${key}: ${color};` : null
  })
  .join("\n")}
}
`
          )
          .join("\n"),
      }}
    />
  )
}

const ChartTooltip = RechartsPrimitive.Tooltip

const ChartTooltipContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &
    React.ComponentProps<"div"> & {
      hideLabel?: boolean
      hideIndicator?: boolean
      indicator?: "line" | "dot" | "dashed"
      nameKey?: string
      labelKey?: string
    }
>(
  (
    {
      active,
      payload,
      className,
      indicator = "dot",
      hideLabel = false,
      hideIndicator = false,
      label,
      labelFormatter,
      labelClassName,
      formatter,
      color,
      nameKey,
      labelKey,
    },
    ref
  ) => {
    const { config } = useChart()

    const tooltipLabel = React.useMemo(() => {
      if (hideLabel || !payload?.length) {
        return null
      }

      const [item] = payload
      const key = `${labelKey || item.dataKey || item.name || "value"}`
      const itemConfig = getPayloadConfigFromPayload(config, item, key)
      const value =
        !labelKey && typeof label === "string"
          ? config[label as keyof typeof config]?.label || label
          : itemConfig?.label

      if (labelFormatter) {
        return (
          <div className={cn("font-medium", labelClassName)}>
            {labelFormatter(value, payload)}
          </div>
        )
      }

      if (!value) {
        return null
      }

      return <div className={cn("font-medium", labelClassName)}>{value}</div>
    }, [
      label,
      labelFormatter,
      payload,
      hideLabel,
      labelClassName,
      config,
      labelKey,
    ])

    if (!active || !payload?.length) {
      return null
    }

    const nestLabel = payload.length === 1 && indicator !== "dot"

    return (
      <div
        ref={ref}
        className={cn(
          "grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl",
          className
        )}
      >
        {!nestLabel ? tooltipLabel : null}
        <div className="grid gap-1.5">
          {payload.map((item, index) => {
            const key = `${nameKey || item.name || item.dataKey || "value"}`
            const itemConfig = getPayloadConfigFromPayload(config, item, key)
            const indicatorColor = color || item.payload.fill || item.color

            return (
              <div
                key={item.dataKey}
                className={cn(
                  "flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground",
                  indicator === "dot" && "items-center"
                )}
              >
                {formatter && item?.value !== undefined && item.name ? (
                  formatter(item.value, item.name, item, index, item.payload)
                ) : (
                  <>
                    {itemConfig?.icon ? (
                      <itemConfig.icon />
                    ) : (
                      !hideIndicator && (
                        <div
                          className={cn(
                            "shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]",
                            {
                              "h-2.5 w-2.5": indicator === "dot",
                              "w-1": indicator === "line",
                              "w-0 border-[1.5px] border-dashed bg-transparent":
                                indicator === "dashed",
                              "my-0.5": nestLabel && indicator === "dashed",
                            }
                          )}
                          style={
                            {
                              "--color-bg": indicatorColor,
                              "--color-border": indicatorColor,
                            } as React.CSSProperties
                          }
                        />
                      )
                    )}
                    <div
                      className={cn(
                        "flex flex-1 justify-between leading-none",
                        nestLabel ? "items-end" : "items-center"
                      )}
                    >
                      <div className="grid gap-1.5">
                        {nestLabel ? tooltipLabel : null}
                        <span className="text-muted-foreground">
                          {itemConfig?.label || item.name}
                        </span>
                      </div>
                      {item.value && (
                        <span className="font-mono font-medium tabular-nums text-foreground">
                          {item.value.toLocaleString()}
                        </span>
                      )}
                    </div>
                  </>
                )}
              </div>
            )
          })}
        </div>
      </div>
    )
  }
)
ChartTooltipContent.displayName = "ChartTooltip"

const ChartLegend = RechartsPrimitive.Legend

const ChartLegendContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> &
    Pick<RechartsPrimitive.LegendProps, "payload" | "verticalAlign"> & {
      hideIcon?: boolean
      nameKey?: string
    }
>(
  (
    { className, hideIcon = false, payload, verticalAlign = "bottom", nameKey },
    ref
  ) => {
    const { config } = useChart()

    if (!payload?.length) {
      return null
    }

    return (
      <div
        ref={ref}
        className={cn(
          "flex items-center justify-center gap-4",
          verticalAlign === "top" ? "pb-3" : "pt-3",
          className
        )}
      >
        {payload.map((item) => {
          const key = `${nameKey || item.dataKey || "value"}`
          const itemConfig = getPayloadConfigFromPayload(config, item, key)

          return (
            <div
              key={item.value}
              className={cn(
                "flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground"
              )}
            >
              {itemConfig?.icon && !hideIcon ? (
                <itemConfig.icon />
              ) : (
                <div
                  className="h-2 w-2 shrink-0 rounded-[2px]"
                  style={{
                    backgroundColor: item.color,
                  }}
                />
              )}
              {itemConfig?.label}
            </div>
          )
        })}
      </div>
    )
  }
)
ChartLegendContent.displayName = "ChartLegend"

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(
  config: ChartConfig,
  payload: unknown,
  key: string
) {
  if (typeof payload !== "object" || payload === null) {
    return undefined
  }

  const payloadPayload =
    "payload" in payload &&
    typeof payload.payload === "object" &&
    payload.payload !== null
      ? payload.payload
      : undefined

  let configLabelKey: string = key

  if (
    key in payload &&
    typeof payload[key as keyof typeof payload] === "string"
  ) {
    configLabelKey = payload[key as keyof typeof payload] as string
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key as keyof typeof payloadPayload] === "string"
  ) {
    configLabelKey = payloadPayload[
      key as keyof typeof payloadPayload
    ] as string
  }

  return configLabelKey in config
    ? config[configLabelKey]
    : config[key as keyof typeof config]
}

export {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
  ChartStyle,
}



===== FILE: ./components/ui/checkbox.tsx =====
"use client"

import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "@/lib/utils"

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }



===== FILE: ./components/ui/collapsible.tsx =====
"use client"

import * as CollapsiblePrimitive from "@radix-ui/react-collapsible"

const Collapsible = CollapsiblePrimitive.Root

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent

export { Collapsible, CollapsibleTrigger, CollapsibleContent }



===== FILE: ./components/ui/command.tsx =====
"use client"

import * as React from "react"
import { type DialogProps } from "@radix-ui/react-dialog"
import { Command as CommandPrimitive } from "cmdk"
import { Search } from "lucide-react"

import { cn } from "@/lib/utils"
import { Dialog, DialogContent } from "@/components/ui/dialog"

const Command = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive>
>(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
      className
    )}
    {...props}
  />
))
Command.displayName = CommandPrimitive.displayName

const CommandDialog = ({ children, ...props }: DialogProps) => {
  return (
    <Dialog {...props}>
      <DialogContent className="overflow-hidden p-0 shadow-lg">
        <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  )
}

const CommandInput = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Input>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>
>(({ className, ...props }, ref) => (
  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    <Search className="mr-2 h-4 w-4 shrink-0 opacity-50" />
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        "flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    />
  </div>
))

CommandInput.displayName = CommandPrimitive.Input.displayName

const CommandList = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)}
    {...props}
  />
))

CommandList.displayName = CommandPrimitive.List.displayName

const CommandEmpty = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Empty>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>
>((props, ref) => (
  <CommandPrimitive.Empty
    ref={ref}
    className="py-6 text-center text-sm"
    {...props}
  />
))

CommandEmpty.displayName = CommandPrimitive.Empty.displayName

const CommandGroup = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Group>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
      className
    )}
    {...props}
  />
))

CommandGroup.displayName = CommandPrimitive.Group.displayName

const CommandSeparator = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 h-px bg-border", className)}
    {...props}
  />
))
CommandSeparator.displayName = CommandPrimitive.Separator.displayName

const CommandItem = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      className
    )}
    {...props}
  />
))

CommandItem.displayName = CommandPrimitive.Item.displayName

const CommandShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
CommandShortcut.displayName = "CommandShortcut"

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
}



===== FILE: ./components/ui/context-menu.tsx =====
"use client"

import * as React from "react"
import * as ContextMenuPrimitive from "@radix-ui/react-context-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const ContextMenu = ContextMenuPrimitive.Root

const ContextMenuTrigger = ContextMenuPrimitive.Trigger

const ContextMenuGroup = ContextMenuPrimitive.Group

const ContextMenuPortal = ContextMenuPrimitive.Portal

const ContextMenuSub = ContextMenuPrimitive.Sub

const ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup

const ContextMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <ContextMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </ContextMenuPrimitive.SubTrigger>
))
ContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName

const ContextMenuSubContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
ContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName

const ContextMenuContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Portal>
    <ContextMenuPrimitive.Content
      ref={ref}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </ContextMenuPrimitive.Portal>
))
ContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName

const ContextMenuItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName

const ContextMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <ContextMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.CheckboxItem>
))
ContextMenuCheckboxItem.displayName =
  ContextMenuPrimitive.CheckboxItem.displayName

const ContextMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <ContextMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.RadioItem>
))
ContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName

const ContextMenuLabel = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold text-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName

const ContextMenuSeparator = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-border", className)}
    {...props}
  />
))
ContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName

const ContextMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
ContextMenuShortcut.displayName = "ContextMenuShortcut"

export {
  ContextMenu,
  ContextMenuTrigger,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuCheckboxItem,
  ContextMenuRadioItem,
  ContextMenuLabel,
  ContextMenuSeparator,
  ContextMenuShortcut,
  ContextMenuGroup,
  ContextMenuPortal,
  ContextMenuSub,
  ContextMenuSubContent,
  ContextMenuSubTrigger,
  ContextMenuRadioGroup,
}



===== FILE: ./components/ui/dialog.tsx =====
"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}



===== FILE: ./components/ui/drawer.tsx =====
"use client"

import * as React from "react"
import { Drawer as DrawerPrimitive } from "vaul"

import { cn } from "@/lib/utils"

const Drawer = ({
  shouldScaleBackground = true,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (
  <DrawerPrimitive.Root
    shouldScaleBackground={shouldScaleBackground}
    {...props}
  />
)
Drawer.displayName = "Drawer"

const DrawerTrigger = DrawerPrimitive.Trigger

const DrawerPortal = DrawerPrimitive.Portal

const DrawerClose = DrawerPrimitive.Close

const DrawerOverlay = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Overlay
    ref={ref}
    className={cn("fixed inset-0 z-50 bg-black/80", className)}
    {...props}
  />
))
DrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName

const DrawerContent = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DrawerPortal>
    <DrawerOverlay />
    <DrawerPrimitive.Content
      ref={ref}
      className={cn(
        "fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background",
        className
      )}
      {...props}
    >
      <div className="mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted" />
      {children}
    </DrawerPrimitive.Content>
  </DrawerPortal>
))
DrawerContent.displayName = "DrawerContent"

const DrawerHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("grid gap-1.5 p-4 text-center sm:text-left", className)}
    {...props}
  />
)
DrawerHeader.displayName = "DrawerHeader"

const DrawerFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("mt-auto flex flex-col gap-2 p-4", className)}
    {...props}
  />
)
DrawerFooter.displayName = "DrawerFooter"

const DrawerTitle = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DrawerTitle.displayName = DrawerPrimitive.Title.displayName

const DrawerDescription = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DrawerDescription.displayName = DrawerPrimitive.Description.displayName

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
}



===== FILE: ./components/ui/dropdown-menu.tsx =====
"use client"

import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}



===== FILE: ./components/ui/form.tsx =====
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
  FormProvider,
  useFormContext,
} from "react-hook-form"

import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()

  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  )
})
FormItem.displayName = "FormItem"

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
})
FormLabel.displayName = "FormLabel"

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
})
FormControl.displayName = "FormControl"

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-sm text-muted-foreground", className)}
      {...props}
    />
  )
})
FormDescription.displayName = "FormDescription"

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message) : children

  if (!body) {
    return null
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-sm font-medium text-destructive", className)}
      {...props}
    >
      {body}
    </p>
  )
})
FormMessage.displayName = "FormMessage"

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}



===== FILE: ./components/ui/gradient-button.tsx =====
"use client"

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"
import { cn } from "@/lib/utils"

const gradientButtonVariants = cva(
  "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 relative overflow-hidden",
  {
    variants: {
      variant: {
        default: "bg-gradient-to-r from-primary to-accent text-white shadow-lg shadow-primary/20 hover:shadow-xl hover:shadow-primary/30",
        outline: "border-2 border-primary text-primary hover:text-white hover:border-transparent hover:bg-gradient-to-r hover:from-primary hover:to-accent",
        ghost: "text-primary hover:bg-gradient-to-r hover:from-primary/10 hover:to-accent/10 hover:text-primary",
        secondary: "bg-gradient-to-r from-secondary to-primary text-white shadow-lg shadow-secondary/20 hover:shadow-xl hover:shadow-secondary/30",
        subtle: "bg-gradient-to-r from-primary/10 to-accent/10 text-primary hover:bg-gradient-to-r hover:from-primary/20 hover:to-accent/20",
        dark: "bg-gradient-to-r from-gray-900 to-gray-800 text-white shadow-lg shadow-gray-900/30 hover:shadow-xl hover:shadow-black/20",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        xl: "h-14 rounded-lg px-10 text-base",
        icon: "h-10 w-10",
      },
      animation: {
        none: "",
        shimmer: "animate-shimmer relative overflow-hidden before:absolute before:inset-0 before:-translate-x-full before:animate-[shimmer_2s_infinite] before:bg-gradient-to-r before:from-transparent before:via-white/25 before:to-transparent",
      }
    },
    defaultVariants: {
      variant: "default",
      size: "default",
      animation: "none",
    },
  }
)

export interface GradientButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof gradientButtonVariants> {
  asChild?: boolean
}

const GradientButton = React.forwardRef<HTMLButtonElement, GradientButtonProps>(
  ({ className, variant, size, animation, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(gradientButtonVariants({ variant, size, animation, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
GradientButton.displayName = "GradientButton"

export { GradientButton, gradientButtonVariants } 


===== FILE: ./components/ui/hover-card.tsx =====
"use client"

import * as React from "react"
import * as HoverCardPrimitive from "@radix-ui/react-hover-card"

import { cn } from "@/lib/utils"

const HoverCard = HoverCardPrimitive.Root

const HoverCardTrigger = HoverCardPrimitive.Trigger

const HoverCardContent = React.forwardRef<
  React.ElementRef<typeof HoverCardPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <HoverCardPrimitive.Content
    ref={ref}
    align={align}
    sideOffset={sideOffset}
    className={cn(
      "z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
HoverCardContent.displayName = HoverCardPrimitive.Content.displayName

export { HoverCard, HoverCardTrigger, HoverCardContent }



===== FILE: ./components/ui/input-otp.tsx =====
"use client"

import * as React from "react"
import { OTPInput, OTPInputContext } from "input-otp"
import { Dot } from "lucide-react"

import { cn } from "@/lib/utils"

const InputOTP = React.forwardRef<
  React.ElementRef<typeof OTPInput>,
  React.ComponentPropsWithoutRef<typeof OTPInput>
>(({ className, containerClassName, ...props }, ref) => (
  <OTPInput
    ref={ref}
    containerClassName={cn(
      "flex items-center gap-2 has-[:disabled]:opacity-50",
      containerClassName
    )}
    className={cn("disabled:cursor-not-allowed", className)}
    {...props}
  />
))
InputOTP.displayName = "InputOTP"

const InputOTPGroup = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("flex items-center", className)} {...props} />
))
InputOTPGroup.displayName = "InputOTPGroup"

const InputOTPSlot = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div"> & { index: number }
>(({ index, className, ...props }, ref) => {
  const inputOTPContext = React.useContext(OTPInputContext)
  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]

  return (
    <div
      ref={ref}
      className={cn(
        "relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md",
        isActive && "z-10 ring-2 ring-ring ring-offset-background",
        className
      )}
      {...props}
    >
      {char}
      {hasFakeCaret && (
        <div className="pointer-events-none absolute inset-0 flex items-center justify-center">
          <div className="h-4 w-px animate-caret-blink bg-foreground duration-1000" />
        </div>
      )}
    </div>
  )
})
InputOTPSlot.displayName = "InputOTPSlot"

const InputOTPSeparator = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ ...props }, ref) => (
  <div ref={ref} role="separator" {...props}>
    <Dot />
  </div>
))
InputOTPSeparator.displayName = "InputOTPSeparator"

export { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }



===== FILE: ./components/ui/input.tsx =====
import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }



===== FILE: ./components/ui/item-card.tsx =====
import { cn } from "@/lib/utils"
import { Card, CardContent, CardFooter, CardHeader } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { MapPin, Calendar, Clock, ArrowRight } from "lucide-react"
import Image from "next/image"
import Link from "next/link"

interface ItemCardProps {
  id: string
  title: string
  description: string
  category: string
  status: "lost" | "found" | "claimed" | "returned"
  date: string
  time?: string
  location?: string
  image: string
  className?: string
}

export function ItemCard({
  id,
  title,
  description,
  category,
  status,
  date,
  time,
  location,
  image,
  className,
}: ItemCardProps) {
  const statusColors = {
    lost: "bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-300",
    found: "bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-300",
    claimed: "bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-300",
    returned: "bg-violet-100 text-violet-800 dark:bg-violet-900/30 dark:text-violet-300",
  }

  return (
    <Card className={cn("overflow-hidden transition-all duration-200 card-hover", className)}>
      <div className="relative aspect-square w-full overflow-hidden">
        <div className="absolute top-2 right-2 z-10">
          <Badge className={cn("px-2 py-1", statusColors[status])}>
            {status.charAt(0).toUpperCase() + status.slice(1)}
          </Badge>
        </div>
        <Image
          src={image}
          alt={title}
          fill
          className="object-cover transition-all duration-300 hover:scale-105"
        />
      </div>
      <CardHeader className="p-4 pb-0">
        <div className="flex justify-between items-start">
          <div>
            <h3 className="font-semibold text-lg line-clamp-1">{title}</h3>
            <p className="text-xs text-muted-foreground">{category}</p>
          </div>
        </div>
      </CardHeader>
      <CardContent className="p-4 pt-2">
        <p className="text-sm text-muted-foreground line-clamp-2 min-h-[40px]">
          {description}
        </p>
        <div className="mt-3 space-y-2">
          <div className="flex items-center gap-2 text-xs text-muted-foreground">
            <Calendar className="h-3.5 w-3.5" />
            <span>{date}</span>
            {time && (
              <>
                <Clock className="h-3.5 w-3.5 ml-2" />
                <span>{time}</span>
              </>
            )}
          </div>
          {location && (
            <div className="flex items-center gap-2 text-xs text-muted-foreground">
              <MapPin className="h-3.5 w-3.5" />
              <span className="line-clamp-1">{location}</span>
            </div>
          )}
        </div>
      </CardContent>
      <CardFooter className="p-4 pt-0">
        <Link href={`/lost-objects/${id}`} className="w-full">
          <Button variant="outline" className="w-full group">
            View Details
            <ArrowRight className="ml-2 h-4 w-4 transition-transform group-hover:translate-x-1" />
          </Button>
        </Link>
      </CardFooter>
    </Card>
  )
} 


===== FILE: ./components/ui/label.tsx =====
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }



===== FILE: ./components/ui/menubar.tsx =====
"use client"

import * as React from "react"
import * as MenubarPrimitive from "@radix-ui/react-menubar"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const MenubarMenu = MenubarPrimitive.Menu

const MenubarGroup = MenubarPrimitive.Group

const MenubarPortal = MenubarPrimitive.Portal

const MenubarSub = MenubarPrimitive.Sub

const MenubarRadioGroup = MenubarPrimitive.RadioGroup

const Menubar = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Root
    ref={ref}
    className={cn(
      "flex h-10 items-center space-x-1 rounded-md border bg-background p-1",
      className
    )}
    {...props}
  />
))
Menubar.displayName = MenubarPrimitive.Root.displayName

const MenubarTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      className
    )}
    {...props}
  />
))
MenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName

const MenubarSubTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <MenubarPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </MenubarPrimitive.SubTrigger>
))
MenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName

const MenubarSubContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
MenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName

const MenubarContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>
>(
  (
    { className, align = "start", alignOffset = -4, sideOffset = 8, ...props },
    ref
  ) => (
    <MenubarPrimitive.Portal>
      <MenubarPrimitive.Content
        ref={ref}
        align={align}
        alignOffset={alignOffset}
        sideOffset={sideOffset}
        className={cn(
          "z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
          className
        )}
        {...props}
      />
    </MenubarPrimitive.Portal>
  )
)
MenubarContent.displayName = MenubarPrimitive.Content.displayName

const MenubarItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarItem.displayName = MenubarPrimitive.Item.displayName

const MenubarCheckboxItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <MenubarPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.CheckboxItem>
))
MenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName

const MenubarRadioItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <MenubarPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.RadioItem>
))
MenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName

const MenubarLabel = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarLabel.displayName = MenubarPrimitive.Label.displayName

const MenubarSeparator = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
MenubarSeparator.displayName = MenubarPrimitive.Separator.displayName

const MenubarShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
MenubarShortcut.displayname = "MenubarShortcut"

export {
  Menubar,
  MenubarMenu,
  MenubarTrigger,
  MenubarContent,
  MenubarItem,
  MenubarSeparator,
  MenubarLabel,
  MenubarCheckboxItem,
  MenubarRadioGroup,
  MenubarRadioItem,
  MenubarPortal,
  MenubarSubContent,
  MenubarSubTrigger,
  MenubarGroup,
  MenubarSub,
  MenubarShortcut,
}



===== FILE: ./components/ui/navigation-menu.tsx =====
import * as React from "react"
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu"
import { cva } from "class-variance-authority"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const NavigationMenu = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Root
    ref={ref}
    className={cn(
      "relative z-10 flex max-w-max flex-1 items-center justify-center",
      className
    )}
    {...props}
  >
    {children}
    <NavigationMenuViewport />
  </NavigationMenuPrimitive.Root>
))
NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName

const NavigationMenuList = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.List
    ref={ref}
    className={cn(
      "group flex flex-1 list-none items-center justify-center space-x-1",
      className
    )}
    {...props}
  />
))
NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName

const NavigationMenuItem = NavigationMenuPrimitive.Item

const navigationMenuTriggerStyle = cva(
  "group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50"
)

const NavigationMenuTrigger = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Trigger
    ref={ref}
    className={cn(navigationMenuTriggerStyle(), "group", className)}
    {...props}
  >
    {children}{" "}
    <ChevronDown
      className="relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180"
      aria-hidden="true"
    />
  </NavigationMenuPrimitive.Trigger>
))
NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName

const NavigationMenuContent = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Content
    ref={ref}
    className={cn(
      "left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto ",
      className
    )}
    {...props}
  />
))
NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName

const NavigationMenuLink = NavigationMenuPrimitive.Link

const NavigationMenuViewport = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>
>(({ className, ...props }, ref) => (
  <div className={cn("absolute left-0 top-full flex justify-center")}>
    <NavigationMenuPrimitive.Viewport
      className={cn(
        "origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]",
        className
      )}
      ref={ref}
      {...props}
    />
  </div>
))
NavigationMenuViewport.displayName =
  NavigationMenuPrimitive.Viewport.displayName

const NavigationMenuIndicator = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Indicator
    ref={ref}
    className={cn(
      "top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in",
      className
    )}
    {...props}
  >
    <div className="relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md" />
  </NavigationMenuPrimitive.Indicator>
))
NavigationMenuIndicator.displayName =
  NavigationMenuPrimitive.Indicator.displayName

export {
  navigationMenuTriggerStyle,
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
}



===== FILE: ./components/ui/notification-dropdown.tsx =====
"use client"

import * as React from "react"
import { Bell } from "lucide-react"
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover"
import { Button } from "@/components/ui/button"
import { ScrollArea } from "@/components/ui/scroll-area"
import { cn } from "@/lib/utils"

// Mock notifications for demo purposes
const DEMO_NOTIFICATIONS = [
  {
    id: 1,
    title: "Your item has been found!",
    message: "Someone reported finding your lost wallet near the park.",
    time: "Just now",
    read: false,
  },
  {
    id: 2,
    title: "New message from finder",
    message: "Hello, I found your keys at the library. Let's connect to return them.",
    time: "2 hours ago",
    read: false,
  },
  {
    id: 3,
    title: "Verification completed",
    message: "Your item report has been verified and published.",
    time: "Yesterday",
    read: true,
  },
  {
    id: 4,
    title: "Reminder",
    message: "Don't forget to update your contact information for better item recovery.",
    time: "3 days ago",
    read: true,
  },
]

interface NotificationDropdownProps {
  className?: string
}

export function NotificationDropdown({ className }: NotificationDropdownProps) {
  const [notifications, setNotifications] = React.useState(DEMO_NOTIFICATIONS)
  const [open, setOpen] = React.useState(false)
  
  const unreadCount = notifications.filter(notification => !notification.read).length

  const markAllAsRead = () => {
    setNotifications(
      notifications.map(notification => ({
        ...notification,
        read: true,
      }))
    )
  }

  const markAsRead = (id: number) => {
    setNotifications(
      notifications.map(notification => 
        notification.id === id 
          ? { ...notification, read: true }
          : notification
      )
    )
  }

  return (
    <Popover open={open} onOpenChange={setOpen}>
      <PopoverTrigger asChild>
        <Button variant="ghost" size="icon" className={cn("text-muted-foreground hover:bg-muted relative", className)}>
          <Bell className="h-5 w-5" />
          {unreadCount > 0 && (
            <span className="absolute top-2 right-2 h-2 w-2 rounded-full bg-primary"></span>
          )}
          <span className="sr-only">Notifications</span>
        </Button>
      </PopoverTrigger>
      <PopoverContent className="w-80 p-0" align="end">
        <div className="flex items-center justify-between border-b p-3">
          <h3 className="text-sm font-medium">Notifications</h3>
          {unreadCount > 0 && (
            <Button 
              variant="ghost" 
              size="sm" 
              className="h-8 text-xs"
              onClick={markAllAsRead}
            >
              Mark all as read
            </Button>
          )}
        </div>
        {notifications.length > 0 ? (
          <ScrollArea className="h-[300px]">
            <div className="grid gap-1 p-1">
              {notifications.map(notification => (
                <button
                  key={notification.id}
                  className={cn(
                    "flex flex-col gap-1 rounded-md p-3 text-left text-sm transition-colors hover:bg-muted",
                    !notification.read && "bg-muted/50"
                  )}
                  onClick={() => markAsRead(notification.id)}
                >
                  <div className="flex items-start justify-between gap-2">
                    <div className="font-medium">{notification.title}</div>
                    <div className="text-xs text-muted-foreground whitespace-nowrap">
                      {notification.time}
                    </div>
                  </div>
                  <div className="text-xs text-muted-foreground">
                    {notification.message}
                  </div>
                  {!notification.read && (
                    <div className="mt-1 h-1.5 w-1.5 rounded-full bg-primary"></div>
                  )}
                </button>
              ))}
            </div>
          </ScrollArea>
        ) : (
          <div className="p-8 text-center text-muted-foreground">
            No notifications
          </div>
        )}
        <div className="border-t p-2">
          <Button variant="outline" size="sm" className="w-full">
            View all notifications
          </Button>
        </div>
      </PopoverContent>
    </Popover>
  )
} 


===== FILE: ./components/ui/pagination.tsx =====
import * as React from "react"
import { ChevronLeft, ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"
import { ButtonProps, buttonVariants } from "@/components/ui/button"

const Pagination = ({ className, ...props }: React.ComponentProps<"nav">) => (
  <nav
    role="navigation"
    aria-label="pagination"
    className={cn("mx-auto flex w-full justify-center", className)}
    {...props}
  />
)
Pagination.displayName = "Pagination"

const PaginationContent = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    className={cn("flex flex-row items-center gap-1", className)}
    {...props}
  />
))
PaginationContent.displayName = "PaginationContent"

const PaginationItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li ref={ref} className={cn("", className)} {...props} />
))
PaginationItem.displayName = "PaginationItem"

type PaginationLinkProps = {
  isActive?: boolean
} & Pick<ButtonProps, "size"> &
  React.ComponentProps<"a">

const PaginationLink = ({
  className,
  isActive,
  size = "icon",
  ...props
}: PaginationLinkProps) => (
  <a
    aria-current={isActive ? "page" : undefined}
    className={cn(
      buttonVariants({
        variant: isActive ? "outline" : "ghost",
        size,
      }),
      className
    )}
    {...props}
  />
)
PaginationLink.displayName = "PaginationLink"

const PaginationPrevious = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to previous page"
    size="default"
    className={cn("gap-1 pl-2.5", className)}
    {...props}
  >
    <ChevronLeft className="h-4 w-4" />
    <span>Previous</span>
  </PaginationLink>
)
PaginationPrevious.displayName = "PaginationPrevious"

const PaginationNext = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to next page"
    size="default"
    className={cn("gap-1 pr-2.5", className)}
    {...props}
  >
    <span>Next</span>
    <ChevronRight className="h-4 w-4" />
  </PaginationLink>
)
PaginationNext.displayName = "PaginationNext"

const PaginationEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    aria-hidden
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More pages</span>
  </span>
)
PaginationEllipsis.displayName = "PaginationEllipsis"

export {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
}



===== FILE: ./components/ui/popover.tsx =====
"use client"

import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent }



===== FILE: ./components/ui/progress.tsx =====
"use client"

import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-4 w-full overflow-hidden rounded-full bg-secondary",
      className
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }



===== FILE: ./components/ui/radio-group.tsx =====
"use client"

import * as React from "react"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const RadioGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Root
      className={cn("grid gap-2", className)}
      {...props}
      ref={ref}
    />
  )
})
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName

const RadioGroupItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-2.5 w-2.5 fill-current text-current" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  )
})
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName

export { RadioGroup, RadioGroupItem }



===== FILE: ./components/ui/resizable.tsx =====
"use client"

import { GripVertical } from "lucide-react"
import * as ResizablePrimitive from "react-resizable-panels"

import { cn } from "@/lib/utils"

const ResizablePanelGroup = ({
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (
  <ResizablePrimitive.PanelGroup
    className={cn(
      "flex h-full w-full data-[panel-group-direction=vertical]:flex-col",
      className
    )}
    {...props}
  />
)

const ResizablePanel = ResizablePrimitive.Panel

const ResizableHandle = ({
  withHandle,
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {
  withHandle?: boolean
}) => (
  <ResizablePrimitive.PanelResizeHandle
    className={cn(
      "relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90",
      className
    )}
    {...props}
  >
    {withHandle && (
      <div className="z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border">
        <GripVertical className="h-2.5 w-2.5" />
      </div>
    )}
  </ResizablePrimitive.PanelResizeHandle>
)

export { ResizablePanelGroup, ResizablePanel, ResizableHandle }



===== FILE: ./components/ui/scroll-area.tsx =====
"use client"

import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }



===== FILE: ./components/ui/select.tsx =====
"use client"

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}



===== FILE: ./components/ui/separator.tsx =====
"use client"

import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }



===== FILE: ./components/ui/sheet.tsx =====
"use client"

import * as React from "react"
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
    VariantProps<typeof sheetVariants> {}

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      {children}
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}



===== FILE: ./components/ui/sidebar.tsx =====
"use client"

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { VariantProps, cva } from "class-variance-authority"
import { PanelLeft } from "lucide-react"

import { useIsMobile } from "@/hooks/use-mobile"
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Separator } from "@/components/ui/separator"
import { Sheet, SheetContent } from "@/components/ui/sheet"
import { Skeleton } from "@/components/ui/skeleton"
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip"

const SIDEBAR_COOKIE_NAME = "sidebar:state"
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7
const SIDEBAR_WIDTH = "16rem"
const SIDEBAR_WIDTH_MOBILE = "18rem"
const SIDEBAR_WIDTH_ICON = "3rem"
const SIDEBAR_KEYBOARD_SHORTCUT = "b"

type SidebarContext = {
  state: "expanded" | "collapsed"
  open: boolean
  setOpen: (open: boolean) => void
  openMobile: boolean
  setOpenMobile: (open: boolean) => void
  isMobile: boolean
  toggleSidebar: () => void
}

const SidebarContext = React.createContext<SidebarContext | null>(null)

function useSidebar() {
  const context = React.useContext(SidebarContext)
  if (!context) {
    throw new Error("useSidebar must be used within a SidebarProvider.")
  }

  return context
}

const SidebarProvider = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    defaultOpen?: boolean
    open?: boolean
    onOpenChange?: (open: boolean) => void
  }
>(
  (
    {
      defaultOpen = true,
      open: openProp,
      onOpenChange: setOpenProp,
      className,
      style,
      children,
      ...props
    },
    ref
  ) => {
    const isMobile = useIsMobile()
    const [openMobile, setOpenMobile] = React.useState(false)

    // This is the internal state of the sidebar.
    // We use openProp and setOpenProp for control from outside the component.
    const [_open, _setOpen] = React.useState(defaultOpen)
    const open = openProp ?? _open
    const setOpen = React.useCallback(
      (value: boolean | ((value: boolean) => boolean)) => {
        const openState = typeof value === "function" ? value(open) : value
        if (setOpenProp) {
          setOpenProp(openState)
        } else {
          _setOpen(openState)
        }

        // This sets the cookie to keep the sidebar state.
        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`
      },
      [setOpenProp, open]
    )

    // Helper to toggle the sidebar.
    const toggleSidebar = React.useCallback(() => {
      return isMobile
        ? setOpenMobile((open) => !open)
        : setOpen((open) => !open)
    }, [isMobile, setOpen, setOpenMobile])

    // Adds a keyboard shortcut to toggle the sidebar.
    React.useEffect(() => {
      const handleKeyDown = (event: KeyboardEvent) => {
        if (
          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&
          (event.metaKey || event.ctrlKey)
        ) {
          event.preventDefault()
          toggleSidebar()
        }
      }

      window.addEventListener("keydown", handleKeyDown)
      return () => window.removeEventListener("keydown", handleKeyDown)
    }, [toggleSidebar])

    // We add a state so that we can do data-state="expanded" or "collapsed".
    // This makes it easier to style the sidebar with Tailwind classes.
    const state = open ? "expanded" : "collapsed"

    const contextValue = React.useMemo<SidebarContext>(
      () => ({
        state,
        open,
        setOpen,
        isMobile,
        openMobile,
        setOpenMobile,
        toggleSidebar,
      }),
      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]
    )

    return (
      <SidebarContext.Provider value={contextValue}>
        <TooltipProvider delayDuration={0}>
          <div
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH,
                "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
                ...style,
              } as React.CSSProperties
            }
            className={cn(
              "group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar",
              className
            )}
            ref={ref}
            {...props}
          >
            {children}
          </div>
        </TooltipProvider>
      </SidebarContext.Provider>
    )
  }
)
SidebarProvider.displayName = "SidebarProvider"

const Sidebar = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    side?: "left" | "right"
    variant?: "sidebar" | "floating" | "inset"
    collapsible?: "offcanvas" | "icon" | "none"
  }
>(
  (
    {
      side = "left",
      variant = "sidebar",
      collapsible = "offcanvas",
      className,
      children,
      ...props
    },
    ref
  ) => {
    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()

    if (collapsible === "none") {
      return (
        <div
          className={cn(
            "flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground",
            className
          )}
          ref={ref}
          {...props}
        >
          {children}
        </div>
      )
    }

    if (isMobile) {
      return (
        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
          <SheetContent
            data-sidebar="sidebar"
            data-mobile="true"
            className="w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden"
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH_MOBILE,
              } as React.CSSProperties
            }
            side={side}
          >
            <div className="flex h-full w-full flex-col">{children}</div>
          </SheetContent>
        </Sheet>
      )
    }

    return (
      <div
        ref={ref}
        className="group peer hidden md:block text-sidebar-foreground"
        data-state={state}
        data-collapsible={state === "collapsed" ? collapsible : ""}
        data-variant={variant}
        data-side={side}
      >
        {/* This is what handles the sidebar gap on desktop */}
        <div
          className={cn(
            "duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear",
            "group-data-[collapsible=offcanvas]:w-0",
            "group-data-[side=right]:rotate-180",
            variant === "floating" || variant === "inset"
              ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon]"
          )}
        />
        <div
          className={cn(
            "duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex",
            side === "left"
              ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
              : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
            // Adjust the padding for floating and inset variants.
            variant === "floating" || variant === "inset"
              ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l",
            className
          )}
          {...props}
        >
          <div
            data-sidebar="sidebar"
            className="flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow"
          >
            {children}
          </div>
        </div>
      </div>
    )
  }
)
Sidebar.displayName = "Sidebar"

const SidebarTrigger = React.forwardRef<
  React.ElementRef<typeof Button>,
  React.ComponentProps<typeof Button>
>(({ className, onClick, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <Button
      ref={ref}
      data-sidebar="trigger"
      variant="ghost"
      size="icon"
      className={cn("h-7 w-7", className)}
      onClick={(event) => {
        onClick?.(event)
        toggleSidebar()
      }}
      {...props}
    >
      <PanelLeft />
      <span className="sr-only">Toggle Sidebar</span>
    </Button>
  )
})
SidebarTrigger.displayName = "SidebarTrigger"

const SidebarRail = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button">
>(({ className, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <button
      ref={ref}
      data-sidebar="rail"
      aria-label="Toggle Sidebar"
      tabIndex={-1}
      onClick={toggleSidebar}
      title="Toggle Sidebar"
      className={cn(
        "absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex",
        "[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize",
        "[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
        "group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar",
        "[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
        "[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
        className
      )}
      {...props}
    />
  )
})
SidebarRail.displayName = "SidebarRail"

const SidebarInset = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"main">
>(({ className, ...props }, ref) => {
  return (
    <main
      ref={ref}
      className={cn(
        "relative flex min-h-svh flex-1 flex-col bg-background",
        "peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow",
        className
      )}
      {...props}
    />
  )
})
SidebarInset.displayName = "SidebarInset"

const SidebarInput = React.forwardRef<
  React.ElementRef<typeof Input>,
  React.ComponentProps<typeof Input>
>(({ className, ...props }, ref) => {
  return (
    <Input
      ref={ref}
      data-sidebar="input"
      className={cn(
        "h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring",
        className
      )}
      {...props}
    />
  )
})
SidebarInput.displayName = "SidebarInput"

const SidebarHeader = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="header"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarHeader.displayName = "SidebarHeader"

const SidebarFooter = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="footer"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarFooter.displayName = "SidebarFooter"

const SidebarSeparator = React.forwardRef<
  React.ElementRef<typeof Separator>,
  React.ComponentProps<typeof Separator>
>(({ className, ...props }, ref) => {
  return (
    <Separator
      ref={ref}
      data-sidebar="separator"
      className={cn("mx-2 w-auto bg-sidebar-border", className)}
      {...props}
    />
  )
})
SidebarSeparator.displayName = "SidebarSeparator"

const SidebarContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="content"
      className={cn(
        "flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarContent.displayName = "SidebarContent"

const SidebarGroup = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="group"
      className={cn("relative flex w-full min-w-0 flex-col p-2", className)}
      {...props}
    />
  )
})
SidebarGroup.displayName = "SidebarGroup"

const SidebarGroupLabel = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "div"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-label"
      className={cn(
        "duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        "group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupLabel.displayName = "SidebarGroupLabel"

const SidebarGroupAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-action"
      className={cn(
        "absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupAction.displayName = "SidebarGroupAction"

const SidebarGroupContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="group-content"
    className={cn("w-full text-sm", className)}
    {...props}
  />
))
SidebarGroupContent.displayName = "SidebarGroupContent"

const SidebarMenu = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu"
    className={cn("flex w-full min-w-0 flex-col gap-1", className)}
    {...props}
  />
))
SidebarMenu.displayName = "SidebarMenu"

const SidebarMenuItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    data-sidebar="menu-item"
    className={cn("group/menu-item relative", className)}
    {...props}
  />
))
SidebarMenuItem.displayName = "SidebarMenuItem"

const sidebarMenuButtonVariants = cva(
  "peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
        outline:
          "bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]",
      },
      size: {
        default: "h-8 text-sm",
        sm: "h-7 text-xs",
        lg: "h-12 text-sm group-data-[collapsible=icon]:!p-0",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const SidebarMenuButton = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    isActive?: boolean
    tooltip?: string | React.ComponentProps<typeof TooltipContent>
  } & VariantProps<typeof sidebarMenuButtonVariants>
>(
  (
    {
      asChild = false,
      isActive = false,
      variant = "default",
      size = "default",
      tooltip,
      className,
      ...props
    },
    ref
  ) => {
    const Comp = asChild ? Slot : "button"
    const { isMobile, state } = useSidebar()

    const button = (
      <Comp
        ref={ref}
        data-sidebar="menu-button"
        data-size={size}
        data-active={isActive}
        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
        {...props}
      />
    )

    if (!tooltip) {
      return button
    }

    if (typeof tooltip === "string") {
      tooltip = {
        children: tooltip,
      }
    }

    return (
      <Tooltip>
        <TooltipTrigger asChild>{button}</TooltipTrigger>
        <TooltipContent
          side="right"
          align="center"
          hidden={state !== "collapsed" || isMobile}
          {...tooltip}
        />
      </Tooltip>
    )
  }
)
SidebarMenuButton.displayName = "SidebarMenuButton"

const SidebarMenuAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    showOnHover?: boolean
  }
>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-action"
      className={cn(
        "absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        showOnHover &&
          "group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuAction.displayName = "SidebarMenuAction"

const SidebarMenuBadge = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="menu-badge"
    className={cn(
      "absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none",
      "peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",
      "peer-data-[size=sm]/menu-button:top-1",
      "peer-data-[size=default]/menu-button:top-1.5",
      "peer-data-[size=lg]/menu-button:top-2.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuBadge.displayName = "SidebarMenuBadge"

const SidebarMenuSkeleton = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    showIcon?: boolean
  }
>(({ className, showIcon = false, ...props }, ref) => {
  // Random width between 50 to 90%.
  const width = React.useMemo(() => {
    return `${Math.floor(Math.random() * 40) + 50}%`
  }, [])

  return (
    <div
      ref={ref}
      data-sidebar="menu-skeleton"
      className={cn("rounded-md h-8 flex gap-2 px-2 items-center", className)}
      {...props}
    >
      {showIcon && (
        <Skeleton
          className="size-4 rounded-md"
          data-sidebar="menu-skeleton-icon"
        />
      )}
      <Skeleton
        className="h-4 flex-1 max-w-[--skeleton-width]"
        data-sidebar="menu-skeleton-text"
        style={
          {
            "--skeleton-width": width,
          } as React.CSSProperties
        }
      />
    </div>
  )
})
SidebarMenuSkeleton.displayName = "SidebarMenuSkeleton"

const SidebarMenuSub = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu-sub"
    className={cn(
      "mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuSub.displayName = "SidebarMenuSub"

const SidebarMenuSubItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ ...props }, ref) => <li ref={ref} {...props} />)
SidebarMenuSubItem.displayName = "SidebarMenuSubItem"

const SidebarMenuSubButton = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentProps<"a"> & {
    asChild?: boolean
    size?: "sm" | "md"
    isActive?: boolean
  }
>(({ asChild = false, size = "md", isActive, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-sub-button"
      data-size={size}
      data-active={isActive}
      className={cn(
        "flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground",
        "data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",
        size === "sm" && "text-xs",
        size === "md" && "text-sm",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuSubButton.displayName = "SidebarMenuSubButton"

export {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupAction,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInput,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuBadge,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSkeleton,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  SidebarProvider,
  SidebarRail,
  SidebarSeparator,
  SidebarTrigger,
  useSidebar,
}



===== FILE: ./components/ui/skeleton.tsx =====
import { cn } from "@/lib/utils"

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-muted", className)}
      {...props}
    />
  )
}

export { Skeleton }



===== FILE: ./components/ui/slider.tsx =====
"use client"

import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "@/lib/utils"

const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
>(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex w-full touch-none select-none items-center",
      className
    )}
    {...props}
  >
    <SliderPrimitive.Track className="relative h-2 w-full grow overflow-hidden rounded-full bg-secondary">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb className="block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50" />
  </SliderPrimitive.Root>
))
Slider.displayName = SliderPrimitive.Root.displayName

export { Slider }



===== FILE: ./components/ui/sonner.tsx =====
"use client"

import { useTheme } from "next-themes"
import { Toaster as Sonner } from "sonner"

type ToasterProps = React.ComponentProps<typeof Sonner>

const Toaster = ({ ...props }: ToasterProps) => {
  const { theme = "system" } = useTheme()

  return (
    <Sonner
      theme={theme as ToasterProps["theme"]}
      className="toaster group"
      toastOptions={{
        classNames: {
          toast:
            "group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",
          description: "group-[.toast]:text-muted-foreground",
          actionButton:
            "group-[.toast]:bg-primary group-[.toast]:text-primary-foreground",
          cancelButton:
            "group-[.toast]:bg-muted group-[.toast]:text-muted-foreground",
        },
      }}
      {...props}
    />
  )
}

export { Toaster }



===== FILE: ./components/ui/switch.tsx =====
"use client"

import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }



===== FILE: ./components/ui/table.tsx =====
import * as React from "react"

import { cn } from "@/lib/utils"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}



===== FILE: ./components/ui/tabs.tsx =====
"use client"

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }



===== FILE: ./components/ui/textarea.tsx =====
import * as React from "react"

import { cn } from "@/lib/utils"

const Textarea = React.forwardRef<
  HTMLTextAreaElement,
  React.ComponentProps<"textarea">
>(({ className, ...props }, ref) => {
  return (
    <textarea
      className={cn(
        "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        className
      )}
      ref={ref}
      {...props}
    />
  )
})
Textarea.displayName = "Textarea"

export { Textarea }



===== FILE: ./components/ui/toaster.tsx =====
"use client"

import { useToast } from "@/hooks/use-toast"
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/components/ui/toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}



===== FILE: ./components/ui/toast.tsx =====
"use client"

import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold", className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}



===== FILE: ./components/ui/toggle-group.tsx =====
"use client"

import * as React from "react"
import * as ToggleGroupPrimitive from "@radix-ui/react-toggle-group"
import { type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"
import { toggleVariants } from "@/components/ui/toggle"

const ToggleGroupContext = React.createContext<
  VariantProps<typeof toggleVariants>
>({
  size: "default",
  variant: "default",
})

const ToggleGroup = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, children, ...props }, ref) => (
  <ToggleGroupPrimitive.Root
    ref={ref}
    className={cn("flex items-center justify-center gap-1", className)}
    {...props}
  >
    <ToggleGroupContext.Provider value={{ variant, size }}>
      {children}
    </ToggleGroupContext.Provider>
  </ToggleGroupPrimitive.Root>
))

ToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName

const ToggleGroupItem = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &
    VariantProps<typeof toggleVariants>
>(({ className, children, variant, size, ...props }, ref) => {
  const context = React.useContext(ToggleGroupContext)

  return (
    <ToggleGroupPrimitive.Item
      ref={ref}
      className={cn(
        toggleVariants({
          variant: context.variant || variant,
          size: context.size || size,
        }),
        className
      )}
      {...props}
    >
      {children}
    </ToggleGroupPrimitive.Item>
  )
})

ToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName

export { ToggleGroup, ToggleGroupItem }



===== FILE: ./components/ui/toggle.tsx =====
"use client"

import * as React from "react"
import * as TogglePrimitive from "@radix-ui/react-toggle"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const toggleVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2",
  {
    variants: {
      variant: {
        default: "bg-transparent",
        outline:
          "border border-input bg-transparent hover:bg-accent hover:text-accent-foreground",
      },
      size: {
        default: "h-10 px-3 min-w-10",
        sm: "h-9 px-2.5 min-w-9",
        lg: "h-11 px-5 min-w-11",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const Toggle = React.forwardRef<
  React.ElementRef<typeof TogglePrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, ...props }, ref) => (
  <TogglePrimitive.Root
    ref={ref}
    className={cn(toggleVariants({ variant, size, className }))}
    {...props}
  />
))

Toggle.displayName = TogglePrimitive.Root.displayName

export { Toggle, toggleVariants }



===== FILE: ./components/ui/tooltip.tsx =====
"use client"

import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }



===== FILE: ./components/ui/use-mobile.tsx =====
import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}



===== FILE: ./components/ui/use-toast.ts =====
"use client"

// Inspired by react-hot-toast library
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }



===== FILE: ./hooks/use-mobile.tsx =====
import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}



===== FILE: ./hooks/use-toast.ts =====
"use client"

// Inspired by react-hot-toast library
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }



===== FILE: ./lib/ai/feature-extraction.ts =====
import * as tf from '@tensorflow/tfjs';

// Load the MobileNet model for feature extraction
let model: tf.LayersModel | null = null;

/**
 * Initialize the model if not already loaded
 */
async function loadModelIfNeeded() {
  if (!model) {
    try {
      // Load MobileNet model without the top (classification) layer
      model = await tf.loadLayersModel('https://storage.googleapis.com/tfjs-models/tfjs/mobilenet_v1_1.0_224/model.json');
      
      // We'll use the layer just before the softmax layer for feature extraction
      const layer = model.getLayer('conv_pw_13_relu');
      model = tf.model({
        inputs: model.inputs,
        outputs: layer.output
      });
      
      console.log('MobileNet model loaded for feature extraction');
    } catch (error) {
      console.error('Error loading MobileNet model:', error);
      throw new Error('Failed to load feature extraction model');
    }
  }
  return model;
}

/**
 * Extract features from an image URL
 * @param imageUrl - URL of the image to process
 * @returns Feature vector as array
 */
export async function extractImageFeatures(imageUrl: string): Promise<number[]> {
  // Skip feature extraction in server environments without TensorFlow.js support
  if (typeof window === 'undefined') {
    console.log('Server-side feature extraction not supported, returning mock features');
    // Return mock features vector (empty array is fine for now)
    return Array(10).fill(0).map(() => Math.random()); // Return 10 random values as mock features
  }
  
  try {
    const model = await loadModelIfNeeded();
    
    // Load and preprocess the image
    const img = new Image();
    img.crossOrigin = 'anonymous';
    
    // Wait for the image to load
    await new Promise<void>((resolve, reject) => {
      img.onload = () => resolve();
      img.onerror = (e) => {
        console.error('Image load error:', e);
        reject(new Error('Failed to load image'));
      }
      img.src = imageUrl;
    });
    
    // Preprocess image for MobileNet
    const tensor = tf.browser.fromPixels(img)
      .resizeNearestNeighbor([224, 224])
      .toFloat()
      .div(tf.scalar(127.5))
      .sub(tf.scalar(1))
      .expandDims();
    
    // Get features
    const features = model.predict(tensor) as tf.Tensor;
    
    // Convert to array format for storage
    const featuresData = await features.data();
    const featuresArray = Array.from(featuresData);
    
    // Clean up tensors
    tensor.dispose();
    features.dispose();
    
    return featuresArray;
  } catch (error) {
    console.error('Feature extraction failed:', error);
    // Return empty array on error
    return Array(10).fill(0).map(() => Math.random()); // Return mock features on error
  }
}

/**
 * Calculate similarity between two feature vectors (cosine similarity)
 * @param features1 - First feature vector
 * @param features2 - Second feature vector
 * @returns Similarity score (0-100)
 */
export function calculateSimilarity(features1: number[], features2: number[]): number {
  if (!features1.length || !features2.length) {
    return 0;
  }
  
  try {
    // Compute cosine similarity between the feature vectors
    const dotProduct = features1.reduce((sum, value, i) => sum + value * features2[i], 0);
    
    const magnitude1 = Math.sqrt(features1.reduce((sum, value) => sum + value * value, 0));
    const magnitude2 = Math.sqrt(features2.reduce((sum, value) => sum + value * value, 0));
    
    if (magnitude1 === 0 || magnitude2 === 0) {
      return 0;
    }
    
    // Cosine similarity converted to percentage
    const similarity = (dotProduct / (magnitude1 * magnitude2));
    return Math.max(0, Math.min(100, Math.round(similarity * 100)));
  } catch (error) {
    console.error('Error calculating similarity:', error);
    return 0;
  }
} 


===== FILE: ./lib/auth-options.ts =====
import { AuthOptions } from "next-auth"
import CredentialsProvider from "next-auth/providers/credentials"
import { JWT } from "next-auth/jwt"
import bcrypt from "bcryptjs"

// Add custom types to extend NextAuth types
declare module "next-auth" {
  interface User {
    id: string
    role?: string
  }
  
  interface Session {
    user: {
      id: string
      name?: string | null
      email?: string | null
      image?: string | null
      role?: string
    }
  }
}

declare module "next-auth/jwt" {
  interface JWT {
    id: string
    role?: string
  }
}

// Mock user database for development
const MOCK_USERS = [
  {
    id: "user-1",
    name: "Test User",
    email: "test@example.com",
    password: bcrypt.hashSync("password123", 10),
    role: "user"
  },
  {
    id: "admin-1",
    name: "Admin User",
    email: "admin@example.com",
    password: bcrypt.hashSync("admin123", 10),
    role: "admin"
  }
];

// This is a simplified version of the auth options with mock functionality
export const authOptions: AuthOptions = {
  providers: [
    CredentialsProvider({
      name: "credentials",
      credentials: {
        email: { label: "Email", type: "email" },
        password: { label: "Password", type: "password" },
      },
      async authorize(credentials) {
        if (!credentials?.email || !credentials?.password) {
          return null
        }

        try {
          // For development, use mock user database
          const user = MOCK_USERS.find(u => u.email === credentials.email);
          
          if (!user) {
            console.log("User not found");
            return null;
          }
          
          // Verify password
          const isPasswordValid = await bcrypt.compare(credentials.password, user.password);
          
          if (!isPasswordValid) {
            console.log("Invalid password");
            return null;
          }
          
          return {
            id: user.id,
            name: user.name,
            email: user.email,
            role: user.role,
            image: null
          };
        } catch (error) {
          console.error("Auth error:", error);
          return null;
        }
      },
    }),
  ],
  pages: {
    signIn: "/auth/signin",
    newUser: "/auth/register",
  },
  session: {
    strategy: "jwt",
  },
  callbacks: {
    async jwt({ token, user }) {
      if (user) {
        token.id = user.id
        token.role = user.role
      }
      return token
    },
    async session({ session, token }) {
      if (session.user) {
        session.user.id = token.id
        session.user.role = token.role
      }
      return session
    },
  },
  // This is a development secret and should be replaced in production
  secret: process.env.NEXTAUTH_SECRET || "ThisIsATemporarySecretForDevelopmentOnly",
  debug: process.env.NODE_ENV === "development",
} 


===== FILE: ./lib/cloudinary.ts =====
import { v2 as cloudinary } from 'cloudinary';

// Configure Cloudinary
const cloudinaryConfig = {
  cloud_name: process.env.CLOUDINARY_CLOUD_NAME || '',
  api_key: process.env.CLOUDINARY_API_KEY || '',
  api_secret: process.env.CLOUDINARY_API_SECRET || '',
};

cloudinary.config(cloudinaryConfig);

// Check if Cloudinary is properly configured
const isCloudinaryConfigured = () => {
  return !!(
    cloudinaryConfig.cloud_name &&
    cloudinaryConfig.api_key &&
    cloudinaryConfig.api_secret
  );
};

/**
 * Upload an image to Cloudinary
 * @param imageBuffer - The image buffer to upload
 * @param folder - Optional folder to store the image in
 * @returns Cloudinary upload response
 */
export async function uploadImage(imageBuffer: Buffer, folder = 'lost-found-system') {
  try {
    // If Cloudinary isn't configured, return a mock response
    if (!isCloudinaryConfigured()) {
      console.warn('Cloudinary is not configured. Using mock response.');
      return {
        url: `/mock-image-${Date.now()}.jpg`,
        publicId: `mock-id-${Date.now()}`,
        width: 800,
        height: 600,
      };
    }
    
    // Convert buffer to base64
    const base64Image = `data:image/jpeg;base64,${imageBuffer.toString('base64')}`;
    
    // Upload to Cloudinary
    const result = await cloudinary.uploader.upload(base64Image, {
      folder,
      resource_type: 'image',
      transformation: [
        { width: 800, crop: 'limit' }, // Resize for better performance
      ],
    });
    
    return {
      url: result.secure_url,
      publicId: result.public_id,
      width: result.width,
      height: result.height,
    };
  } catch (error) {
    console.error('Error uploading to Cloudinary:', error);
    throw new Error('Image upload failed');
  }
}

/**
 * Delete an image from Cloudinary
 * @param publicId - The public ID of the image to delete
 */
export async function deleteImage(publicId: string) {
  try {
    // If Cloudinary isn't configured, return success
    if (!isCloudinaryConfigured()) {
      console.warn('Cloudinary is not configured. Mock deletion successful.');
      return { success: true };
    }
    
    await cloudinary.uploader.destroy(publicId);
    return { success: true };
  } catch (error) {
    console.error('Error deleting from Cloudinary:', error);
    throw new Error('Image deletion failed');
  }
}

export default cloudinary; 


===== FILE: ./lib/models/LostObject.ts =====
import mongoose, { Schema, Document } from 'mongoose';

export interface Coordinates {
  x: number;
  y: number;
  lat?: number;
  lng?: number;
}

export interface ILostObject extends Document {
  name: string;
  location: string;
  date: Date;
  time: string;
  image: string;
  category: string;
  description: string;
  status: 'found' | 'claimed' | 'missing';
  coordinates: Coordinates;
  reporter?: string;
  claimedBy?: string;
  createdAt: Date;
  updatedAt: Date;
  features?: Record<string, any>; // For AI feature vectors
}

const LostObjectSchema = new Schema<ILostObject>(
  {
    name: { type: String, required: true },
    location: { type: String, required: true },
    date: { type: Date, required: true, default: Date.now },
    time: { type: String, required: true },
    image: { type: String, required: true },
    category: { 
      type: String, 
      required: true,
      enum: ['bag', 'electronics', 'accessory', 'clothing', 'document', 'other']
    },
    description: { type: String, required: true },
    status: { 
      type: String, 
      required: true, 
      enum: ['found', 'claimed', 'missing'],
      default: 'found'
    },
    coordinates: {
      x: { type: Number, required: true },
      y: { type: Number, required: true },
      lat: { type: Number },
      lng: { type: Number }
    },
    reporter: { type: Schema.Types.ObjectId, ref: 'User' },
    claimedBy: { type: Schema.Types.ObjectId, ref: 'User' },
    features: { type: Schema.Types.Mixed }
  },
  { timestamps: true }
);

// Add text search index
LostObjectSchema.index({ 
  name: 'text', 
  description: 'text', 
  location: 'text', 
  category: 'text' 
});

export default mongoose.models.LostObject || 
  mongoose.model<ILostObject>('LostObject', LostObjectSchema); 


===== FILE: ./lib/models/User.ts =====
import mongoose, { Schema, Document } from 'mongoose';

export interface IUser extends Document {
  name: string;
  email: string;
  image?: string;
  password?: string; // Hashed password
  role: 'user' | 'admin';
  emailVerified?: Date;
  createdAt: Date;
  updatedAt: Date;
  contactInformation?: string;
}

const UserSchema = new Schema<IUser>(
  {
    name: { type: String, required: true },
    email: { type: String, required: true, unique: true },
    image: { type: String },
    password: { type: String },
    role: { type: String, required: true, enum: ['user', 'admin'], default: 'user' },
    emailVerified: { type: Date },
    contactInformation: { type: String }
  },
  { timestamps: true }
);

export default mongoose.models.User || 
  mongoose.model<IUser>('User', UserSchema); 


===== FILE: ./lib/mongodb-adapter.ts =====
import { MongoClient } from "mongodb";

const uri = process.env.MONGODB_URI || "mongodb://localhost:27017/lost-found-system";
const options = {};

let client: MongoClient;
let clientPromise: Promise<MongoClient>;

if (process.env.NODE_ENV === "development") {
  // In development mode, use a global variable to preserve the value
  // across module reloads caused by HMR (Hot Module Replacement).
  let globalWithMongo = global as typeof globalThis & {
    _mongoClientPromise?: Promise<MongoClient>;
  };

  if (!globalWithMongo._mongoClientPromise) {
    client = new MongoClient(uri, options);
    globalWithMongo._mongoClientPromise = client.connect();
  }
  clientPromise = globalWithMongo._mongoClientPromise;
} else {
  // In production mode, it's best to not use a global variable.
  client = new MongoClient(uri, options);
  clientPromise = client.connect();
}

// Export a module-scoped MongoClient promise
export default clientPromise; 


===== FILE: ./lib/mongodb.ts =====
import mongoose from 'mongoose';

const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/lost-found-system';
let cachedConnection: typeof mongoose | null = null;

export async function connectToDatabase() {
  // If we're already connected, return the existing connection
  if (cachedConnection) {
    return cachedConnection;
  }

  // Check if we're in a test or mock environment where we should return a mock connection
  if (process.env.NODE_ENV === 'test' || process.env.MOCK_DB === 'true') {
    console.log('Using mock MongoDB connection');
    return mongoose;
  }

  try {
    // For local development without MongoDB, provide mock functionality
    if (!MONGODB_URI || MONGODB_URI === 'mongodb://localhost:27017/lost-found-system') {
      console.warn('No MongoDB URI provided or using default local URI. Some functionality may be limited.');
      
      // If mongoose is not connected and we're in development, we'll proceed but with warnings
      if (process.env.NODE_ENV === 'development') {
        cachedConnection = mongoose;
        return mongoose;
      }
    }
    
    const connection = await mongoose.connect(MONGODB_URI);
    
    cachedConnection = connection;
    console.log('MongoDB connected successfully');
    return connection;
  } catch (error) {
    console.error('MongoDB connection error:', error);
    
    // In development, allow the app to continue even if DB connection fails
    if (process.env.NODE_ENV === 'development') {
      console.warn('Running with limited functionality due to MongoDB connection failure.');
      cachedConnection = mongoose;
      return mongoose;
    }
    
    throw error;
  }
}

export default connectToDatabase; 


===== FILE: ./lib/utils.ts =====
import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

export function formatDate(input: string | number | Date): string {
  const date = new Date(input)
  return date.toLocaleDateString("en-US", {
    month: "long",
    day: "numeric",
    year: "numeric",
  })
}

export function formatDateTime(input: string | number | Date): string {
  const date = new Date(input)
  return date.toLocaleString("en-US", {
    month: "long",
    day: "numeric",
    year: "numeric",
    hour: "numeric",
    minute: "numeric",
    hour12: true,
  })
}

export function truncate(str: string, length: number): string {
  if (!str || str.length <= length) return str
  return `${str.slice(0, length)}...`
}

export function getInitials(name: string): string {
  const parts = name.split(" ")
  let initials = ""
  parts.forEach(part => {
    if (part.length > 0) {
      initials += part[0].toUpperCase()
    }
  })
  return initials.slice(0, 2)
}



===== FILE: ./next-env.d.ts =====
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/api-reference/config/typescript for more information.



===== FILE: ./scripts/additional-placeholders.js =====
const fs = require('fs');
const path = require('path');

const publicDir = path.join(__dirname, '../public');

// Additional SVG placeholders needed
const additionalSvgs = [
  {
    name: 'matching-step.jpg', // Used in matching tab
    title: 'AI Matching Process',
    color: '#10b981'
  },
  {
    name: 'report-step.jpg', // Used in report tab
    title: 'Report Your Lost Item',
    color: '#3b82f6'
  },
  {
    name: 'recover-step.jpg', // Used in recover tab
    title: 'Recover Your Item', 
    color: '#6366f1'
  },
  {
    name: 'notify-step.jpg', // Used in recover section
    title: 'Notification System',
    color: '#f59e0b'
  }
];

// Generate wide banner placeholder
const generateWideImageSVG = (title, color) => {
  return `<svg width="1200" height="675" viewBox="0 0 1200 675" xmlns="http://www.w3.org/2000/svg">
  <defs>
    <linearGradient id="bg-gradient" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" stop-color="#0f172a" />
      <stop offset="100%" stop-color="#1e293b" />
    </linearGradient>
    <linearGradient id="overlay-gradient" x1="0%" y1="0%" x2="0%" y2="100%">
      <stop offset="0%" stop-color="rgba(15, 23, 42, 0)" />
      <stop offset="100%" stop-color="rgba(15, 23, 42, 0.8)" />
    </linearGradient>
    <pattern id="grid" width="40" height="40" patternUnits="userSpaceOnUse">
      <path d="M 40 0 L 0 0 0 40" fill="none" stroke="#94a3b8" stroke-opacity="0.1" stroke-width="1" />
    </pattern>
    <filter id="glow" x="-50%" y="-50%" width="200%" height="200%">
      <feGaussianBlur stdDeviation="10" result="blur" />
      <feComposite in="SourceGraphic" in2="blur" operator="over" />
    </filter>
  </defs>
  
  <rect width="1200" height="675" fill="url(#bg-gradient)" />
  <rect width="1200" height="675" fill="url(#grid)" />
  
  <!-- Decorative Elements -->
  <circle cx="300" cy="200" r="100" fill="${color}" opacity="0.1" filter="url(#glow)" />
  <circle cx="900" cy="500" r="150" fill="${color}" opacity="0.15" filter="url(#glow)" />
  <circle cx="600" cy="300" r="200" fill="${color}" opacity="0.05" filter="url(#glow)" />
  
  <!-- Title -->
  <rect x="0" y="475" width="1200" height="200" fill="url(#overlay-gradient)" />
  <text x="600" y="550" font-family="Arial" font-size="48" font-weight="bold" fill="white" text-anchor="middle">${title}</text>
  <text x="600" y="600" font-family="Arial" font-size="24" fill="rgba(255,255,255,0.8)" text-anchor="middle">RECOVR - AI-Powered Lost & Found</text>

  <!-- RECOVR Branding -->
  <text x="50" y="50" font-family="Arial" font-size="24" font-weight="bold" fill="${color}">RECOVR</text>
</svg>`;
};

// Create SVG files
additionalSvgs.forEach(({ name, title, color }) => {
  const filePath = path.join(publicDir, name);
  const svgContent = generateWideImageSVG(title, color);
  
  fs.writeFileSync(filePath, svgContent);
  console.log(`Created: ${name}`);
});

console.log('Additional SVG placeholders complete!'); 


===== FILE: ./scripts/download-profile-pictures.js =====
const https = require('https');
const fs = require('fs');
const path = require('path');

const publicDir = path.join(__dirname, '../public');

// Profile picture URLs from Unsplash
const profilePictures = [
  {
    name: 'user-1.jpg',
    url: 'https://images.unsplash.com/photo-1522075469751-3a6694fb2f61?q=80&w=300&auto=format&fit=crop',
    description: 'Alex Johnson profile picture'
  },
  {
    name: 'user-2.jpg',
    url: 'https://images.unsplash.com/photo-1544005313-94ddf0286df2?q=80&w=300&auto=format&fit=crop',
    description: 'Sarah Chen profile picture'
  },
  {
    name: 'user-3.jpg',
    url: 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?q=80&w=300&auto=format&fit=crop',
    description: 'Michael Rodriguez profile picture'
  },
  {
    name: 'user-4.jpg',
    url: 'https://images.unsplash.com/photo-1531123897727-8f129e1688ce?q=80&w=300&auto=format&fit=crop',
    description: 'Emily Watson profile picture'
  },
  {
    name: 'placeholder-user.jpg',
    url: 'https://images.unsplash.com/photo-1494790108377-be9c29b29330?q=80&w=300&auto=format&fit=crop',
    description: 'Placeholder user profile picture'
  }
];

// Function to download an image from URL
const downloadImage = (url, imagePath) => {
  return new Promise((resolve, reject) => {
    https.get(url, (response) => {
      if (response.statusCode !== 200) {
        reject(new Error(`Failed to download image: ${response.statusCode}`));
        return;
      }

      const fileStream = fs.createWriteStream(imagePath);
      response.pipe(fileStream);

      fileStream.on('finish', () => {
        fileStream.close();
        console.log(`Downloaded: ${imagePath}`);
        resolve();
      });

      fileStream.on('error', (err) => {
        fs.unlink(imagePath, () => {}); // Delete the file if there's an error
        reject(err);
      });

    }).on('error', (err) => {
      reject(err);
    });
  });
};

// Download all profile pictures
async function downloadProfilePictures() {
  // Create directory if it doesn't exist
  if (!fs.existsSync(publicDir)) {
    fs.mkdirSync(publicDir, { recursive: true });
  }

  console.log('Starting download of profile pictures...');
  
  for (const picture of profilePictures) {
    const imagePath = path.join(publicDir, picture.name);
    try {
      await downloadImage(picture.url, imagePath);
    } catch (error) {
      console.error(`Error downloading ${picture.name}:`, error.message);
    }
  }

  console.log('All profile pictures downloaded successfully!');
}

// Run the download
downloadProfilePictures().catch(error => {
  console.error('Error in download process:', error);
}); 


===== FILE: ./scripts/fetch-stock-images.js =====
const https = require('https');
const fs = require('fs');
const path = require('path');

const publicDir = path.join(__dirname, '../public');

// List of Unsplash image URLs relevant to lost and found theme
const images = [
  {
    name: 'hero-image.jpg',
    url: 'https://images.unsplash.com/photo-1580894732444-8ecded7900cd?q=80&w=1200&auto=format&fit=crop',
    description: 'Person holding a smartphone with AI scanning interface'
  },
  {
    name: 'report-step.jpg',
    url: 'https://images.unsplash.com/photo-1512428559087-560fa5ceab42?q=80&w=1200&auto=format&fit=crop',
    description: 'Person taking photo of lost item'
  },
  {
    name: 'matching-step.jpg',
    url: 'https://images.unsplash.com/photo-1573164713988-8665fc963095?q=80&w=1200&auto=format&fit=crop',
    description: 'AI pattern matching visualization'
  },
  {
    name: 'recover-step.jpg',
    url: 'https://images.unsplash.com/photo-1521791136064-7986c2920216?q=80&w=1200&auto=format&fit=crop',
    description: 'Two people handshaking, item recovery'
  },
  {
    name: 'report-detail.jpg',
    url: 'https://images.unsplash.com/photo-1586473219010-2ffc57b0d282?q=80&w=1200&auto=format&fit=crop',
    description: 'Close-up of filling out forms on mobile'
  },
  {
    name: 'mobile-upload.jpg',
    url: 'https://images.unsplash.com/photo-1601784551446-20c9e07cdbdb?q=80&w=1200&auto=format&fit=crop',
    description: 'Person holding mobile phone outdoors'
  },
  {
    name: 'ai-analysis.jpg',
    url: 'https://images.unsplash.com/photo-1593642632823-8f785ba67e45?q=80&w=1200&auto=format&fit=crop',
    description: 'Analytics dashboard visualization'
  },
  {
    name: 'matching-results.jpg',
    url: 'https://images.unsplash.com/photo-1581291518633-83b4ebd1d83e?q=80&w=1200&auto=format&fit=crop',
    description: 'Person looking at search results on laptop'
  },
  {
    name: 'handover.jpg',
    url: 'https://images.unsplash.com/photo-1579208570378-8c970854bc23?q=80&w=1200&auto=format&fit=crop',
    description: 'Person receiving a package'
  },
  {
    name: 'notify-step.jpg',
    url: 'https://images.unsplash.com/photo-1596558450268-9c27524ba856?q=80&w=1200&auto=format&fit=crop',
    description: 'Person receiving notification on smartphone'
  }
];

// Function to download an image from URL
const downloadImage = (url, imagePath) => {
  return new Promise((resolve, reject) => {
    https.get(url, (response) => {
      if (response.statusCode !== 200) {
        reject(new Error(`Failed to download image: ${response.statusCode}`));
        return;
      }

      const fileStream = fs.createWriteStream(imagePath);
      response.pipe(fileStream);

      fileStream.on('finish', () => {
        fileStream.close();
        console.log(`Downloaded: ${imagePath}`);
        resolve();
      });

      fileStream.on('error', (err) => {
        fs.unlink(imagePath, () => {}); // Delete the file if there's an error
        reject(err);
      });

    }).on('error', (err) => {
      reject(err);
    });
  });
};

// Download all images
async function downloadAllImages() {
  // Create directory if it doesn't exist
  if (!fs.existsSync(publicDir)) {
    fs.mkdirSync(publicDir, { recursive: true });
  }

  console.log('Starting download of stock images...');
  
  for (const image of images) {
    const imagePath = path.join(publicDir, image.name);
    try {
      await downloadImage(image.url, imagePath);
    } catch (error) {
      console.error(`Error downloading ${image.name}:`, error.message);
    }
  }

  console.log('All images downloaded successfully!');
}

// Run the download
downloadAllImages().catch(error => {
  console.error('Error in download process:', error);
}); 


===== FILE: ./scripts/generate-enhanced-placeholders.js =====
const fs = require('fs');
const path = require('path');

const publicDir = path.join(__dirname, '../public');

// SVG files with enhanced graphics
const enhancedSvgs = [
  {
    name: 'report-step.svg',
    title: 'Report Your Item',
    icon: 'camera',
    color: '#3b82f6'
  },
  {
    name: 'matching-step.svg',
    title: 'AI Matching Process',
    icon: 'search',
    color: '#10b981'
  },
  {
    name: 'recover-step.svg',
    title: 'Recover Your Item',
    icon: 'check-circle',
    color: '#6366f1'
  },
  {
    name: 'notify-step.svg',
    title: 'Notifications',
    icon: 'bell',
    color: '#f59e0b'
  },
  {
    name: 'report-detail.svg',
    title: 'Item Details Form',
    icon: 'clipboard',
    color: '#8b5cf6'
  },
  {
    name: 'mobile-upload.svg',
    title: 'Mobile Upload',
    icon: 'smartphone',
    color: '#ec4899'
  },
  {
    name: 'ai-analysis.svg',
    title: 'AI Image Analysis',
    icon: 'zap',
    color: '#06b6d4'
  },
  {
    name: 'matching-results.svg',
    title: 'Match Results',
    icon: 'layers',
    color: '#14b8a6'
  },
  {
    name: 'handover.svg',
    title: 'Safe Handover',
    icon: 'handshake',
    color: '#2dd4bf'
  }
];

// SVG icon paths
const icons = {
  camera: 'M12 15V17M6 3H18C19.1046 3 20 3.89543 20 5V19C20 20.1046 19.1046 21 18 21H6C4.89543 21 4 20.1046 4 19V5C4 3.89543 4.89543 3 6 3ZM16 11C16 13.2091 14.2091 15 12 15C9.79086 15 8 13.2091 8 11C8 8.79086 9.79086 7 12 7C14.2091 7 16 8.79086 16 11Z',
  search: 'M21 21L15 15M17 10C17 13.866 13.866 17 10 17C6.13401 17 3 13.866 3 10C3 6.13401 6.13401 3 10 3C13.866 3 17 6.13401 17 10Z',
  'check-circle': 'M9 12L11 14L15 10M21 12C21 16.9706 16.9706 21 12 21C7.02944 21 3 16.9706 3 12C3 7.02944 7.02944 3 12 3C16.9706 3 21 7.02944 21 12Z',
  bell: 'M10 15H14C14 16.6569 12.6569 18 11 18C9.34315 18 8 16.6569 8 15H10ZM18 15H6C5.44772 15 5 14.5523 5 14V13.5858C5 13.3212 5.10536 13.0679 5.29289 12.8804L6.41421 11.7591C6.78929 11.384 7 10.8755 7 10.3431V8C7 5.23858 9.23858 3 12 3C14.7614 3 17 5.23858 17 8V10.3431C17 10.8755 17.2107 11.384 17.5858 11.7591L18.7071 12.8804C18.8946 13.0679 19 13.3212 19 13.5858V14C19 14.5523 18.5523 15 18 15Z',
  clipboard: 'M9 5H7C5.89543 5 5 5.89543 5 7V19C5 20.1046 5.89543 21 7 21H17C18.1046 21 19 20.1046 19 19V7C19 5.89543 18.1046 5 17 5H15M9 5C9 6.10457 9.89543 7 11 7H13C14.1046 7 15 6.10457 15 5M9 5C9 3.89543 9.89543 3 11 3H13C14.1046 3 15 3.89543 15 5M12 12H15M12 16H15M9 12H9.01M9 16H9.01',
  smartphone: 'M12 18H12.01M8 21H16C17.1046 21 18 20.1046 18 19V5C18 3.89543 17.1046 3 16 3H8C6.89543 3 6 3.89543 6 5V19C6 20.1046 6.89543 21 8 21Z',
  zap: 'M13 10V3L4 14H11L11 21L20 10L13 10Z',
  layers: 'M19 11L12 16.5L5 11M19 5L12 10.5L5 5',
  handshake: 'M9 15L5 11M9 15L11.5 17.5M9 15L5.5 17.5M15 15L19 11M15 15L12.5 17.5M15 15L18.5 17.5M5 5V6C5 7.10457 5.89543 8 7 8H17C18.1046 8 19 7.10457 19 6V5M12 8V13'
};

// Generate enhanced SVG with icon and title
const generateEnhancedSVG = (title, icon, color) => {
  const iconPath = icons[icon] || icons.camera;
  const gradient = `${color}66`;
  
  return `<svg width="800" height="450" viewBox="0 0 800 450" xmlns="http://www.w3.org/2000/svg">
  <defs>
    <linearGradient id="bg" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" stop-color="#0f172a" />
      <stop offset="100%" stop-color="#1e293b" />
    </linearGradient>
    <linearGradient id="card-gradient" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" stop-color="#1e293b" />
      <stop offset="100%" stop-color="#334155" />
    </linearGradient>
    <pattern id="grid" width="30" height="30" patternUnits="userSpaceOnUse">
      <path d="M 30 0 L 0 0 0 30" fill="none" stroke="#94a3b8" stroke-opacity="0.1" stroke-width="1" />
    </pattern>
    <radialGradient id="icon-bg" cx="50%" cy="50%" r="50%" fx="50%" fy="50%">
      <stop offset="0%" stop-color="${gradient}" />
      <stop offset="100%" stop-color="${color}00" />
    </radialGradient>
    <filter id="shadow" x="-20%" y="-20%" width="140%" height="140%">
      <feDropShadow dx="0" dy="4" stdDeviation="8" flood-color="#000" flood-opacity="0.3" />
    </filter>
  </defs>
  
  <rect width="800" height="450" fill="url(#bg)" />
  <rect width="800" height="450" fill="url(#grid)" />
  
  <g filter="url(#shadow)">
    <rect x="150" y="100" width="500" height="250" rx="16" fill="url(#card-gradient)" />
  </g>
  
  <circle cx="400" cy="200" r="80" fill="url(#icon-bg)" opacity="0.3" />
  <g transform="translate(400, 200) scale(6)">
    <path d="${iconPath}" fill="none" stroke="${color}" stroke-width="0.8" stroke-linecap="round" stroke-linejoin="round" transform="translate(-12, -12)" />
  </g>
  
  <rect x="200" y="320" width="400" height="50" rx="8" fill="#1e293b" />
  <text x="400" y="355" font-family="Arial" font-size="24" fill="#f8fafc" text-anchor="middle">${title}</text>
  
  <!-- RECOVR branding -->
  <text x="400" y="40" font-family="Arial" font-size="24" font-weight="bold" text-anchor="middle" fill="${color}">RECOVR</text>
</svg>`;
};

// Create SVG files
enhancedSvgs.forEach(({ name, title, icon, color }) => {
  const filePath = path.join(publicDir, name);
  const svgContent = generateEnhancedSVG(title, icon, color);
  
  fs.writeFileSync(filePath, svgContent);
  console.log(`Created: ${name}`);
});

// Also create a logo.svg file
const logoSVG = `<svg width="140" height="40" viewBox="0 0 140 40" xmlns="http://www.w3.org/2000/svg">
  <defs>
    <linearGradient id="logo-gradient" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" stop-color="#3b82f6" />
      <stop offset="100%" stop-color="#0ea5e9" />
    </linearGradient>
  </defs>
  <rect x="0" y="8" width="24" height="24" rx="8" fill="url(#logo-gradient)" />
  <path d="M5 20L9 24L19 14" stroke="white" stroke-width="3" stroke-linecap="round" stroke-linejoin="round" />
  <text x="34" y="28" font-family="Arial" font-size="20" font-weight="bold" fill="#0f172a">RECOVR</text>
</svg>`;

fs.writeFileSync(path.join(publicDir, 'logo.svg'), logoSVG);
console.log('Created: logo.svg');

console.log('Enhanced SVG placeholder generation complete!'); 


===== FILE: ./scripts/generate-placeholder-svgs.js =====
const fs = require('fs');
const path = require('path');

const publicDir = path.join(__dirname, '../public');

// List of SVG files to be created
const svgFiles = [
  'report-step.svg', 
  'matching-step.svg', 
  'recover-step.svg', 
  'notify-step.svg',
  'report-detail.svg',
  'mobile-upload.svg',
  'ai-analysis.svg',
  'matching-results.svg',
  'handover.svg'
];

// Basic template for placeholder SVG
const generatePlaceholderSVG = (title) => `
<svg width="800" height="450" viewBox="0 0 800 450" xmlns="http://www.w3.org/2000/svg">
  <rect width="800" height="450" fill="#0f172a"/>
  <rect x="0" y="0" width="800" height="450" fill="url(#grid)" opacity="0.1"/>
  
  <!-- Grid pattern -->
  <defs>
    <pattern id="grid" width="20" height="20" patternUnits="userSpaceOnUse">
      <path d="M 20 0 L 0 0 0 20" fill="none" stroke="#f8fafc" stroke-width="0.5" />
    </pattern>
  </defs>
  
  <!-- Text Labels -->
  <rect x="200" y="175" width="400" height="100" rx="8" fill="#1e293b"/>
  <text x="400" y="235" font-family="Arial" font-size="24" fill="#f8fafc" text-anchor="middle">${title}</text>
</svg>
`;

// Create SVG files
svgFiles.forEach(filename => {
  const filePath = path.join(publicDir, filename);
  const title = filename.replace('.svg', '').replace(/-/g, ' ').replace(/^\w/, c => c.toUpperCase());
  
  fs.writeFileSync(filePath, generatePlaceholderSVG(title));
  console.log(`Created: ${filename}`);
});

console.log('SVG placeholder generation complete!'); 


===== FILE: ./spring-backend-jdbc/src/main/java/com/recovr/jdbcbackend/JdbcBackendApplication.java =====
 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/config/OpenApiConfig.java =====
package com.recovr.api.config;

import io.swagger.v3.oas.models.OpenAPI;
import io.swagger.v3.oas.models.info.Info;
import io.swagger.v3.oas.models.info.License;
import io.swagger.v3.oas.models.Components;
import io.swagger.v3.oas.models.security.SecurityScheme;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class OpenApiConfig {

    @Bean
    public OpenAPI customOpenAPI() {
        return new OpenAPI()
                .info(new Info()
                        .title("RECOVR API")
                        .version("1.0")
                        .description("API for the RECOVR Lost & Found Management System")
                        .license(new License().name("Apache 2.0").url("http://springdoc.org")))
                .components(new Components()
                        .addSecuritySchemes("bearerAuth",
                                new SecurityScheme()
                                        .type(SecurityScheme.Type.HTTP)
                                        .scheme("bearer")));
    }
} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/config/SecurityConfig.java =====
package com.recovr.api.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.config.http.SessionCreationPolicy;

@Configuration
@EnableWebSecurity
public class SecurityConfig {

    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http.csrf(csrf -> csrf.disable())
            .authorizeHttpRequests(auth -> auth
                .requestMatchers(org.springframework.http.HttpMethod.POST, "/api/items").permitAll()
                .anyRequest().authenticated()
            );
        return http.build();
    }
} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/config/WebConfig.java =====
package com.recovr.api.config;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.CorsRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

@Configuration
public class WebConfig implements WebMvcConfigurer {

    @Value("${cors.allowed-origins}")
    private String allowedOrigins;

    @Value("${cors.allowed-methods}")
    private String allowedMethods;

    @Value("${cors.allowed-headers}")
    private String allowedHeaders;

    @Value("${cors.exposed-headers}")
    private String exposedHeaders;

    @Override
    public void addCorsMappings(CorsRegistry registry) {
        registry.addMapping("/**")
                .allowedOriginPatterns(allowedOrigins.split(","))
                .allowedMethods(allowedMethods.split(","))
                .allowedHeaders(allowedHeaders.split(","))
                .exposedHeaders(exposedHeaders.split(","))
                .allowCredentials(true)
                .maxAge(3600);
    }
} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/controller/AdminController.java =====
package com.recovr.api.controller;

import com.recovr.api.dto.AdminDashboardDto;
import com.recovr.api.dto.ItemDto;
import com.recovr.api.dto.UserDto;
import com.recovr.api.service.AdminService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/admin")
@Tag(name = "Admin", description = "Admin dashboard endpoints")
public class AdminController {

    @Autowired
    private AdminService adminService;

    @GetMapping("/dashboard")
    @Operation(summary = "Get admin dashboard statistics", description = "Returns statistics for the admin dashboard.")
    public ResponseEntity<AdminDashboardDto> getAdminDashboard() {
        AdminDashboardDto dashboard = adminService.getAdminDashboard();
        return ResponseEntity.ok(dashboard);
    }

    @GetMapping("/items")
    @Operation(summary = "Get all items (admin)", description = "Retrieves the list of all items for administration.")
    public ResponseEntity<List<ItemDto>> getAllItemsAdmin() {
        List<ItemDto> items = adminService.getAllItemsAdmin();
        return ResponseEntity.ok(items);
    }

    @GetMapping("/users")
    @Operation(summary = "Get all users (admin)", description = "Retrieves the list of all users for administration.")
    public ResponseEntity<List<UserDto>> getAllUsersAdmin() {
        List<UserDto> users = adminService.getAllUsersAdmin();
        return ResponseEntity.ok(users);
    }

    @DeleteMapping("/items/{id}")
    @Operation(summary = "Delete an item (admin)", description = "Deletes an item by its ID for administration.")
    public ResponseEntity<Void> deleteItemAdmin(@PathVariable Long id) {
        adminService.deleteItemAdmin(id);
        return ResponseEntity.noContent().build();
    }

    @DeleteMapping("/users/{id}")
    @Operation(summary = "Delete a user (admin)", description = "Deletes a user by its ID for administration.")
    public ResponseEntity<Void> deleteUserAdmin(@PathVariable Long id) {
        adminService.deleteUserAdmin(id);
        return ResponseEntity.noContent().build();
    }

    @PutMapping("/items/{id}")
    @Operation(summary = "Update an item (admin)", description = "Updates an item by its ID for administration.")
    public ResponseEntity<ItemDto> updateItemAdmin(@PathVariable Long id, @RequestBody ItemDto itemDto) {
        ItemDto updated = adminService.updateItemAdmin(id, itemDto);
        return ResponseEntity.ok(updated);
    }

    @PutMapping("/users/{id}")
    @Operation(summary = "Update a user (admin)", description = "Updates a user by its ID for administration.")
    public ResponseEntity<UserDto> updateUserAdmin(@PathVariable Long id, @RequestBody UserDto userDto) {
        UserDto updated = adminService.updateUserAdmin(id, userDto);
        return ResponseEntity.ok(updated);
    }
}


===== FILE: ./spring-backend/src/main/java/com/recovr/api/controller/AuthController.java =====
package com.recovr.api.controller;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/auth")
public class AuthController {
    @PostMapping("/login")
    public ResponseEntity<String> login() {
        // Dummy login endpoint for now
        return ResponseEntity.ok("Login successful (JWT disabled)");
    }
} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/controller/ClaimRequestController.java =====
package com.recovr.api.controller;

import com.recovr.api.dto.ClaimRequestDto;
import com.recovr.api.entity.ClaimRequest;
import com.recovr.api.entity.ClaimStatus;
import com.recovr.api.entity.Item;
import com.recovr.api.entity.ItemStatus;
import com.recovr.api.entity.User;
import com.recovr.api.repository.ClaimRequestRepository;
import com.recovr.api.repository.ItemRepository;
import com.recovr.api.repository.UserRepository;
import com.recovr.api.security.services.UserDetailsImpl;
import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

@CrossOrigin(origins = "*", maxAge = 3600)
@RestController
@RequestMapping("/api/claims")
public class ClaimRequestController {
    @Autowired
    private ClaimRequestRepository claimRequestRepository;

    @Autowired
    private ItemRepository itemRepository;

    @Autowired
    private UserRepository userRepository;

    @GetMapping
    @PreAuthorize("hasRole('USER') or hasRole('ADMIN')")
    public ResponseEntity<?> getUserClaimRequests(
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "10") int size,
            @RequestParam(required = false) ClaimStatus status) {
        try {
            Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
            UserDetailsImpl userDetails = (UserDetailsImpl) authentication.getPrincipal();
            
            User user = userRepository.findById(userDetails.getId())
                    .orElseThrow(() -> new RuntimeException("User not found"));
            
            Pageable paging = PageRequest.of(page, size, Sort.by("createdAt").descending());
            Page<ClaimRequest> pageRequests;
            
            if (status != null) {
                pageRequests = claimRequestRepository.findByUserAndStatus(user, status, paging);
            } else {
                pageRequests = claimRequestRepository.findByUser(user, paging);
            }
            
            List<ClaimRequestDto> claims = pageRequests.getContent().stream()
                    .map(this::convertToDto)
                    .collect(Collectors.toList());

            Map<String, Object> response = new HashMap<>();
            response.put("claims", claims);
            response.put("currentPage", pageRequests.getNumber());
            response.put("totalItems", pageRequests.getTotalElements());
            response.put("totalPages", pageRequests.getTotalPages());

            return new ResponseEntity<>(response, HttpStatus.OK);
        } catch (Exception e) {
            return new ResponseEntity<>(e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    @GetMapping("/item/{itemId}")
    @PreAuthorize("hasRole('USER') or hasRole('ADMIN')")
    public ResponseEntity<?> getClaimRequestsByItem(
            @PathVariable("itemId") long itemId,
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "10") int size,
            @RequestParam(required = false) ClaimStatus status) {
        try {
            Item item = itemRepository.findById(itemId)
                    .orElseThrow(() -> new RuntimeException("Item not found"));
            
            Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
            UserDetailsImpl userDetails = (UserDetailsImpl) authentication.getPrincipal();
            
            // Only the item owner or admin can see claims
            if (!item.getReportedBy().getId().equals(userDetails.getId()) && 
                    !authentication.getAuthorities().stream()
                    .anyMatch(a -> a.getAuthority().equals("ROLE_ADMIN"))) {
                return new ResponseEntity<>("You are not authorized to view these claims", HttpStatus.FORBIDDEN);
            }
            
            Pageable paging = PageRequest.of(page, size, Sort.by("createdAt").descending());
            Page<ClaimRequest> pageRequests;
            
            if (status != null) {
                pageRequests = claimRequestRepository.findByItemAndStatus(item, status, paging);
            } else {
                pageRequests = claimRequestRepository.findAll(paging);
            }
            
            List<ClaimRequestDto> claims = pageRequests.getContent().stream()
                    .map(this::convertToDto)
                    .collect(Collectors.toList());

            Map<String, Object> response = new HashMap<>();
            response.put("claims", claims);
            response.put("currentPage", pageRequests.getNumber());
            response.put("totalItems", pageRequests.getTotalElements());
            response.put("totalPages", pageRequests.getTotalPages());

            return new ResponseEntity<>(response, HttpStatus.OK);
        } catch (Exception e) {
            return new ResponseEntity<>(e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    @PostMapping
    @PreAuthorize("hasRole('USER') or hasRole('ADMIN')")
    public ResponseEntity<?> createClaimRequest(@Valid @RequestBody ClaimRequestDto claimRequestDto) {
        try {
            Item item = itemRepository.findById(claimRequestDto.getItemId())
                    .orElseThrow(() -> new RuntimeException("Item not found"));
            
            Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
            UserDetailsImpl userDetails = (UserDetailsImpl) authentication.getPrincipal();
            
            User user = userRepository.findById(userDetails.getId())
                    .orElseThrow(() -> new RuntimeException("User not found"));
            
            // Check if the user has already claimed this item
            if (claimRequestRepository.existsByItemAndUser(item, user)) {
                return new ResponseEntity<>("You have already submitted a claim for this item", HttpStatus.BAD_REQUEST);
            }
            
            // Check if user is trying to claim their own item
            if (item.getReportedBy().getId().equals(user.getId())) {
                return new ResponseEntity<>("You cannot claim your own item", HttpStatus.BAD_REQUEST);
            }
            
            ClaimRequest claimRequest = new ClaimRequest();
            claimRequest.setItem(item);
            claimRequest.setUser(user);
            claimRequest.setClaimMessage(claimRequestDto.getClaimMessage());
            claimRequest.setContactInfo(claimRequestDto.getContactInfo());
            claimRequest.setStatus(ClaimStatus.PENDING);
            
            ClaimRequest savedRequest = claimRequestRepository.save(claimRequest);
            
            return new ResponseEntity<>(convertToDto(savedRequest), HttpStatus.CREATED);
        } catch (Exception e) {
            return new ResponseEntity<>(e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    @PutMapping("/{id}")
    @PreAuthorize("hasRole('USER') or hasRole('ADMIN')")
    public ResponseEntity<?> updateClaimRequestStatus(
            @PathVariable("id") long id,
            @RequestParam ClaimStatus status) {
        try {
            ClaimRequest claimRequest = claimRequestRepository.findById(id)
                    .orElseThrow(() -> new RuntimeException("Claim request not found"));
            
            Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
            UserDetailsImpl userDetails = (UserDetailsImpl) authentication.getPrincipal();
            
            // For CANCELLED status, only the claim owner can cancel it
            if (status == ClaimStatus.CANCELLED) {
                if (!claimRequest.getUser().getId().equals(userDetails.getId())) {
                    return new ResponseEntity<>("You are not authorized to cancel this claim", HttpStatus.FORBIDDEN);
                }
            } 
            // For other statuses, only the item owner or admin can update them
            else if (!claimRequest.getItem().getReportedBy().getId().equals(userDetails.getId()) && 
                    !authentication.getAuthorities().stream()
                    .anyMatch(a -> a.getAuthority().equals("ROLE_ADMIN"))) {
                return new ResponseEntity<>("You are not authorized to update this claim", HttpStatus.FORBIDDEN);
            }
            
            claimRequest.setStatus(status);
            
            // If status is APPROVED, update the item as claimed
            if (status == ClaimStatus.APPROVED) {
                Item item = claimRequest.getItem();
                item.setStatus(ItemStatus.CLAIMED);
                item.setClaimedBy(claimRequest.getUser());
                item.setClaimedAt(LocalDateTime.now());
                itemRepository.save(item);
            }
            
            ClaimRequest updatedRequest = claimRequestRepository.save(claimRequest);
            
            return new ResponseEntity<>(convertToDto(updatedRequest), HttpStatus.OK);
        } catch (Exception e) {
            return new ResponseEntity<>(e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    private ClaimRequestDto convertToDto(ClaimRequest claimRequest) {
        ClaimRequestDto dto = new ClaimRequestDto();
        dto.setId(claimRequest.getId());
        dto.setItemId(claimRequest.getItem().getId());
        dto.setItemName(claimRequest.getItem().getName());
        dto.setUserId(claimRequest.getUser().getId());
        dto.setUsername(claimRequest.getUser().getUsername());
        dto.setClaimMessage(claimRequest.getClaimMessage());
        dto.setContactInfo(claimRequest.getContactInfo());
        dto.setStatus(claimRequest.getStatus());
        dto.setCreatedAt(claimRequest.getCreatedAt());
        dto.setUpdatedAt(claimRequest.getUpdatedAt());
        
        return dto;
    }
} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/controller/DetectionController.java =====
package com.recovr.api.controller;

import com.recovr.api.dto.DetectedObjectDto;
import com.recovr.api.entity.DetectionSession;
import com.recovr.api.entity.DetectionStatus;
import com.recovr.api.entity.ItemCategory;
import com.recovr.api.service.DetectionService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Map;

@Slf4j
@RestController
@RequestMapping("/api/detection")
@RequiredArgsConstructor
@CrossOrigin(origins = "*", maxAge = 3600)
@Tag(name = "Detection", description = "Detection API for managing object detection sessions and results")
public class DetectionController {

    private final DetectionService detectionService;

    /**
     * Start a new detection session
     * POST /api/detection/sessions/start
     */
    @PostMapping("/sessions/start")
    @Operation(
        summary = "Start a new detection session",
        description = "Creates a new detection session for a camera"
    )
    @ApiResponses(value = {
        @ApiResponse(
            responseCode = "200",
            description = "Detection session started successfully",
            content = @Content(schema = @Schema(implementation = DetectionSession.class))
        ),
        @ApiResponse(responseCode = "400", description = "Invalid request parameters"),
        @ApiResponse(responseCode = "500", description = "Internal server error")
    })
    public ResponseEntity<DetectionSession> startDetectionSession(
            @RequestParam String cameraId,
            @RequestParam String cameraLocation,
            @RequestParam(defaultValue = "stable_model_epoch_30") String modelVersion) {

        log.info("Starting detection session for camera: {} at location: {}", cameraId, cameraLocation);
        
        try {
            DetectionSession session = detectionService.startDetectionSession(cameraId, cameraLocation, modelVersion);
            return ResponseEntity.ok(session);
        } catch (Exception e) {
            log.error("Error starting detection session", e);
            return ResponseEntity.badRequest().build();
        }
    }

    /**
     * End a detection session
     * POST /api/detection/sessions/{sessionId}/end
     */
    @PostMapping("/sessions/{sessionId}/end")
    @Operation(
        summary = "End a detection session",
        description = "Ends an active detection session and processes its results"
    )
    public ResponseEntity<Void> endDetectionSession(@PathVariable String sessionId) {
        
        log.info("Ending detection session: {}", sessionId);
        try {
            detectionService.endDetectionSession(sessionId);
            return ResponseEntity.ok().build();
        } catch (Exception e) {
            log.error("Error ending detection session", e);
            return ResponseEntity.badRequest().build();
        }
    }

    /**
     * Process detection result from PyTorch model
     * POST /api/detection/process
     * 
     * This endpoint will be called by your Python detection service
     */
    @PostMapping("/process")
    @Operation(
        summary = "Process detection results",
        description = "Processes the detection results for a session and updates the database"
    )
    @ApiResponses(value = {
        @ApiResponse(
            responseCode = "200",
            description = "Detection results processed successfully",
            content = @Content(schema = @Schema(implementation = Map.class))
        ),
        @ApiResponse(responseCode = "404", description = "Detection session not found"),
        @ApiResponse(responseCode = "400", description = "Invalid request data"),
        @ApiResponse(responseCode = "500", description = "Internal server error")
    })
    public ResponseEntity<Map<String, Object>> processDetection(
            @RequestBody Map<String, Object> detectionData) {
        
        try {
            log.info("Processing detection data: {}", detectionData);
            
            // Validate required fields
            String sessionId = (String) detectionData.get("sessionId");
            String trackingId = (String) detectionData.get("trackingId");
            String categoryStr = (String) detectionData.get("category");
            Object confidenceObj = detectionData.get("confidence");
            Object xObj = detectionData.get("x");
            Object yObj = detectionData.get("y");
            Object widthObj = detectionData.get("width");
            Object heightObj = detectionData.get("height");
            String snapshotUrl = (String) detectionData.get("snapshotUrl");

            if (sessionId == null || trackingId == null || categoryStr == null || 
                confidenceObj == null || xObj == null || yObj == null || 
                widthObj == null || heightObj == null) {
                return ResponseEntity.badRequest().body(Map.of(
                    "status", "error",
                    "message", "Missing required fields"
                ));
            }

            // Convert and validate data types
            Double confidence = convertToDouble(confidenceObj);
            Integer x = convertToInteger(xObj);
            Integer y = convertToInteger(yObj);
            Integer width = convertToInteger(widthObj);
            Integer height = convertToInteger(heightObj);

            if (confidence == null || x == null || y == null || width == null || height == null) {
                return ResponseEntity.badRequest().body(Map.of(
                    "status", "error",
                    "message", "Invalid data types for numeric fields"
                ));
            }

            // Convert category string to enum
            ItemCategory category;
            try {
                category = ItemCategory.valueOf(categoryStr.toUpperCase());
            } catch (IllegalArgumentException e) {
                log.warn("Unknown category: {}, defaulting to MISCELLANEOUS", categoryStr);
                category = ItemCategory.MISCELLANEOUS;
            }

            // Process the detection
            detectionService.processDetection(sessionId, trackingId, category, confidence, 
                    x, y, width, height, snapshotUrl);

            return ResponseEntity.ok(Map.of(
                "status", "success",
                "message", "Detection processed successfully",
                "trackingId", trackingId
            ));

        } catch (Exception e) {
            log.error("Error processing detection", e);
            return ResponseEntity.badRequest().body(Map.of(
                "status", "error",
                "message", "Failed to process detection: " + e.getMessage()
            ));
        }
    }

    private Double convertToDouble(Object obj) {
        if (obj == null) return null;
        if (obj instanceof Double) return (Double) obj;
        if (obj instanceof Number) return ((Number) obj).doubleValue();
        try {
            return Double.parseDouble(obj.toString());
        } catch (NumberFormatException e) {
            return null;
        }
    }

    private Integer convertToInteger(Object obj) {
        if (obj == null) return null;
        if (obj instanceof Integer) return (Integer) obj;
        if (obj instanceof Number) return ((Number) obj).intValue();
        try {
            return Integer.parseInt(obj.toString());
        } catch (NumberFormatException e) {
            return null;
        }
    }

    /**
     * Get all abandoned objects (potential lost items)
     * GET /api/detection/abandoned
     */
    @GetMapping("/abandoned")
    @Operation(
        summary = "Get abandoned objects",
        description = "Retrieves a list of objects that have been detected as abandoned"
    )
    public ResponseEntity<List<DetectedObjectDto>> getAbandonedObjects() {
        try {
            List<DetectedObjectDto> abandonedObjects = detectionService.getAbandonedObjects();
            return ResponseEntity.ok(abandonedObjects);
        } catch (Exception e) {
            log.error("Error getting abandoned objects", e);
            return ResponseEntity.badRequest().build();
        }
    }

    /**
     * Get recent detections
     * GET /api/detection/recent
     */
    @GetMapping("/recent")
    @Operation(
        summary = "Get recent detections",
        description = "Retrieves a list of recent object detections"
    )
    public ResponseEntity<List<DetectedObjectDto>> getRecentDetections(
            @RequestParam(defaultValue = "24") int hoursBack) {
        
        try {
            List<DetectedObjectDto> recentDetections = detectionService.getRecentDetections(hoursBack);
            return ResponseEntity.ok(recentDetections);
        } catch (Exception e) {
            log.error("Error getting recent detections", e);
            return ResponseEntity.badRequest().build();
        }
    }

    /**
     * Link detected object to a reported item
     * POST /api/detection/{detectedObjectId}/link/{itemId}
     */
    @PostMapping("/{detectedObjectId}/link/{itemId}")
    @PreAuthorize("hasRole('USER') or hasRole('ADMIN')")
    public ResponseEntity<Map<String, String>> linkDetectedObjectToItem(
            @PathVariable Long detectedObjectId,
            @PathVariable Long itemId) {
        
        try {
            detectionService.linkDetectedObjectToItem(detectedObjectId, itemId);
            return ResponseEntity.ok(Map.of(
                "status", "success",
                "message", "Detected object linked to item successfully"
            ));
        } catch (Exception e) {
            log.error("Error linking detected object to item", e);
            return ResponseEntity.badRequest().body(Map.of(
                "status", "error",
                "message", "Failed to link objects: " + e.getMessage()
            ));
        }
    }

    /**
     * Get detection statistics
     * GET /api/detection/stats
     */
    @GetMapping("/stats")
    @Operation(
        summary = "Get detection statistics",
        description = "Retrieves statistics about object detections"
    )
    public ResponseEntity<Map<String, Object>> getDetectionStats() {
        try {
            Map<String, Object> stats = detectionService.getDetectionStats();
            return ResponseEntity.ok(stats);
        } catch (Exception e) {
            log.error("Error getting detection statistics", e);
            return ResponseEntity.badRequest().body(Map.of(
                "status", "error",
                "message", "Failed to get detection statistics: " + e.getMessage()
            ));
        }
    }

    /**
     * Health check endpoint for the detection system
     */
    @GetMapping("/health")
    @Operation(summary = "Health check for detection system")
    public ResponseEntity<Map<String, Object>> healthCheck() {
        return ResponseEntity.ok(Map.of(
            "status", "healthy",
            "timestamp", System.currentTimeMillis(),
            "service", "detection"
        ));
    }
}


===== FILE: ./spring-backend/src/main/java/com/recovr/api/controller/FileController.java =====
package com.recovr.api.controller;

import com.recovr.api.service.FileStorageService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.Resource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import jakarta.servlet.http.HttpServletRequest;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

@CrossOrigin(origins = "*", maxAge = 3600)
@RestController
@RequestMapping("/api/files")
public class FileController {

    @Autowired
    private FileStorageService fileStorageService;

    @PostMapping("/upload")
    @PreAuthorize("hasRole('USER') or hasRole('ADMIN')")
    public ResponseEntity<?> uploadFile(@RequestParam("file") MultipartFile file) {
        String fileName = fileStorageService.storeFile(file);

        String fileDownloadUri = ServletUriComponentsBuilder.fromCurrentContextPath()
                .path("/api/files/")
                .path(fileName)
                .toUriString();

        return ResponseEntity.ok(fileDownloadUri);
    }

    @PostMapping("/upload-multiple")
    @PreAuthorize("hasRole('USER') or hasRole('ADMIN')")
    public ResponseEntity<?> uploadMultipleFiles(@RequestParam("files") MultipartFile[] files) {
        List<String> fileDownloadUrls = Arrays.stream(files)
                .map(file -> {
                    String fileName = fileStorageService.storeFile(file);
                    return ServletUriComponentsBuilder.fromCurrentContextPath()
                            .path("/api/files/")
                            .path(fileName)
                            .toUriString();
                })
                .collect(Collectors.toList());

        return ResponseEntity.ok(fileDownloadUrls);
    }

    @GetMapping("/{fileName:.+}")
    public ResponseEntity<Resource> downloadFile(@PathVariable String fileName, HttpServletRequest request) {
        // Load file as Resource
        Resource resource = fileStorageService.loadFileAsResource(fileName);

        // Try to determine file's content type
        String contentType = null;
        try {
            contentType = request.getServletContext().getMimeType(resource.getFile().getAbsolutePath());
        } catch (IOException ex) {
            // Logger would be used here in a production app
        }

        // Fallback to the default content type if type could not be determined
        if (contentType == null) {
            contentType = "application/octet-stream";
        }

        return ResponseEntity.ok()
                .contentType(MediaType.parseMediaType(contentType))
                .header(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=\"" + resource.getFilename() + "\"")
                .body(resource);
    }

    @DeleteMapping("/{fileName:.+}")
    @PreAuthorize("hasRole('USER') or hasRole('ADMIN')")
    public ResponseEntity<?> deleteFile(@PathVariable String fileName) {
        fileStorageService.deleteFile(fileName);
        return ResponseEntity.ok("File deleted successfully");
    }
} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/controller/ItemController.java =====
package com.recovr.api.controller;

import com.recovr.api.dto.ItemDto;
import com.recovr.api.entity.Item;
import com.recovr.api.entity.User;
import com.recovr.api.exception.ResourceNotFoundException;
import com.recovr.api.repository.UserRepository;
import com.recovr.api.security.services.UserDetailsImpl;
import com.recovr.api.service.ItemService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.bind.annotation.*;

import jakarta.validation.Valid;
import java.util.HashMap;
import java.util.Map;

@RestController
@RequestMapping("/api/items")
public class ItemController {
    private static final Logger log = LoggerFactory.getLogger(ItemController.class);

    @Autowired
    private ItemService itemService;

    @Autowired
    private UserRepository userRepository;

    @GetMapping
    public ResponseEntity<?> getAllItems(
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "10") int size,
            @RequestParam(required = false) String category,
            @RequestParam(required = false) String status) {
        try {
            Pageable paging = PageRequest.of(page, size, Sort.by("createdAt").descending());
            Page<ItemDto> pageItems = itemService.getAllItems(paging, category, status);

            Map<String, Object> response = new HashMap<>();
            response.put("items", pageItems.getContent());
            response.put("currentPage", pageItems.getNumber());
            response.put("totalItems", pageItems.getTotalElements());
            response.put("totalPages", pageItems.getTotalPages());

            return new ResponseEntity<>(response, HttpStatus.OK);
        } catch (Exception e) {
            return new ResponseEntity<>(e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    @GetMapping("/{id}")
    public ResponseEntity<?> getItemById(@PathVariable Long id) {
        try {
            ItemDto item = itemService.getItemById(id);
            return new ResponseEntity<>(item, HttpStatus.OK);
        } catch (ResourceNotFoundException e) {
            return new ResponseEntity<>(e.getMessage(), HttpStatus.NOT_FOUND);
        } catch (Exception e) {
            return new ResponseEntity<>(e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    @PostMapping
    public ResponseEntity<?> createItem(@Valid @RequestBody ItemDto itemDto) {
        log.info("Received POST /api/items request body: {}", itemDto);
        try {
            Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
            User user = null;
            if (authentication != null && authentication.isAuthenticated() && !(authentication.getPrincipal() instanceof String)) {
                UserDetailsImpl userDetails = (UserDetailsImpl) authentication.getPrincipal();
                user = userRepository.findById(userDetails.getId())
                        .orElse(null);
            }
            if (user == null) {
                log.info("Creating item anonymously (no authenticated user)");
            }
            ItemDto createdItem = itemService.createItem(itemDto, user);
            return new ResponseEntity<>(createdItem, HttpStatus.CREATED);
        } catch (Exception e) {
            log.error("Error in createItem: ", e);
            return new ResponseEntity<>(e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    @PutMapping("/{id}")
    @PreAuthorize("hasRole('USER') or hasRole('ADMIN')")
    public ResponseEntity<?> updateItem(
            @PathVariable Long id,
            @Valid @RequestBody ItemDto itemDto) {
        try {
            ItemDto updatedItem = itemService.updateItem(id, itemDto);
            return new ResponseEntity<>(updatedItem, HttpStatus.OK);
        } catch (ResourceNotFoundException e) {
            return new ResponseEntity<>(e.getMessage(), HttpStatus.NOT_FOUND);
        } catch (Exception e) {
            return new ResponseEntity<>(e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    @DeleteMapping("/{id}")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<?> deleteItem(@PathVariable Long id) {
        try {
            itemService.deleteItem(id);
            return new ResponseEntity<>(HttpStatus.NO_CONTENT);
        } catch (ResourceNotFoundException e) {
            return new ResponseEntity<>(e.getMessage(), HttpStatus.NOT_FOUND);
        } catch (Exception e) {
            return new ResponseEntity<>(e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    @PostMapping("/{id}/claim")
    @PreAuthorize("hasRole('USER') or hasRole('ADMIN')")
    public ResponseEntity<?> claimItem(@PathVariable Long id) {
        try {
            Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
            UserDetailsImpl userDetails = (UserDetailsImpl) authentication.getPrincipal();
            
            User user = userRepository.findById(userDetails.getId())
                    .orElseThrow(() -> new ResourceNotFoundException("User not found"));
            
            ItemDto claimedItem = itemService.claimItem(id, user);
            return new ResponseEntity<>(claimedItem, HttpStatus.OK);
        } catch (ResourceNotFoundException e) {
            return new ResponseEntity<>(e.getMessage(), HttpStatus.NOT_FOUND);
        } catch (IllegalStateException e) {
            return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
        } catch (Exception e) {
            return new ResponseEntity<>(e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }
} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/controller/SearchController.java =====
package com.recovr.api.controller;

import com.recovr.api.dto.SearchRequestDto;
import com.recovr.api.dto.ImageMatchingDto;
import com.recovr.api.service.SearchService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.web.bind.annotation.*;

import jakarta.validation.Valid;
import java.util.List;
import java.util.Map;

@Slf4j
@RestController
@RequestMapping("/api/search")
@RequiredArgsConstructor
@CrossOrigin(origins = "*", maxAge = 3600)
@Tag(name = "Search", description = "Search API for lost items")
@SecurityRequirement(name = "bearerAuth")
public class SearchController {

    private final SearchService searchService;

    /**
     * Create a new search request (POST /search_request)
     * Upload photo for matching as specified in project requirements
     */
    @PostMapping
    @Operation(
        summary = "Create a new search request",
        description = "Creates a new search request for finding lost items using image or text search"
    )
    @ApiResponses(value = {
        @ApiResponse(
            responseCode = "200",
            description = "Search request created successfully",
            content = @Content(schema = @Schema(implementation = SearchRequestDto.class))
        ),
        @ApiResponse(responseCode = "400", description = "Invalid request parameters"),
        @ApiResponse(responseCode = "401", description = "Unauthorized"),
        @ApiResponse(responseCode = "500", description = "Internal server error")
    })
    public ResponseEntity<SearchRequestDto> createSearchRequest(
        @RequestBody SearchRequestDto request,
        @Parameter(description = "Authenticated user") @AuthenticationPrincipal UserDetails userDetails
    ) {
        return ResponseEntity.ok(searchService.createSearchRequest(request, userDetails.getUsername()));
    }

    /**
     * Get search results for a search request
     * GET /api/search/results/{searchRequestId}
     */
    @GetMapping("/{searchRequestId}")
    @Operation(
        summary = "Get search results",
        description = "Retrieves the results of a search request by its ID"
    )
    @ApiResponses(value = {
        @ApiResponse(
            responseCode = "200",
            description = "Search results retrieved successfully",
            content = @Content(schema = @Schema(implementation = SearchRequestDto.class))
        ),
        @ApiResponse(responseCode = "404", description = "Search request not found"),
        @ApiResponse(responseCode = "401", description = "Unauthorized"),
        @ApiResponse(responseCode = "500", description = "Internal server error")
    })
    public ResponseEntity<SearchRequestDto> getSearchResults(
        @Parameter(description = "ID of the search request") @PathVariable Long searchRequestId
    ) {
        return ResponseEntity.ok(searchService.getSearchResults(searchRequestId));
    }

    /**
     * Get user's search history
     * GET /api/search/history
     */
    @GetMapping("/history")
    @PreAuthorize("hasRole('USER')")
    public ResponseEntity<?> getUserSearchHistory(
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "10") int size,
            Authentication authentication) {
        
        try {
            Pageable pageable = PageRequest.of(page, size);
            // TODO: Implement when SearchService method is ready
            
            return ResponseEntity.ok(Map.of(
                "status", "success",
                "searches", List.of(),
                "totalElements", 0,
                "totalPages", 0
            ));
            
        } catch (Exception e) {
            log.error("Error getting search history", e);
            return ResponseEntity.badRequest().body(Map.of(
                "status", "error",
                "message", "Failed to get search history: " + e.getMessage()
            ));
        }
    }

    /**
     * Cancel a search request
     * POST /api/search/{searchRequestId}/cancel
     */
    @PostMapping("/{searchRequestId}/cancel")
    @PreAuthorize("hasRole('USER')")
    public ResponseEntity<?> cancelSearchRequest(
            @PathVariable Long searchRequestId,
            Authentication authentication) {
        
        try {
            // TODO: Implement search cancellation
            log.info("Cancelling search request {} for user: {}", searchRequestId, authentication.getName());
            
            return ResponseEntity.ok(Map.of(
                "status", "success",
                "message", "Search request cancelled successfully"
            ));
            
        } catch (Exception e) {
            log.error("Error cancelling search request", e);
            return ResponseEntity.badRequest().body(Map.of(
                "status", "error",
                "message", "Failed to cancel search request: " + e.getMessage()
            ));
        }
    }

    /**
     * Provide feedback on a match result
     * POST /api/search/feedback/{matchingId}
     */
    @PostMapping("/feedback/{matchingId}")
    @PreAuthorize("hasRole('USER')")
    public ResponseEntity<?> provideFeedback(
            @PathVariable Long matchingId,
            @RequestBody Map<String, Object> feedbackData,
            Authentication authentication) {
        
        try {
            Boolean confirmed = (Boolean) feedbackData.get("confirmed");
            String feedback = (String) feedbackData.get("feedback");
            
            log.info("User {} providing feedback for match {}: confirmed={}", 
                    authentication.getName(), matchingId, confirmed);
            
            // TODO: Implement feedback processing
            
            return ResponseEntity.ok(Map.of(
                "status", "success",
                "message", "Feedback recorded successfully"
            ));
            
        } catch (Exception e) {
            log.error("Error processing feedback", e);
            return ResponseEntity.badRequest().body(Map.of(
                "status", "error",
                "message", "Failed to process feedback: " + e.getMessage()
            ));
        }
    }

    /**
     * Get search statistics (admin only)
     * GET /api/search/stats
     */
    @GetMapping("/stats")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<?> getSearchStats() {
        
        try {
            // TODO: Implement search statistics
            return ResponseEntity.ok(Map.of(
                "status", "success",
                "stats", Map.of(
                    "totalSearches", 0,
                    "successfulMatches", 0,
                    "averageProcessingTime", 0.0,
                    "accuracyRate", 0.0
                )
            ));
            
        } catch (Exception e) {
            log.error("Error getting search stats", e);
            return ResponseEntity.badRequest().body(Map.of(
                "status", "error",
                "message", "Failed to get search statistics: " + e.getMessage()
            ));
        }
    }
} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/controller/TestController.java =====
package com.recovr.api.controller;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.HashMap;
import java.util.Map;

@CrossOrigin(origins = "*", maxAge = 3600)
@RestController
@RequestMapping("/api/test")
public class TestController {

    @GetMapping("/ping")
    public ResponseEntity<?> ping() {
        Map<String, Object> response = new HashMap<>();
        response.put("message", "RECOVR API is running!");
        response.put("timestamp", System.currentTimeMillis());
        response.put("status", "UP");
        
        return ResponseEntity.ok(response);
    }
} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/controller/UserController.java =====
package com.recovr.api.controller;

import com.recovr.api.entity.User;
import com.recovr.api.repository.UserRepository;
import com.recovr.api.security.services.UserDetailsImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.Map;

@CrossOrigin(origins = "*", maxAge = 3600)
@RestController
@RequestMapping("/api/user")
public class UserController {
    @Autowired
    private UserRepository userRepository;

    @Autowired
    private PasswordEncoder encoder;

    @GetMapping("/profile")
    @PreAuthorize("hasRole('USER') or hasRole('ADMIN')")
    public ResponseEntity<?> getUserProfile() {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        UserDetailsImpl userDetails = (UserDetailsImpl) authentication.getPrincipal();
        
        User user = userRepository.findById(userDetails.getId())
                .orElseThrow(() -> new RuntimeException("User not found"));
        
        Map<String, Object> profile = new HashMap<>();
        profile.put("id", user.getId());
        profile.put("username", user.getUsername());
        profile.put("email", user.getEmail());
        profile.put("firstName", user.getFirstName());
        profile.put("lastName", user.getLastName());
        profile.put("phone", user.getPhone());
        profile.put("avatarUrl", user.getAvatarUrl());
        profile.put("createdAt", user.getCreatedAt());
        
        return new ResponseEntity<>(profile, HttpStatus.OK);
    }

    @PutMapping("/profile")
    @PreAuthorize("hasRole('USER') or hasRole('ADMIN')")
    public ResponseEntity<?> updateUserProfile(@RequestBody Map<String, String> updates) {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        UserDetailsImpl userDetails = (UserDetailsImpl) authentication.getPrincipal();
        
        User user = userRepository.findById(userDetails.getId())
                .orElseThrow(() -> new RuntimeException("User not found"));
        
        if (updates.containsKey("firstName")) {
            user.setFirstName(updates.get("firstName"));
        }
        
        if (updates.containsKey("lastName")) {
            user.setLastName(updates.get("lastName"));
        }
        
        if (updates.containsKey("phone")) {
            user.setPhone(updates.get("phone"));
        }
        
        if (updates.containsKey("avatarUrl")) {
            user.setAvatarUrl(updates.get("avatarUrl"));
        }
        
        if (updates.containsKey("password") && !updates.get("password").isEmpty()) {
            user.setPassword(encoder.encode(updates.get("password")));
        }
        
        userRepository.save(user);
        
        return new ResponseEntity<>("Profile updated successfully", HttpStatus.OK);
    }

    @GetMapping("/admin/users")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<?> getAllUsers() {
        return new ResponseEntity<>(userRepository.findAll(), HttpStatus.OK);
    }

    @GetMapping("/admin/users/{id}")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<?> getUserById(@PathVariable Long id) {
        User user = userRepository.findById(id)
                .orElse(null);
                
        if (user == null) {
            return new ResponseEntity<>("User not found", HttpStatus.NOT_FOUND);
        }
        
        return new ResponseEntity<>(user, HttpStatus.OK);
    }
} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/dto/AdminDashboardDto.java =====
package com.recovr.api.dto;

import java.util.Map;
import java.util.HashMap;

public class AdminDashboardDto {
    private long totalItems;
    private long totalUsers;
    private Map<String, Long> itemsByStatus;
    private Map<String, Long> itemsByCategory;
    private long totalAbandoned;
    private long totalClaimed;
    private long totalReturned;

    public AdminDashboardDto() {
         this.itemsByStatus = new HashMap<>();
         this.itemsByCategory = new HashMap();
    }

    public long getTotalItems() { return totalItems; }
    public void setTotalItems(long totalItems) { this.totalItems = totalItems; }

    public long getTotalUsers() { return totalUsers; }
    public void setTotalUsers(long totalUsers) { this.totalUsers = totalUsers; }

    public Map<String, Long> getItemsByStatus() { return itemsByStatus; }
    public void setItemsByStatus(Map<String, Long> itemsByStatus) { this.itemsByStatus = itemsByStatus; }

    public Map<String, Long> getItemsByCategory() { return itemsByCategory; }
    public void setItemsByCategory(Map<String, Long> itemsByCategory) { this.itemsByCategory = itemsByCategory; }

    public long getTotalAbandoned() { return totalAbandoned; }
    public void setTotalAbandoned(long totalAbandoned) { this.totalAbandoned = totalAbandoned; }

    public long getTotalClaimed() { return totalClaimed; }
    public void setTotalClaimed(long totalClaimed) { this.totalClaimed = totalClaimed; }

    public long getTotalReturned() { return totalReturned; }
    public void setTotalReturned(long totalReturned) { this.totalReturned = totalReturned; }

} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/dto/AuthRequest.java =====
package com.recovr.api.dto;

import jakarta.validation.constraints.NotBlank;
import lombok.Data;

@Data
public class AuthRequest {
    @NotBlank
    private String username;
    
    @NotBlank
    private String password;
} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/dto/ClaimRequestDto.java =====
package com.recovr.api.dto;

import com.recovr.api.entity.ClaimStatus;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import lombok.Data;

import java.time.LocalDateTime;

@Data
public class ClaimRequestDto {
    private Long id;
    
    @NotNull(message = "Item ID is required")
    private Long itemId;
    
    private String itemName;
    
    private Long userId;
    
    private String username;
    
    @NotBlank(message = "Claim message is required")
    private String claimMessage;
    
    private String contactInfo;
    
    private ClaimStatus status;
    
    private LocalDateTime createdAt;
    
    private LocalDateTime updatedAt;
} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/dto/DetectedObjectDto.java =====
package com.recovr.api.dto;

import com.recovr.api.entity.ItemCategory;
import com.recovr.api.entity.DetectionStatus;
import lombok.Data;

import java.time.LocalDateTime;

@Data
public class DetectedObjectDto {
    
    private Long id;
    private String trackingId;
    private ItemCategory category;
    private Double confidenceScore;
    
    // Temporal information
    private LocalDateTime firstDetected;
    private LocalDateTime lastSeen;
    private Long stationaryDuration;
    private Boolean isAbandoned;
    private Long abandonThreshold;
    
    // Location information
    private String cameraLocation;
    private Integer boundingBoxX;
    private Integer boundingBoxY;
    private Integer boundingBoxWidth;
    private Integer boundingBoxHeight;
    
    // Image data
    private String snapshotUrl;
    private LocalDateTime frameTimestamp;
    
    // Status
    private DetectionStatus status;
    
    // Session information
    private Long detectionSessionId;
    private String sessionId;
    
    // Linked item (if claimed)
    private Long linkedItemId;
    private String linkedItemName;
    
    // Timestamps
    private LocalDateTime createdAt;
    private LocalDateTime updatedAt;
} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/dto/ImageMatchingDto.java =====
package com.recovr.api.dto;

import com.recovr.api.entity.ItemCategory;
import lombok.Data;
import java.time.LocalDateTime;

@Data
public class ImageMatchingDto {
    private Long detectedObjectId;
    private double similarityScore;
    private ItemCategory category;
    private String location;
    private LocalDateTime detectedAt;
    private String imageUrl;
} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/dto/ItemDto.java =====
package com.recovr.api.dto;

import com.recovr.api.entity.ItemCategory;
import com.recovr.api.entity.ItemType;
import com.recovr.api.entity.ItemStatus;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.AllArgsConstructor;

import java.time.LocalDateTime;
import java.util.List;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class ItemDto {
    private Long id;
    
    @NotBlank(message = "Item name is required")
    private String name;
    
    private String description;
    
    @NotNull(message = "Item type is required")
    private ItemType type;
    
    @NotNull(message = "Item category is required")
    private ItemCategory category;
    
    @NotNull(message = "Item status is required")
    private ItemStatus status;
    
    private LocalDateTime dateFound;
    
    private LocalDateTime dateLost;
    
    private String location;
    
    private String imageUrl;
    
    private List<String> images;
    
    private Double latitude;
    
    private Double longitude;
    
    private Long userId;
    
    private String username;
    
    private boolean claimed;
    
    // User who reported the item
    private Long reportedById;
    private String reportedByUsername;
    private LocalDateTime reportedAt;
    
    // User who claimed the item (if any)
    private Long claimedById;
    private String claimedByUsername;
    private LocalDateTime claimedAt;
    
    // Timestamps
    private LocalDateTime createdAt;
    private LocalDateTime updatedAt;
} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/dto/RegisterRequest.java =====
package com.recovr.api.dto;

import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Size;
import lombok.Data;

import java.util.Set;

@Data
public class RegisterRequest {
    @NotBlank
    @Size(min = 3, max = 50)
    private String username;

    @NotBlank
    @Size(max = 50)
    @Email
    private String email;

    @NotBlank
    @Size(min = 6, max = 120)
    private String password;

    @Size(max = 50)
    private String firstName;

    @Size(max = 50)
    private String lastName;

    private String phone;

    private Set<String> roles;
} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/dto/SearchRequestDto.java =====
package com.recovr.api.dto;

import com.recovr.api.entity.ItemCategory;
import com.recovr.api.entity.SearchStatus;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.Max;
import lombok.Data;

import java.time.LocalDateTime;
import java.util.List;

@Data
public class SearchRequestDto {
    
    private Long id;
    
    @NotNull(message = "Search image is required")
    private String searchImageUrl;
    
    private String description;
    
    private ItemCategory expectedCategory;
    
    private SearchStatus status;
    
    @Min(value = 0, message = "Matching threshold must be between 0 and 1")
    @Max(value = 1, message = "Matching threshold must be between 0 and 1")
    private Double matchingThreshold;
    
    // Location information
    private String searchLocation;
    private Double searchLatitude;
    private Double searchLongitude;
    
    @Min(value = 0, message = "Search radius must be positive")
    private Double searchRadius;
    
    // Time window for search
    private LocalDateTime dateLostFrom;
    private LocalDateTime dateLostTo;
    
    // Results
    private List<ImageMatchingDto> matchingResults;
    private Integer totalMatchesFound;
    
    // User information
    private Long userId;
    private String username;
    
    // Timestamps
    private LocalDateTime processedAt;
    private LocalDateTime createdAt;
    private LocalDateTime updatedAt;
} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/dto/UserDto.java =====
package com.recovr.api.dto;

import java.util.List;

public class UserDto {
    private Long id;
    private String username;
    private String email;
    private List<String> roles;

    public Long getId() { return id; }
    public void setId(Long id) { this.id = id; }

    public String getUsername() { return username; }
    public void setUsername(String username) { this.username = username; }

    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }

    public List<String> getRoles() { return roles; }
    public void setRoles(List<String> roles) { this.roles = roles; }

} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/entity/ClaimRequest.java =====
package com.recovr.api.entity;

import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.time.LocalDateTime;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "claim_requests")
public class ClaimRequest {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @ManyToOne
    @JoinColumn(name = "item_id", nullable = false)
    private Item item;

    @ManyToOne
    @JoinColumn(name = "user_id", nullable = false)
    private User user;

    @Column(columnDefinition = "TEXT")
    private String claimMessage;

    @Column(name = "contact_info")
    private String contactInfo;

    @Enumerated(EnumType.STRING)
    private ClaimStatus status;

    @Column(name = "created_at")
    private LocalDateTime createdAt;

    @Column(name = "updated_at")
    private LocalDateTime updatedAt;

    @PrePersist
    protected void onCreate() {
        createdAt = LocalDateTime.now();
        updatedAt = LocalDateTime.now();
        status = ClaimStatus.PENDING;
    }

    @PreUpdate
    protected void onUpdate() {
        updatedAt = LocalDateTime.now();
    }
} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/entity/ClaimStatus.java =====
package com.recovr.api.entity;

public enum ClaimStatus {
    PENDING,
    APPROVED,
    REJECTED,
    CANCELLED
} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/entity/DetectedObject.java =====
package com.recovr.api.entity;

import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.time.LocalDateTime;
import java.time.temporal.ChronoUnit;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "detected_objects")
public class DetectedObject {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    // Tracking information
    @Column(name = "tracking_id", unique = true)
    private String trackingId;  // Unique ID for object tracking

    @Enumerated(EnumType.STRING)
    private ItemCategory category;

    @Column(name = "confidence_score")
    private Double confidenceScore; // Detection confidence (0.0 - 1.0)

    // Temporal tracking
    @Column(name = "first_detected")
    private LocalDateTime firstDetected;

    @Column(name = "last_seen")
    private LocalDateTime lastSeen;

    @Column(name = "stationary_duration")
    private Long stationaryDuration; // Seconds the object has been stationary

    @Column(name = "is_abandoned")
    private Boolean isAbandoned = false; // True if stationary > N seconds

    @Column(name = "abandon_threshold")
    private Long abandonThreshold = 300L; // Default 5 minutes in seconds

    // Location information
    @Column(name = "camera_location")
    private String cameraLocation;

    @Column(name = "bounding_box_x")
    private Integer boundingBoxX;

    @Column(name = "bounding_box_y")
    private Integer boundingBoxY;

    @Column(name = "bounding_box_width")
    private Integer boundingBoxWidth;

    @Column(name = "bounding_box_height")
    private Integer boundingBoxHeight;

    // Image data
    @Column(name = "snapshot_url")
    private String snapshotUrl; // URL to the detection snapshot

    @Column(name = "frame_timestamp")
    private LocalDateTime frameTimestamp;

    // Status
    @Enumerated(EnumType.STRING)
    private DetectionStatus status = DetectionStatus.DETECTED;

    // Relationship to detection session
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "detection_session_id")
    private DetectionSession detectionSession;

    // Link to reported item if claimed
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "linked_item_id")
    private Item linkedItem;

    @Column(name = "created_at", updatable = false)
    private LocalDateTime createdAt;

    @Column(name = "updated_at")
    private LocalDateTime updatedAt;

    @PrePersist
    protected void onCreate() {
        createdAt = LocalDateTime.now();
        updatedAt = LocalDateTime.now();
            firstDetected = LocalDateTime.now();
        lastSeen = LocalDateTime.now();
        frameTimestamp = LocalDateTime.now();
        stationaryDuration = 0L;
    }

    @PreUpdate
    protected void onUpdate() {
        updatedAt = LocalDateTime.now();
        
        // Update stationary duration if object is still in the same position
        if (frameTimestamp != null) {
            long secondsSinceLastUpdate = ChronoUnit.SECONDS.between(lastSeen, frameTimestamp);
            if (secondsSinceLastUpdate < 5) { // If less than 5 seconds between updates
                stationaryDuration += secondsSinceLastUpdate;
            
                // Check if object has been stationary long enough to be considered abandoned
                if (!isAbandoned && stationaryDuration >= abandonThreshold) {
                isAbandoned = true;
                }
            } else {
                // Object has moved or been out of frame for too long
                stationaryDuration = 0L;
                isAbandoned = false;
            }
        }
        
        lastSeen = frameTimestamp;
    }

    // Helper method to check if object is considered lost
    public boolean isConsideredLost() {
        return isAbandoned && status == DetectionStatus.ABANDONED;
    }
} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/entity/DetectionSession.java =====
package com.recovr.api.entity;

import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.time.LocalDateTime;
import java.util.List;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "detection_sessions")
public class DetectionSession {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(name = "session_id", unique = true)
    private String sessionId; // Unique identifier for the detection session

    @Column(name = "camera_id")
    private String cameraId; // Identifier for the camera

    @Column(name = "camera_location")
    private String cameraLocation; // Physical location of the camera

    @Column(name = "start_time")
    private LocalDateTime startTime;

    @Column(name = "end_time")
    private LocalDateTime endTime;

    @Column(name = "is_active")
    private Boolean isActive = true;

    @Column(name = "model_version")
    private String modelVersion; // Version of the detection model used

    @Column(name = "confidence_threshold")
    private Double confidenceThreshold = 0.5; // Minimum confidence for detection

    @Column(name = "total_detections")
    private Integer totalDetections = 0;

    @Column(name = "abandoned_objects_count")
    private Integer abandonedObjectsCount = 0;

    // Relationship to detected objects
    @OneToMany(mappedBy = "detectionSession", cascade = CascadeType.ALL)
    private List<DetectedObject> detectedObjects;

    @Column(name = "created_at")
    private LocalDateTime createdAt;

    @Column(name = "updated_at")
    private LocalDateTime updatedAt;

    @PrePersist
    protected void onCreate() {
        createdAt = LocalDateTime.now();
        updatedAt = LocalDateTime.now();
        if (startTime == null) {
            startTime = LocalDateTime.now();
        }
    }

    @PreUpdate
    protected void onUpdate() {
        updatedAt = LocalDateTime.now();
    }

    // Helper method to end the session
    public void endSession() {
        isActive = false;
        endTime = LocalDateTime.now();
    }

    // Helper method to increment detection count
    public void incrementDetections() {
        totalDetections++;
    }

    // Helper method to increment abandoned objects count
    public void incrementAbandonedObjects() {
        abandonedObjectsCount++;
    }
} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/entity/DetectionStatus.java =====
package com.recovr.api.entity;

public enum DetectionStatus {
    DETECTED,    // Object has been detected
    TRACKING,    // Object is being tracked
    ABANDONED,   // Object has been stationary for too long
    CLAIMED,     // Object has been claimed by someone
    RETURNED     // Object has been returned to its owner
} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/entity/ERole.java =====
package com.recovr.api.entity;

public enum ERole {
    ROLE_USER,
    ROLE_ADMIN,
    ROLE_MODERATOR
} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/entity/ImageMatching.java =====
package com.recovr.api.entity;

import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.time.LocalDateTime;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "image_matchings")
public class ImageMatching {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "search_request_id")
    private SearchRequest searchRequest;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "detected_object_id")
    private DetectedObject detectedObject;

    @Column(name = "similarity_score")
    private Double similarityScore;

    @Column(name = "confidence_level")
    private Double confidenceLevel;

    @Column(name = "is_false_positive")
    private Boolean isFalsePositive = false;

    @Column(name = "user_confirmed")
    private Boolean userConfirmed;

    @Enumerated(EnumType.STRING)
    @Column(name = "method")
    private MatchingMethod method;

    @Column(name = "geometric_verification_passed")
    private Boolean geometricVerificationPassed;

    @Column(name = "keypoints_matched")
    private Integer keypointsMatched;

    @Column(name = "total_keypoints_search")
    private Integer totalKeypointsSearch;

    @Column(name = "total_keypoints_matched")
    private Integer totalKeypointsMatched;

    @Column(name = "geographical_distance")
    private Double geographicalDistance;

    @Column(name = "temporal_distance")
    private Integer temporalDistance;

    @Column(name = "created_at", updatable = false)
    private LocalDateTime createdAt;

    @Column(name = "updated_at")
    private LocalDateTime updatedAt;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "item_id")
    private Item item;

    @PrePersist
    protected void onCreate() {
        createdAt = LocalDateTime.now();
        updatedAt = LocalDateTime.now();
    }

    @PreUpdate
    protected void onUpdate() {
        updatedAt = LocalDateTime.now();
    }
} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/entity/ItemCategory.java =====
package com.recovr.api.entity;

public enum ItemCategory {
    ELECTRONICS,
    CLOTHING,
    ACCESSORIES,
    DOCUMENTS,
    KEYS,
    BAGS,
    JEWELRY,
    TOYS,
    BOOKS,
    MISCELLANEOUS
} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/entity/Item.java =====
package com.recovr.api.entity;

import jakarta.persistence.*;
import jakarta.validation.constraints.NotBlank;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "items")
public class Item {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @NotBlank
    private String name;

    @Column(length = 1000)
    private String description;

    @Enumerated(EnumType.STRING)
    @Column(nullable = false)
    private ItemCategory category;

    @Enumerated(EnumType.STRING)
    @Column(nullable = false)
    private ItemStatus status;

    @Column(nullable = false)
    private String location;

    @Column(name = "image_url")
    private String imageUrl;

    @ManyToOne
    @JoinColumn(name = "reported_by_id", nullable = true)
    private User reportedBy;

    @Column(name = "reported_at", nullable = true)
    private LocalDateTime reportedAt;

    @ManyToOne
    @JoinColumn(name = "claimed_by_id")
    private User claimedBy;

    @Column(name = "claimed_at")
    private LocalDateTime claimedAt;

    @Column(name = "created_at")
    private LocalDateTime createdAt;

    @Column(name = "updated_at")
    private LocalDateTime updatedAt;

    @PrePersist
    protected void onCreate() {
        createdAt = LocalDateTime.now();
        updatedAt = LocalDateTime.now();
    }

    @PreUpdate
    protected void onUpdate() {
        updatedAt = LocalDateTime.now();
    }
} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/entity/ItemStatus.java =====
package com.recovr.api.entity;

public enum ItemStatus {
    LOST,      // Item has been reported as lost
    FOUND,     // Item has been found but not claimed
    CLAIMED,   // Item has been claimed by its owner
    RETURNED,  // Item has been returned to its owner
    EXPIRED,   // Item has been in the system for too long
    ABANDONED  // Item has been abandoned (stationary for too long)
} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/entity/ItemType.java =====
package com.recovr.api.entity;

public enum ItemType {
    LOST,
    FOUND
} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/entity/MatchingMethod.java =====
package com.recovr.api.entity;

public enum MatchingMethod {
    CNN_EMBEDDING,    // Using CNN embeddings for similarity
    ORB_FLANN,       // Using ORB keypoints + FLANN matcher
    SIFT_FLANN,      // Using SIFT keypoints + FLANN matcher
    HISTOGRAM,       // Using color histogram comparison
    HYBRID           // Combination of multiple methods
} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/entity/Role.java =====
package com.recovr.api.entity;

import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "roles")
public class Role {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer id;

    @Enumerated(EnumType.STRING)
    @Column(length = 20)
    private ERole name;

    public Role(ERole name) {
        this.name = name;
    }
} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/entity/SearchRequest.java =====
package com.recovr.api.entity;

import jakarta.persistence.*;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.AllArgsConstructor;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "search_requests")
public class SearchRequest {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(name = "search_image_url")
    private String searchImageUrl;

    @Column(length = 1000)
    private String description;

    @Enumerated(EnumType.STRING)
    @Column(name = "expected_category")
    private ItemCategory expectedCategory;

    @Column(name = "matching_threshold")
    private Double matchingThreshold = 0.7;

    @Column(name = "search_location")
    private String searchLocation;

    @Column(name = "search_latitude")
    private Double searchLatitude;

    @Column(name = "search_longitude")
    private Double searchLongitude;

    @Column(name = "search_radius")
    private Double searchRadius;

    @Column(name = "date_lost_from")
    private LocalDateTime dateLostFrom;

    @Column(name = "date_lost_to")
    private LocalDateTime dateLostTo;

    @Enumerated(EnumType.STRING)
    private SearchStatus status = SearchStatus.PENDING;

    @Column(name = "total_matches_found")
    private Integer totalMatchesFound = 0;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "user_id")
    private User user;

    @OneToMany(mappedBy = "searchRequest", cascade = CascadeType.ALL, orphanRemoval = true)
    private List<ImageMatching> matchingResults = new ArrayList<>();

    @Column(name = "processed_at")
    private LocalDateTime processedAt;

    @Column(name = "created_at", updatable = false)
    private LocalDateTime createdAt;

    @Column(name = "updated_at")
    private LocalDateTime updatedAt;

    @PrePersist
    protected void onCreate() {
        createdAt = LocalDateTime.now();
        updatedAt = LocalDateTime.now();
    }

    @PreUpdate
    protected void onUpdate() {
        updatedAt = LocalDateTime.now();
    }

    // Helper method to mark as processed
    public void markAsProcessed() {
        status = SearchStatus.COMPLETED;
        processedAt = LocalDateTime.now();
    }
} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/entity/SearchStatus.java =====
package com.recovr.api.entity;

public enum SearchStatus {
    PENDING,
    PROCESSING,  // Search is being processed
    COMPLETED,   // Search has been completed
    FAILED,      // Search failed due to error
    CANCELLED    // Search was cancelled by user
} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/entity/User.java =====
package com.recovr.api.entity;

import jakarta.persistence.*;
import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Size;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.AllArgsConstructor;

import java.time.LocalDateTime;
import java.util.HashSet;
import java.util.Set;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "users",
       uniqueConstraints = {
        @UniqueConstraint(columnNames = "username"),
        @UniqueConstraint(columnNames = "email")
})
public class User {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @NotBlank
    @Size(max = 20)
    private String username;

    @NotBlank
    @Size(max = 50)
    @Email
    private String email;

    @NotBlank
    @Size(max = 120)
    private String password;

    @Column(name = "first_name")
    private String firstName;

    @Column(name = "last_name")
    private String lastName;

    private String phone;

    @Column(name = "avatar_url")
    private String avatarUrl;

    @ManyToMany(fetch = FetchType.LAZY)
    @JoinTable(name = "user_roles",
               joinColumns = @JoinColumn(name = "user_id"),
               inverseJoinColumns = @JoinColumn(name = "role_id"))
    private Set<Role> roles = new HashSet<>();

    @Column(name = "created_at", updatable = false)
    private LocalDateTime createdAt;

    @Column(name = "updated_at")
    private LocalDateTime updatedAt;

    @PrePersist
    protected void onCreate() {
        createdAt = LocalDateTime.now();
        updatedAt = LocalDateTime.now();
    }

    @PreUpdate
    protected void onUpdate() {
        updatedAt = LocalDateTime.now();
    }
} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/exception/GlobalExceptionHandler.java =====
package com.recovr.api.exception;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.AccessDeniedException;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.context.request.WebRequest;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

@ControllerAdvice
public class GlobalExceptionHandler {

    @ExceptionHandler(ResourceNotFoundException.class)
    public ResponseEntity<?> resourceNotFoundException(ResourceNotFoundException ex, WebRequest request) {
        ErrorResponse errorDetails = new ErrorResponse(
                new Date(),
                HttpStatus.NOT_FOUND.value(),
                "Not Found",
                ex.getMessage(),
                request.getDescription(false));
        
        return new ResponseEntity<>(errorDetails, HttpStatus.NOT_FOUND);
    }

    @ExceptionHandler(BadCredentialsException.class)
    public ResponseEntity<?> badCredentialsException(BadCredentialsException ex, WebRequest request) {
        ErrorResponse errorDetails = new ErrorResponse(
                new Date(),
                HttpStatus.UNAUTHORIZED.value(),
                "Unauthorized",
                "Invalid username or password",
                request.getDescription(false));
        
        return new ResponseEntity<>(errorDetails, HttpStatus.UNAUTHORIZED);
    }

    @ExceptionHandler(AccessDeniedException.class)
    public ResponseEntity<?> accessDeniedException(AccessDeniedException ex, WebRequest request) {
        ErrorResponse errorDetails = new ErrorResponse(
                new Date(),
                HttpStatus.FORBIDDEN.value(),
                "Forbidden",
                ex.getMessage(),
                request.getDescription(false));
        
        return new ResponseEntity<>(errorDetails, HttpStatus.FORBIDDEN);
    }

    @ExceptionHandler(MethodArgumentNotValidException.class)
    public ResponseEntity<?> handleValidationExceptions(MethodArgumentNotValidException ex) {
        Map<String, String> errors = new HashMap<>();
        ex.getBindingResult().getAllErrors().forEach((error) -> {
            String fieldName = ((FieldError) error).getField();
            String errorMessage = error.getDefaultMessage();
            errors.put(fieldName, errorMessage);
        });
        
        return new ResponseEntity<>(errors, HttpStatus.BAD_REQUEST);
    }

    @ExceptionHandler(Exception.class)
    public ResponseEntity<?> globalExceptionHandler(Exception ex, WebRequest request) {
        ErrorResponse errorDetails = new ErrorResponse(
                new Date(),
                HttpStatus.INTERNAL_SERVER_ERROR.value(),
                "Internal Server Error",
                ex.getMessage(),
                request.getDescription(false));
        
        return new ResponseEntity<>(errorDetails, HttpStatus.INTERNAL_SERVER_ERROR);
    }
}

class ErrorResponse {
    private Date timestamp;
    private int status;
    private String error;
    private String message;
    private String details;

    public ErrorResponse(Date timestamp, int status, String error, String message, String details) {
        this.timestamp = timestamp;
        this.status = status;
        this.error = error;
        this.message = message;
        this.details = details;
    }

    public Date getTimestamp() {
        return timestamp;
    }

    public int getStatus() {
        return status;
    }

    public String getError() {
        return error;
    }

    public String getMessage() {
        return message;
    }

    public String getDetails() {
        return details;
    }
} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/exception/ResourceNotFoundException.java =====
package com.recovr.api.exception;

import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.ResponseStatus;

@ResponseStatus(value = HttpStatus.NOT_FOUND)
public class ResourceNotFoundException extends RuntimeException {
    private static final long serialVersionUID = 1L;

    public ResourceNotFoundException(String message) {
        super(message);
    }
} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/RecovRApplication.java =====
package com.recovr.api;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.context.properties.EnableConfigurationProperties;

@SpringBootApplication
public class RecovRApplication {

    public static void main(String[] args) {
        SpringApplication.run(RecovRApplication.class, args);
    }
} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/repository/ClaimRequestRepository.java =====
package com.recovr.api.repository;

import com.recovr.api.entity.ClaimRequest;
import com.recovr.api.entity.ClaimStatus;
import com.recovr.api.entity.Item;
import com.recovr.api.entity.User;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.Optional;

@Repository
public interface ClaimRequestRepository extends JpaRepository<ClaimRequest, Long> {
    List<ClaimRequest> findByItem(Item item);
    
    Page<ClaimRequest> findByUser(User user, Pageable pageable);
    
    Page<ClaimRequest> findByStatus(ClaimStatus status, Pageable pageable);
    
    Page<ClaimRequest> findByUserAndStatus(User user, ClaimStatus status, Pageable pageable);
    
    Page<ClaimRequest> findByItemAndStatus(Item item, ClaimStatus status, Pageable pageable);
    
    boolean existsByItemAndUser(Item item, User user);
    
    Optional<ClaimRequest> findByItemAndUserAndStatus(Item item, User user, ClaimStatus status);
} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/repository/DetectedObjectRepository.java =====
package com.recovr.api.repository;

import com.recovr.api.entity.DetectedObject;
import com.recovr.api.entity.DetectionSession;
import com.recovr.api.entity.DetectionStatus;
import com.recovr.api.entity.ItemCategory;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

@Repository
public interface DetectedObjectRepository extends JpaRepository<DetectedObject, Long> {

    // Find by tracking ID
    Optional<DetectedObject> findByTrackingId(String trackingId);

    // Find by status
    List<DetectedObject> findByStatus(DetectionStatus status);
    Page<DetectedObject> findByStatus(DetectionStatus status, Pageable pageable);

    // Find abandoned objects
    List<DetectedObject> findByIsAbandonedTrue();
    Page<DetectedObject> findByIsAbandonedTrue(Pageable pageable);

    // Find by detection session
    List<DetectedObject> findByDetectionSession(DetectionSession session);
    Page<DetectedObject> findByDetectionSession(DetectionSession session, Pageable pageable);

    // Find by category
    List<DetectedObject> findByCategory(ItemCategory category);
    Page<DetectedObject> findByCategory(ItemCategory category, Pageable pageable);

    // Find by camera location
    List<DetectedObject> findByCameraLocation(String cameraLocation);
    Page<DetectedObject> findByCameraLocation(String cameraLocation, Pageable pageable);

    // Find objects detected in time range
    List<DetectedObject> findByFirstDetectedBetween(LocalDateTime start, LocalDateTime end);

    // Find long-stationary objects (potential lost items)
    @Query("SELECT d FROM DetectedObject d WHERE d.stationaryDuration >= :threshold AND d.status = :status")
    List<DetectedObject> findLongStationaryObjects(@Param("threshold") Long threshold, @Param("status") DetectionStatus status);

    // Find objects by confidence above threshold
    @Query("SELECT d FROM DetectedObject d WHERE d.confidenceScore >= :threshold")
    List<DetectedObject> findHighConfidenceDetections(@Param("threshold") Double threshold);

    // Count detections by session
    Long countByDetectionSession(DetectionSession session);

    // Count abandoned objects by location
    @Query("SELECT COUNT(d) FROM DetectedObject d WHERE d.cameraLocation = :location AND d.isAbandoned = true")
    Long countAbandonedByLocation(@Param("location") String location);

    // Find recent detections
    @Query("SELECT d FROM DetectedObject d WHERE d.lastSeen >= :since ORDER BY d.lastSeen DESC")
    List<DetectedObject> findRecentDetections(@Param("since") LocalDateTime since);

    // Find unlinked abandoned objects (not yet linked to any Item)
    @Query("SELECT d FROM DetectedObject d WHERE d.isAbandoned = true AND d.linkedItem IS NULL")
    List<DetectedObject> findUnlinkedAbandonedObjects();
} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/repository/DetectionSessionRepository.java =====
package com.recovr.api.repository;

import com.recovr.api.entity.DetectionSession;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

@Repository
public interface DetectionSessionRepository extends JpaRepository<DetectionSession, Long> {

    // Find by session ID
    Optional<DetectionSession> findBySessionId(String sessionId);

    // Find by camera ID
    List<DetectionSession> findByCameraId(String cameraId);
    Page<DetectionSession> findByCameraId(String cameraId, Pageable pageable);

    // Find active sessions
    List<DetectionSession> findByIsActiveTrue();

    // Find by camera location
    List<DetectionSession> findByCameraLocation(String cameraLocation);

    // Find sessions by time range
    List<DetectionSession> findByStartTimeBetween(LocalDateTime start, LocalDateTime end);

    // Find sessions with most detections
    @Query("SELECT d FROM DetectionSession d ORDER BY d.totalDetections DESC")
    List<DetectionSession> findSessionsOrderByDetections(Pageable pageable);

    // Find sessions with abandoned objects
    @Query("SELECT d FROM DetectionSession d WHERE d.abandonedObjectsCount > 0")
    List<DetectionSession> findSessionsWithAbandonedObjects();

    // Get statistics by camera
    @Query("SELECT d.cameraId, COUNT(d), SUM(d.totalDetections), SUM(d.abandonedObjectsCount) " +
           "FROM DetectionSession d GROUP BY d.cameraId")
    List<Object[]> getDetectionStatsByCamera();

    // Find long-running sessions
    @Query("SELECT d FROM DetectionSession d WHERE d.isActive = true AND d.startTime <= :threshold")
    List<DetectionSession> findLongRunningSessions(@Param("threshold") LocalDateTime threshold);
} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/repository/ImageMatchingRepository.java =====
package com.recovr.api.repository;

import com.recovr.api.entity.ImageMatching;
import com.recovr.api.entity.SearchRequest;
import com.recovr.api.entity.Item;
import com.recovr.api.entity.DetectedObject;
import com.recovr.api.entity.MatchingMethod;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.time.LocalDateTime;
import java.util.List;

@Repository
public interface ImageMatchingRepository extends JpaRepository<ImageMatching, Long> {

    // Find by search request
    List<ImageMatching> findBySearchRequest(SearchRequest searchRequest);
    Page<ImageMatching> findBySearchRequest(SearchRequest searchRequest, Pageable pageable);

    // Find by matched item
    List<ImageMatching> findByItem(Item item);

    // Find by matched detected object
    List<ImageMatching> findByDetectedObject(DetectedObject detectedObject);

    // Find by matching method
    List<ImageMatching> findByMethod(MatchingMethod method);

    // Find high similarity matches
    @Query("SELECT m FROM ImageMatching m WHERE m.similarityScore >= :threshold ORDER BY m.similarityScore DESC")
    List<ImageMatching> findHighSimilarityMatches(@Param("threshold") Double threshold);

    // Find high confidence matches
    @Query("SELECT m FROM ImageMatching m WHERE m.confidenceLevel >= :threshold ORDER BY m.confidenceLevel DESC")
    List<ImageMatching> findHighConfidenceMatches(@Param("threshold") Double threshold);

    // Find confirmed matches by users
    List<ImageMatching> findByUserConfirmedTrue();

    // Find false positives
    List<ImageMatching> findByIsFalsePositiveTrue();

    // Find matches for search request above threshold
    @Query("SELECT m FROM ImageMatching m WHERE m.searchRequest = :searchRequest AND m.similarityScore >= :threshold ORDER BY m.similarityScore DESC")
    List<ImageMatching> findMatchesAboveThreshold(@Param("searchRequest") SearchRequest searchRequest, @Param("threshold") Double threshold);

    // Find best match for search request
    @Query("SELECT m FROM ImageMatching m WHERE m.searchRequest = :searchRequest ORDER BY m.similarityScore DESC, m.confidenceLevel DESC")
    List<ImageMatching> findBestMatches(@Param("searchRequest") SearchRequest searchRequest, Pageable pageable);

    // Find matches by creation time
    List<ImageMatching> findByCreatedAtBetween(LocalDateTime start, LocalDateTime end);

    // Count matches by search request
    Long countBySearchRequest(SearchRequest searchRequest);

    // Count confirmed matches
    Long countByUserConfirmedTrue();

    // Count false positives
    Long countByIsFalsePositiveTrue();

    // Get accuracy statistics
    @Query("SELECT m.method, COUNT(m), " +
           "SUM(CASE WHEN m.userConfirmed = true THEN 1 ELSE 0 END), " +
           "SUM(CASE WHEN m.isFalsePositive = true THEN 1 ELSE 0 END) " +
           "FROM ImageMatching m GROUP BY m.method")
    List<Object[]> getAccuracyStatsByMethod();

    // Find matches needing user feedback
    @Query("SELECT m FROM ImageMatching m WHERE m.userConfirmed IS NULL AND m.similarityScore >= :threshold")
    List<ImageMatching> findMatchesNeedingFeedback(@Param("threshold") Double threshold);

    // Find geometric verified matches (for ORB/FLANN method)
    List<ImageMatching> findByGeometricVerificationPassedTrue();

    // Find recent matches
    @Query("SELECT m FROM ImageMatching m ORDER BY m.createdAt DESC")
    List<ImageMatching> findRecentMatches(Pageable pageable);
} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/repository/ItemRepository.java =====
package com.recovr.api.repository;

import com.recovr.api.entity.Item;
import com.recovr.api.entity.ItemCategory;
import com.recovr.api.entity.ItemStatus;
import com.recovr.api.entity.ItemType;
import com.recovr.api.entity.User;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.JpaSpecificationExecutor;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.time.LocalDateTime;
import java.util.List;

@Repository
public interface ItemRepository extends JpaRepository<Item, Long>, JpaSpecificationExecutor<Item> {
    Page<Item> findByReportedBy(User user, Pageable pageable);
    
    Page<Item> findByClaimedBy(User user, Pageable pageable);
    
    Page<Item> findByClaimedAtIsNotNull(Pageable pageable);
    Page<Item> findByClaimedAtIsNull(Pageable pageable);
    
    long countByStatus(ItemStatus status);
    
    long countByCategory(ItemCategory category);
} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/repository/RoleRepository.java =====
package com.recovr.api.repository;

import com.recovr.api.entity.ERole;
import com.recovr.api.entity.Role;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.Optional;

@Repository
public interface RoleRepository extends JpaRepository<Role, Integer> {
    Optional<Role> findByName(ERole name);
} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/repository/SearchRequestRepository.java =====
package com.recovr.api.repository;

import com.recovr.api.entity.SearchRequest;
import com.recovr.api.entity.SearchStatus;
import com.recovr.api.entity.ItemCategory;
import com.recovr.api.entity.User;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.time.LocalDateTime;
import java.util.List;

@Repository
public interface SearchRequestRepository extends JpaRepository<SearchRequest, Long> {

    // Find by user
    List<SearchRequest> findByUser(User user);
    Page<SearchRequest> findByUser(User user, Pageable pageable);

    // Find by status
    List<SearchRequest> findByStatus(SearchStatus status);
    Page<SearchRequest> findByStatus(SearchStatus status, Pageable pageable);

    // Find by user and status
    Page<SearchRequest> findByUserAndStatus(User user, SearchStatus status, Pageable pageable);

    // Find by expected category
    List<SearchRequest> findByExpectedCategory(ItemCategory category);

    // Find processing requests (for background processing)
    List<SearchRequest> findByStatusOrderByCreatedAtAsc(SearchStatus status);

    // Find searches in location radius
    @Query("SELECT s FROM SearchRequest s WHERE " +
           "s.searchLatitude IS NOT NULL AND s.searchLongitude IS NOT NULL AND " +
           "s.searchLocation = :location")
    List<SearchRequest> findBySearchLocation(@Param("location") String location);

    // Find searches by time range
    List<SearchRequest> findByCreatedAtBetween(LocalDateTime start, LocalDateTime end);

    // Find searches with matches found
    @Query("SELECT s FROM SearchRequest s WHERE s.totalMatchesFound > 0")
    List<SearchRequest> findSearchesWithMatches();

    // Find searches without matches
    @Query("SELECT s FROM SearchRequest s WHERE s.totalMatchesFound = 0 AND s.status = 'COMPLETED'")
    List<SearchRequest> findSearchesWithoutMatches();

    // Count searches by status
    Long countByStatus(SearchStatus status);

    // Count searches by user
    Long countByUser(User user);

    // Get search statistics
    @Query("SELECT s.status, COUNT(s) FROM SearchRequest s GROUP BY s.status")
    List<Object[]> getSearchStatsByStatus();

    // Find recent searches
    @Query("SELECT s FROM SearchRequest s ORDER BY s.createdAt DESC")
    List<SearchRequest> findRecentSearches(Pageable pageable);

    // Find searches needing reprocessing (failed searches older than threshold)
    @Query("SELECT s FROM SearchRequest s WHERE s.status = 'FAILED' AND s.createdAt <= :threshold")
    List<SearchRequest> findSearchesNeedingReprocessing(@Param("threshold") LocalDateTime threshold);
} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/repository/UserRepository.java =====
package com.recovr.api.repository;

import com.recovr.api.entity.User;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.Optional;

@Repository
public interface UserRepository extends JpaRepository<User, Long> {
    Optional<User> findByUsername(String username);
    Optional<User> findByEmail(String email);
    Boolean existsByUsername(String username);
    Boolean existsByEmail(String email);
} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/security/services/UserDetailsImpl.java =====
package com.recovr.api.security.services;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.recovr.api.entity.User;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

import java.util.Collection;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

public class UserDetailsImpl implements UserDetails {
    private static final long serialVersionUID = 1L;

    private Long id;
    private String username;
    private String email;
    @JsonIgnore
    private String password;
    private String firstName;
    private String lastName;
    private String avatarUrl;

    private Collection<? extends GrantedAuthority> authorities;

    public UserDetailsImpl(Long id, String username, String email, String password,
                          String firstName, String lastName, String avatarUrl,
                          Collection<? extends GrantedAuthority> authorities) {
        this.id = id;
        this.username = username;
        this.email = email;
        this.password = password;
        this.firstName = firstName;
        this.lastName = lastName;
        this.avatarUrl = avatarUrl;
        this.authorities = authorities;
    }

    public static UserDetailsImpl build(User user) {
        List<GrantedAuthority> authorities = user.getRoles().stream()
                .map(role -> new SimpleGrantedAuthority(role.getName().name()))
                .collect(Collectors.toList());

        return new UserDetailsImpl(
                user.getId(),
                user.getUsername(),
                user.getEmail(),
                user.getPassword(),
                user.getFirstName(),
                user.getLastName(),
                user.getAvatarUrl(),
                authorities);
    }

    @Override
    public Collection<? extends GrantedAuthority> getAuthorities() {
        return authorities;
    }

    public Long getId() {
        return id;
    }

    public String getEmail() {
        return email;
    }

    public String getFirstName() {
        return firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public String getAvatarUrl() {
        return avatarUrl;
    }

    @Override
    public String getPassword() {
        return password;
    }

    @Override
    public String getUsername() {
        return username;
    }

    @Override
    public boolean isAccountNonExpired() {
        return true;
    }

    @Override
    public boolean isAccountNonLocked() {
        return true;
    }

    @Override
    public boolean isCredentialsNonExpired() {
        return true;
    }

    @Override
    public boolean isEnabled() {
        return true;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o)
            return true;
        if (o == null || getClass() != o.getClass())
            return false;
        UserDetailsImpl user = (UserDetailsImpl) o;
        return Objects.equals(id, user.id);
    }
} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/security/services/UserDetailsServiceImpl.java =====
package com.recovr.api.security.services;

import com.recovr.api.entity.User;
import com.recovr.api.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Service
public class UserDetailsServiceImpl implements UserDetailsService {
    @Autowired
    UserRepository userRepository;

    @Override
    @Transactional
    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
        System.out.println("[UserDetailsServiceImpl] Chargement de l'utilisateur: " + username);
        User user = userRepository.findByUsername(username)
                .orElseThrow(() -> new UsernameNotFoundException("User Not Found with username: " + username));

        return UserDetailsImpl.build(user);
    }
} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/security/WebSecurityConfig.java =====
package com.recovr.api.security;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
@EnableWebSecurity
public class WebSecurityConfig {
    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http
            .csrf(csrf -> csrf.disable())
            .authorizeHttpRequests(auth -> auth
                .anyRequest().permitAll()
            );
        return http.build();
    }
} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/service/AdminService.java =====
package com.recovr.api.service;

import com.recovr.api.dto.AdminDashboardDto;
import com.recovr.api.dto.ItemDto;
import com.recovr.api.dto.UserDto;
import com.recovr.api.entity.Item;
import com.recovr.api.entity.ItemCategory;
import com.recovr.api.entity.ItemStatus;
import com.recovr.api.entity.User;
import com.recovr.api.repository.ItemRepository;
import com.recovr.api.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

@Service
public class AdminService {

    @Autowired
    private ItemRepository itemRepository;

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private ItemService itemService;

    @Transactional(readOnly = true)
    public AdminDashboardDto getAdminDashboard() {
         AdminDashboardDto dashboard = new AdminDashboardDto();
         dashboard.setTotalItems(itemRepository.count());
         dashboard.setTotalUsers(userRepository.count());
         Map<String, Long> statusMap = new HashMap<>();
         for (ItemStatus status : ItemStatus.values()) {
             statusMap.put(status.name(), itemRepository.countByStatus(status));
         }
         dashboard.setItemsByStatus(statusMap);
         Map<String, Long> categoryMap = new HashMap<>();
         for (ItemCategory cat : ItemCategory.values()) {
             categoryMap.put(cat.name(), itemRepository.countByCategory(cat));
         }
         dashboard.setItemsByCategory(categoryMap);
         dashboard.setTotalAbandoned(itemRepository.countByStatus(ItemStatus.ABANDONED));
         dashboard.setTotalClaimed(itemRepository.countByStatus(ItemStatus.CLAIMED));
         dashboard.setTotalReturned(itemRepository.countByStatus(ItemStatus.RETURNED));
         return dashboard;
    }

    @Transactional(readOnly = true)
    public List<ItemDto> getAllItemsAdmin() {
         List<Item> items = itemRepository.findAll();
         return items.stream().map(itemService::convertToDto).collect(Collectors.toList());
    }

    @Transactional(readOnly = true)
    public List<UserDto> getAllUsersAdmin() {
         List<User> users = userRepository.findAll();
         return users.stream().map(this::convertToUserDto).collect(Collectors.toList());
    }

    @Transactional
    public void deleteItemAdmin(Long id) {
         if (!itemRepository.existsById(id)) { throw new RuntimeException("Item not found"); }
         itemRepository.deleteById(id);
    }

    @Transactional
    public void deleteUserAdmin(Long id) {
         if (!userRepository.existsById(id)) { throw new RuntimeException("User not found"); }
         userRepository.deleteById(id);
    }

    @Transactional
    public ItemDto updateItemAdmin(Long id, ItemDto itemDto) {
         Item item = itemRepository.findById(id).orElseThrow(() -> new RuntimeException("Item not found"));
         itemService.updateItemFromDto(item, itemDto);
         Item savedItem = itemRepository.save(item);
         return itemService.convertToDto(savedItem);
    }

    @Transactional
    public UserDto updateUserAdmin(Long id, UserDto userDto) {
         User user = userRepository.findById(id).orElseThrow(() -> new RuntimeException("User not found"));
         user.setUsername(userDto.getUsername());
         user.setEmail(userDto.getEmail());
         // (Si vous avez une logique de mise à jour des rôles, vous pouvez l'ajouter ici)
         User savedUser = userRepository.save(user);
         return convertToUserDto(savedUser);
    }

    private UserDto convertToUserDto(User user) {
         UserDto dto = new UserDto();
         dto.setId(user.getId());
         dto.setUsername(user.getUsername());
         dto.setEmail(user.getEmail());
         // (Si vous avez une logique pour convertir les rôles, vous pouvez l'ajouter ici)
         return dto;
    }

} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/service/DetectionService.java =====
package com.recovr.api.service;

import com.recovr.api.dto.DetectedObjectDto;
import com.recovr.api.entity.*;
import com.recovr.api.repository.DetectedObjectRepository;
import com.recovr.api.repository.DetectionSessionRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.UUID;
import java.util.stream.Collectors;
import java.util.HashMap;

@Slf4j
@Service
@RequiredArgsConstructor
public class DetectionService {

    private final DetectedObjectRepository detectedObjectRepository;
    private final DetectionSessionRepository detectionSessionRepository;

    @Value("${app.models.path:../}")
    private String modelsPath;

    @Value("${app.detection.abandon-threshold:300}")
    private Long defaultAbandonThreshold; // 5 minutes in seconds

    @Value("${app.detection.confidence-threshold:0.5}")
    private Double defaultConfidenceThreshold;

    /**
     * Start a new detection session for a camera
     */
    @Transactional
    public DetectionSession startDetectionSession(String cameraId, String cameraLocation, String modelVersion) {
        log.info("Starting detection session for camera: {} at location: {}", cameraId, cameraLocation);

        DetectionSession session = new DetectionSession();
        session.setSessionId(UUID.randomUUID().toString());
        session.setCameraId(cameraId);
        session.setCameraLocation(cameraLocation);
        session.setModelVersion(modelVersion);
        session.setConfidenceThreshold(defaultConfidenceThreshold);
        session.setIsActive(true);

        return detectionSessionRepository.save(session);
    }

    /**
     * End a detection session
     */
    @Transactional
    public void endDetectionSession(String sessionId) {
        Optional<DetectionSession> sessionOpt = detectionSessionRepository.findBySessionId(sessionId);
        if (sessionOpt.isPresent()) {
            DetectionSession session = sessionOpt.get();
            session.endSession();
            detectionSessionRepository.save(session);
            log.info("Ended detection session: {}", sessionId);
        }
    }

    /**
     * Process a detection result from PyTorch model
     * This method will be called when your model detects an object
     */
    @Transactional
    public DetectedObject processDetection(
            String sessionId,
            String trackingId,
            ItemCategory category,
            Double confidence,
            int x, int y, int width, int height,
            String snapshotUrl) {

        log.info("Processing detection - Tracking ID: {}, Category: {}, Confidence: {}",
                trackingId, category, confidence);

        // Find or create detected object
        Optional<DetectedObject> existingOpt = detectedObjectRepository.findByTrackingId(trackingId);

        DetectedObject detectedObject;
        if (existingOpt.isPresent()) {
            // Update existing detection
            detectedObject = existingOpt.get();
            updateExistingDetection(detectedObject, confidence, x, y, width, height, snapshotUrl);
        } else {
            // Create new detection
            detectedObject = createNewDetection(sessionId, trackingId, category, confidence,
                    x, y, width, height, snapshotUrl);
        }

        return detectedObjectRepository.save(detectedObject);
    }

    /**
     * Update tracking information for existing detection
     */
    private void updateExistingDetection(DetectedObject detectedObject, Double confidence,
                                         int x, int y, int width, int height, String snapshotUrl) {
        detectedObject.setConfidenceScore(confidence);
        detectedObject.setBoundingBoxX(x);
        detectedObject.setBoundingBoxY(y);
        detectedObject.setBoundingBoxWidth(width);
        detectedObject.setBoundingBoxHeight(height);
        detectedObject.setSnapshotUrl(snapshotUrl);
        detectedObject.setFrameTimestamp(LocalDateTime.now());

        // The @PreUpdate will handle lastSeen and stationary duration calculation
    }

    /**
     * Create new detected object
     */
    private DetectedObject createNewDetection(String sessionId, String trackingId, ItemCategory category,
                                              Double confidence, int x, int y, int width, int height,
                                              String snapshotUrl) {

        DetectionSession session = detectionSessionRepository.findBySessionId(sessionId)
                .orElseThrow(() -> new RuntimeException("Detection session not found: " + sessionId));

        DetectedObject detectedObject = new DetectedObject();
        detectedObject.setTrackingId(trackingId);
        detectedObject.setCategory(category);
        detectedObject.setConfidenceScore(confidence);
        detectedObject.setBoundingBoxX(x);
        detectedObject.setBoundingBoxY(y);
        detectedObject.setBoundingBoxWidth(width);
        detectedObject.setBoundingBoxHeight(height);
        detectedObject.setSnapshotUrl(snapshotUrl);
        detectedObject.setFrameTimestamp(LocalDateTime.now());
        detectedObject.setCameraLocation(session.getCameraLocation());
        detectedObject.setDetectionSession(session);
        detectedObject.setAbandonThreshold(defaultAbandonThreshold);

        // Update session statistics
        session.incrementDetections();

        return detectedObject;
    }

    /**
     * Get all abandoned objects (potential lost items)
     */
    public List<DetectedObjectDto> getAbandonedObjects() {
        List<DetectedObject> abandonedObjects = detectedObjectRepository.findByIsAbandonedTrue();
        return abandonedObjects.stream()
                .map(this::convertToDto)
                .collect(Collectors.toList());
    }

    /**
     * Get recent detections
     */
    public List<DetectedObjectDto> getRecentDetections(int hoursBack) {
        LocalDateTime since = LocalDateTime.now().minusHours(hoursBack);
        List<DetectedObject> recentDetections = detectedObjectRepository.findRecentDetections(since);
        return recentDetections.stream()
                .map(this::convertToDto)
                .collect(Collectors.toList());
    }

    /**
     * Mark detected object as claimed/linked to a reported item
     */
    @Transactional
    public void linkDetectedObjectToItem(Long detectedObjectId, Long itemId) {
        DetectedObject detectedObject = detectedObjectRepository.findById(detectedObjectId)
                .orElseThrow(() -> new RuntimeException("Detected object not found"));

        // Note: You'll need to inject ItemRepository to get the Item
        // For now, just set the ID - you can improve this later
        detectedObject.setStatus(DetectionStatus.CLAIMED);
        detectedObjectRepository.save(detectedObject);

        log.info("Linked detected object {} to item {}", detectedObjectId, itemId);
    }

    /**
     * Convert entity to DTO
     */
    private DetectedObjectDto convertToDto(DetectedObject detectedObject) {
        DetectedObjectDto dto = new DetectedObjectDto();
        dto.setId(detectedObject.getId());
        dto.setTrackingId(detectedObject.getTrackingId());
        dto.setCategory(detectedObject.getCategory());
        dto.setConfidenceScore(detectedObject.getConfidenceScore());
        dto.setFirstDetected(detectedObject.getFirstDetected());
        dto.setLastSeen(detectedObject.getLastSeen());
        dto.setStationaryDuration(detectedObject.getStationaryDuration());
        dto.setIsAbandoned(detectedObject.getIsAbandoned());
        dto.setAbandonThreshold(detectedObject.getAbandonThreshold());
        dto.setCameraLocation(detectedObject.getCameraLocation());
        dto.setBoundingBoxX(detectedObject.getBoundingBoxX());
        dto.setBoundingBoxY(detectedObject.getBoundingBoxY());
        dto.setBoundingBoxWidth(detectedObject.getBoundingBoxWidth());
        dto.setBoundingBoxHeight(detectedObject.getBoundingBoxHeight());
        dto.setSnapshotUrl(detectedObject.getSnapshotUrl());
        dto.setFrameTimestamp(detectedObject.getFrameTimestamp());
        dto.setStatus(detectedObject.getStatus());
        
        if (detectedObject.getDetectionSession() != null) {
            dto.setDetectionSessionId(detectedObject.getDetectionSession().getId());
            dto.setSessionId(detectedObject.getDetectionSession().getSessionId());
        }
        
        if (detectedObject.getLinkedItem() != null) {
            dto.setLinkedItemId(detectedObject.getLinkedItem().getId());
            dto.setLinkedItemName(detectedObject.getLinkedItem().getName());
        }
        
        dto.setCreatedAt(detectedObject.getCreatedAt());
        dto.setUpdatedAt(detectedObject.getUpdatedAt());
        
        return dto;
    }

    /**
     * Get detection statistics
     */
    public Map<String, Object> getDetectionStats() {
        LocalDateTime now = LocalDateTime.now();
        LocalDateTime last24Hours = now.minusHours(24);
        LocalDateTime lastWeek = now.minusWeeks(1);
        LocalDateTime lastMonth = now.minusMonths(1);

        // Get active sessions
        List<DetectionSession> activeSessions = detectionSessionRepository.findByIsActiveTrue();
        
        // Get recent detections
        List<DetectedObject> recentDetections = detectedObjectRepository.findRecentDetections(last24Hours);
        
        // Get abandoned objects
        List<DetectedObject> abandonedObjects = detectedObjectRepository.findByIsAbandonedTrue();
        
        // Calculate statistics
        Map<String, Object> stats = new HashMap<>();
        
        // Overall statistics
        stats.put("totalDetections", detectedObjectRepository.count());
        stats.put("activeSessions", activeSessions.size());
        stats.put("abandonedObjects", abandonedObjects.size());
        
        // Time-based statistics
        stats.put("detectionsLast24Hours", recentDetections.size());
        stats.put("detectionsLastWeek", detectedObjectRepository.findByFirstDetectedBetween(lastWeek, now).size());
        stats.put("detectionsLastMonth", detectedObjectRepository.findByFirstDetectedBetween(lastMonth, now).size());
        
        // Category distribution
        Map<ItemCategory, Long> categoryDistribution = recentDetections.stream()
            .collect(Collectors.groupingBy(
                DetectedObject::getCategory,
                Collectors.counting()
            ));
        stats.put("categoryDistribution", categoryDistribution);
        
        // Location statistics
        Map<String, Long> locationStats = recentDetections.stream()
            .collect(Collectors.groupingBy(
                DetectedObject::getCameraLocation,
                Collectors.counting()
            ));
        stats.put("locationStats", locationStats);
        
        // Recovery rate (claimed vs total abandoned)
        long totalAbandoned = abandonedObjects.size();
        long claimedItems = abandonedObjects.stream()
            .filter(obj -> obj.getStatus() == DetectionStatus.CLAIMED)
            .count();
        double recoveryRate = totalAbandoned > 0 ? (double) claimedItems / totalAbandoned * 100 : 0;
        stats.put("recoveryRate", Math.round(recoveryRate * 100.0) / 100.0);
        
        // Active cameras
        List<String> activeCameras = activeSessions.stream()
            .map(DetectionSession::getCameraId)
            .distinct()
            .collect(Collectors.toList());
        stats.put("activeCameras", activeCameras);
        
        // Detection trends (hourly for last 24 hours)
        Map<Integer, Long> hourlyTrends = recentDetections.stream()
            .collect(Collectors.groupingBy(
                detection -> detection.getFirstDetected().getHour(),
                Collectors.counting()
            ));
        stats.put("hourlyTrends", hourlyTrends);
        
        return stats;
    }
} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/service/FileStorageService.java =====
package com.recovr.api.service;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.io.Resource;
import org.springframework.core.io.UrlResource;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;
import org.springframework.web.multipart.MultipartFile;

import jakarta.annotation.PostConstruct;
import java.io.IOException;
import java.net.MalformedURLException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.UUID;

@Service
public class FileStorageService {

    @Value("${file.upload-dir:./uploads}")
    private String uploadDir;

    private Path fileStoragePath;

    @PostConstruct
    public void init() {
        this.fileStoragePath = Paths.get(uploadDir).toAbsolutePath().normalize();
        try {
            Files.createDirectories(this.fileStoragePath);
        } catch (Exception ex) {
            throw new RuntimeException("Could not create the directory where the uploaded files will be stored.", ex);
        }
    }

    public String storeFile(MultipartFile file) {
        // Normalize file name
        String originalFileName = StringUtils.cleanPath(file.getOriginalFilename());
        
        try {
            // Check if the file's name contains invalid characters
            if (originalFileName.contains("..")) {
                throw new RuntimeException("Sorry! Filename contains invalid path sequence " + originalFileName);
            }

            // Generate unique file name
            String fileExtension = "";
            if (originalFileName.contains(".")) {
                fileExtension = originalFileName.substring(originalFileName.lastIndexOf("."));
            }
            String newFileName = UUID.randomUUID().toString() + fileExtension;
            
            // Copy file to the target location
            Path targetLocation = fileStoragePath.resolve(newFileName);
            Files.copy(file.getInputStream(), targetLocation, StandardCopyOption.REPLACE_EXISTING);

            return newFileName;
        } catch (IOException ex) {
            throw new RuntimeException("Could not store file " + originalFileName + ". Please try again!", ex);
        }
    }

    public Resource loadFileAsResource(String fileName) {
        try {
            Path filePath = fileStoragePath.resolve(fileName).normalize();
            Resource resource = new UrlResource(filePath.toUri());
            
            if (resource.exists()) {
                return resource;
            } else {
                throw new RuntimeException("File not found " + fileName);
            }
        } catch (MalformedURLException ex) {
            throw new RuntimeException("File not found " + fileName, ex);
        }
    }

    public void deleteFile(String fileName) {
        try {
            Path filePath = fileStoragePath.resolve(fileName).normalize();
            Files.deleteIfExists(filePath);
        } catch (IOException ex) {
            throw new RuntimeException("Could not delete file " + fileName, ex);
        }
    }
}


===== FILE: ./spring-backend/src/main/java/com/recovr/api/service/ItemService.java =====
package com.recovr.api.service;

import com.recovr.api.dto.ItemDto;
import com.recovr.api.entity.Item;
import com.recovr.api.entity.ItemCategory;
import com.recovr.api.entity.ItemStatus;
import com.recovr.api.entity.User;
import com.recovr.api.exception.ResourceNotFoundException;
import com.recovr.api.repository.ItemRepository;
import com.recovr.api.repository.UserRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.time.LocalDateTime;

@Service
@RequiredArgsConstructor
public class ItemService {
    private final ItemRepository itemRepository;
    private final UserRepository userRepository;
    private static final Logger log = LoggerFactory.getLogger(ItemService.class);

    public Page<ItemDto> getAllItems(Pageable pageable, String category, String status) {
        Specification<Item> spec = Specification.where(null);
        
        if (category != null && !category.isEmpty()) {
            final ItemCategory categoryEnum = ItemCategory.valueOf(category.toUpperCase());
            spec = spec.and((root, query, cb) -> cb.equal(root.get("category"), categoryEnum));
        }
        
        if (status != null && !status.isEmpty()) {
            final ItemStatus statusEnum = ItemStatus.valueOf(status.toUpperCase());
            spec = spec.and((root, query, cb) -> cb.equal(root.get("status"), statusEnum));
        }
        
        return itemRepository.findAll(spec, pageable).map(this::convertToDto);
    }

    public ItemDto getItemById(Long id) {
        Item item = itemRepository.findById(id)
            .orElseThrow(() -> new ResourceNotFoundException("Item not found with id: " + id));
        return convertToDto(item);
    }

    @Transactional
    public ItemDto createItem(ItemDto itemDto, User user) {
        Item item = new Item();
        updateItemFromDto(item, itemDto);
        item.setReportedBy(user);
        item.setReportedAt(LocalDateTime.now());
        item.setStatus(ItemStatus.FOUND);
        Item savedItem = itemRepository.save(item);
        return convertToDto(savedItem);
    }

    @Transactional
    public ItemDto updateItem(Long id, ItemDto itemDto) {
        Item item = itemRepository.findById(id)
            .orElseThrow(() -> new ResourceNotFoundException("Item not found with id: " + id));
        updateItemFromDto(item, itemDto);
        return convertToDto(itemRepository.save(item));
    }

    @Transactional
    public void deleteItem(Long id) {
        if (!itemRepository.existsById(id)) {
            throw new RuntimeException("Item not found");
        }
        itemRepository.deleteById(id);
    }

    @Transactional
    public ItemDto claimItem(Long id, User user) {
        Item item = itemRepository.findById(id)
            .orElseThrow(() -> new RuntimeException("Item not found"));

        if (item.getStatus() != ItemStatus.FOUND) {
            throw new RuntimeException("Item cannot be claimed");
        }

        item.setStatus(ItemStatus.CLAIMED);
        item.setClaimedBy(user);
        item.setClaimedAt(LocalDateTime.now());
        item.setUpdatedAt(LocalDateTime.now());

        Item updatedItem = itemRepository.save(item);
        return convertToDto(updatedItem);
    }

    public void updateItemFromDto(Item item, ItemDto dto) {
        log.info("updateItemFromDto received ItemDto: {}", dto);
        try {
            item.setName(dto.getName());
            item.setDescription(dto.getDescription());
            item.setCategory(dto.getCategory());
            item.setStatus(dto.getStatus());
            item.setLocation(dto.getLocation());
            item.setImageUrl(dto.getImageUrl());
        } catch (Exception e) {
            log.error("Error in updateItemFromDto: ", e);
            throw e;
        }
    }

    protected ItemDto convertToDto(Item item) {
        ItemDto dto = new ItemDto();
        dto.setId(item.getId());
        dto.setName(item.getName());
        dto.setDescription(item.getDescription());
        dto.setCategory(item.getCategory());
        dto.setStatus(item.getStatus());
        dto.setLocation(item.getLocation());
        dto.setImageUrl(item.getImageUrl());
        
        if (item.getReportedBy() != null) {
            dto.setReportedById(item.getReportedBy().getId());
            dto.setReportedByUsername(item.getReportedBy().getUsername());
            dto.setReportedAt(item.getReportedAt());
        }
        
        if (item.getClaimedBy() != null) {
            dto.setClaimedById(item.getClaimedBy().getId());
            dto.setClaimedByUsername(item.getClaimedBy().getUsername());
            dto.setClaimedAt(item.getClaimedAt());
        }
        
        dto.setCreatedAt(item.getCreatedAt());
        dto.setUpdatedAt(item.getUpdatedAt());
        
        return dto;
    }
} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/service/SearchService.java =====
package com.recovr.api.service;

import com.recovr.api.dto.SearchRequestDto;
import com.recovr.api.dto.ImageMatchingDto;
import com.recovr.api.entity.*;
import com.recovr.api.repository.DetectedObjectRepository;
import com.recovr.api.repository.ItemRepository;
import com.recovr.api.repository.SearchRequestRepository;
import com.recovr.api.repository.UserRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.util.*;
import java.util.stream.Collectors;

@Slf4j
@Service
@RequiredArgsConstructor
public class SearchService {

    private final SearchRequestRepository searchRequestRepository;
    private final DetectedObjectRepository detectedObjectRepository;
    private final ItemRepository itemRepository;
    private final UserRepository userRepository;

    /**
     * Create a new search request
     */
    @Transactional
    public SearchRequestDto createSearchRequest(SearchRequestDto requestDto, String username) {
        User user = userRepository.findByUsername(username)
                .orElseThrow(() -> new RuntimeException("User not found"));

        SearchRequest request = new SearchRequest();
        request.setUser(user);
        request.setSearchImageUrl(requestDto.getSearchImageUrl());
        request.setDescription(requestDto.getDescription());
        request.setExpectedCategory(requestDto.getExpectedCategory());
        request.setMatchingThreshold(requestDto.getMatchingThreshold() != null ? 
            requestDto.getMatchingThreshold() : 0.7);
        request.setSearchLocation(requestDto.getSearchLocation());
        request.setSearchLatitude(requestDto.getSearchLatitude());
        request.setSearchLongitude(requestDto.getSearchLongitude());
        request.setSearchRadius(requestDto.getSearchRadius());
        request.setDateLostFrom(requestDto.getDateLostFrom());
        request.setDateLostTo(requestDto.getDateLostTo());
        request.setStatus(SearchStatus.PENDING);
        request.setTotalMatchesFound(0);

        SearchRequest savedRequest = searchRequestRepository.save(request);
        return convertToDto(savedRequest);
    }

    /**
     * Get search results for a request
     */
    @Transactional(readOnly = true)
    public SearchRequestDto getSearchResults(Long searchRequestId) {
        SearchRequest request = searchRequestRepository.findById(searchRequestId)
                .orElseThrow(() -> new RuntimeException("Search request not found"));

        if (request.getStatus() == SearchStatus.PENDING) {
            // Process the search request
            List<ImageMatching> matches = findMatchingItems(request);
            request.setMatchingResults(matches);
            request.setTotalMatchesFound(matches.size());
            request.setStatus(SearchStatus.COMPLETED);
            request.setProcessedAt(LocalDateTime.now());
            searchRequestRepository.save(request);
        }

        return convertToDto(request);
    }

    /**
     * Find items matching the search request
     */
    private List<ImageMatching> findMatchingItems(SearchRequest request) {
        // Get all detected objects within the time window
        List<DetectedObject> candidates = detectedObjectRepository.findByFirstDetectedBetween(
            request.getDateLostFrom() != null ? request.getDateLostFrom() : LocalDateTime.now().minusMonths(1),
            request.getDateLostTo() != null ? request.getDateLostTo() : LocalDateTime.now()
        );

        // Filter by category if specified
        if (request.getExpectedCategory() != null) {
            candidates = candidates.stream()
                .filter(obj -> obj.getCategory() == request.getExpectedCategory())
                .collect(Collectors.toList());
        }

        // Filter by location if specified
        if (request.getSearchLocation() != null && request.getSearchLatitude() != null && 
            request.getSearchLongitude() != null && request.getSearchRadius() != null) {
            // TODO: Implement location-based filtering
            // This would require adding location coordinates to DetectedObject
        }

        // Calculate similarity scores and create matches
        List<ImageMatching> matches = new ArrayList<>();
        for (DetectedObject candidate : candidates) {
            double similarityScore = calculateImageSimilarity(
                request.getSearchImageUrl(),
                candidate.getSnapshotUrl()
            );

            if (similarityScore >= request.getMatchingThreshold()) {
                ImageMatching match = new ImageMatching();
                match.setSearchRequest(request);
                match.setDetectedObject(candidate);
                match.setSimilarityScore(similarityScore);
                matches.add(match);
            }
        }

        // Sort by similarity score
        matches.sort((a, b) -> Double.compare(b.getSimilarityScore(), a.getSimilarityScore()));

        return matches;
    }

    /**
     * Calculate similarity between two images
     * This is a placeholder - in a real implementation, this would use a proper image similarity algorithm
     */
    private double calculateImageSimilarity(String image1Url, String image2Url) {
        // TODO: Implement proper image similarity calculation
        // For now, return a random score for demonstration
        return Math.random();
    }

    /**
     * Convert entity to DTO
     */
    private SearchRequestDto convertToDto(SearchRequest request) {
        SearchRequestDto dto = new SearchRequestDto();
        dto.setId(request.getId());
        dto.setSearchImageUrl(request.getSearchImageUrl());
        dto.setDescription(request.getDescription());
        dto.setExpectedCategory(request.getExpectedCategory());
        dto.setMatchingThreshold(request.getMatchingThreshold());
        dto.setSearchLocation(request.getSearchLocation());
        dto.setSearchLatitude(request.getSearchLatitude());
        dto.setSearchLongitude(request.getSearchLongitude());
        dto.setSearchRadius(request.getSearchRadius());
        dto.setDateLostFrom(request.getDateLostFrom());
        dto.setDateLostTo(request.getDateLostTo());
        dto.setStatus(request.getStatus());
        dto.setTotalMatchesFound(request.getTotalMatchesFound());
        dto.setUserId(request.getUser().getId());
        dto.setUsername(request.getUser().getUsername());
        dto.setProcessedAt(request.getProcessedAt());
        dto.setCreatedAt(request.getCreatedAt());
        dto.setUpdatedAt(request.getUpdatedAt());

        // Convert matching results to DTOs
        if (request.getMatchingResults() != null) {
            List<ImageMatchingDto> matchingDtos = request.getMatchingResults().stream()
                .map(match -> {
                    ImageMatchingDto matchDto = new ImageMatchingDto();
                    matchDto.setDetectedObjectId(match.getDetectedObject().getId());
                    matchDto.setSimilarityScore(match.getSimilarityScore());
                    matchDto.setCategory(match.getDetectedObject().getCategory());
                    matchDto.setLocation(match.getDetectedObject().getCameraLocation());
                    matchDto.setDetectedAt(match.getDetectedObject().getFirstDetected());
                    matchDto.setImageUrl(match.getDetectedObject().getSnapshotUrl());
                    return matchDto;
                })
                .collect(Collectors.toList());
            dto.setMatchingResults(matchingDtos);
        }

        return dto;
    }
} 


===== FILE: ./src/main/java/com/recovr/api/config/SecurityConfig.java =====
package com.recovr.api.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;

@Configuration
@EnableWebSecurity
public class SecurityConfig {
    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http
            .csrf(csrf -> csrf.disable())
            .authorizeHttpRequests(auth -> auth
                .anyRequest().permitAll()
            );
        return http.build();
    }

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }
} 


===== FILE: ./styles/globals.css =====
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  font-family: Arial, Helvetica, sans-serif;
}

@layer utilities {
  .text-balance {
    text-wrap: balance;
  }
}

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 0 0% 3.9%;
    --card: 0 0% 100%;
    --card-foreground: 0 0% 3.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 0 0% 3.9%;
    --primary: 0 0% 9%;
    --primary-foreground: 0 0% 98%;
    --secondary: 0 0% 96.1%;
    --secondary-foreground: 0 0% 9%;
    --muted: 0 0% 96.1%;
    --muted-foreground: 0 0% 45.1%;
    --accent: 0 0% 96.1%;
    --accent-foreground: 0 0% 9%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 89.8%;
    --input: 0 0% 89.8%;
    --ring: 0 0% 3.9%;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
    --radius: 0.5rem;
    --sidebar-background: 0 0% 98%;
    --sidebar-foreground: 240 5.3% 26.1%;
    --sidebar-primary: 240 5.9% 10%;
    --sidebar-primary-foreground: 0 0% 98%;
    --sidebar-accent: 240 4.8% 95.9%;
    --sidebar-accent-foreground: 240 5.9% 10%;
    --sidebar-border: 220 13% 91%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }
  .dark {
    --background: 0 0% 3.9%;
    --foreground: 0 0% 98%;
    --card: 0 0% 3.9%;
    --card-foreground: 0 0% 98%;
    --popover: 0 0% 3.9%;
    --popover-foreground: 0 0% 98%;
    --primary: 0 0% 98%;
    --primary-foreground: 0 0% 9%;
    --secondary: 0 0% 14.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 0 0% 14.9%;
    --muted-foreground: 0 0% 63.9%;
    --accent: 0 0% 14.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 14.9%;
    --input: 0 0% 14.9%;
    --ring: 0 0% 83.1%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
    --sidebar-background: 240 5.9% 10%;
    --sidebar-foreground: 240 4.8% 95.9%;
    --sidebar-primary: 224.3 76.3% 48%;
    --sidebar-primary-foreground: 0 0% 100%;
    --sidebar-accent: 240 3.7% 15.9%;
    --sidebar-accent-foreground: 240 4.8% 95.9%;
    --sidebar-border: 240 3.7% 15.9%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}



===== FILE: ./tailwind.config.ts =====
import type { Config } from "tailwindcss";

const config: Config = {
    darkMode: ["class"],
    content: [
    "./pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./components/**/*.{js,ts,jsx,tsx,mdx}",
    "./app/**/*.{js,ts,jsx,tsx,mdx}",
    "*.{js,ts,jsx,tsx,mdx}"
  ],
  theme: {
  	extend: {
  		colors: {
  			background: 'hsl(var(--background))',
  			foreground: 'hsl(var(--foreground))',
  			card: {
  				DEFAULT: 'hsl(var(--card))',
  				foreground: 'hsl(var(--card-foreground))'
  			},
  			popover: {
  				DEFAULT: 'hsl(var(--popover))',
  				foreground: 'hsl(var(--popover-foreground))'
  			},
  			primary: {
  				DEFAULT: 'hsl(var(--primary))',
  				foreground: 'hsl(var(--primary-foreground))'
  			},
  			secondary: {
  				DEFAULT: 'hsl(var(--secondary))',
  				foreground: 'hsl(var(--secondary-foreground))'
  			},
  			muted: {
  				DEFAULT: 'hsl(var(--muted))',
  				foreground: 'hsl(var(--muted-foreground))'
  			},
  			accent: {
  				DEFAULT: 'hsl(var(--accent))',
  				foreground: 'hsl(var(--accent-foreground))'
  			},
  			destructive: {
  				DEFAULT: 'hsl(var(--destructive))',
  				foreground: 'hsl(var(--destructive-foreground))'
  			},
  			border: 'hsl(var(--border))',
  			input: 'hsl(var(--input))',
  			ring: 'hsl(var(--ring))',
  			chart: {
  				'1': 'hsl(var(--chart-1))',
  				'2': 'hsl(var(--chart-2))',
  				'3': 'hsl(var(--chart-3))',
  				'4': 'hsl(var(--chart-4))',
  				'5': 'hsl(var(--chart-5))'
  			},
  			sidebar: {
  				DEFAULT: 'hsl(var(--sidebar-background))',
  				foreground: 'hsl(var(--sidebar-foreground))',
  				primary: 'hsl(var(--sidebar-primary))',
  				'primary-foreground': 'hsl(var(--sidebar-primary-foreground))',
  				accent: 'hsl(var(--sidebar-accent))',
  				'accent-foreground': 'hsl(var(--sidebar-accent-foreground))',
  				border: 'hsl(var(--sidebar-border))',
  				ring: 'hsl(var(--sidebar-ring))'
  			}
  		},
  		borderRadius: {
  			lg: 'var(--radius)',
  			md: 'calc(var(--radius) - 2px)',
  			sm: 'calc(var(--radius) - 4px)'
  		},
  		keyframes: {
  			'accordion-down': {
  				from: {
  					height: '0'
  				},
  				to: {
  					height: 'var(--radix-accordion-content-height)'
  				}
  			},
  			'accordion-up': {
  				from: {
  					height: 'var(--radix-accordion-content-height)'
  				},
  				to: {
  					height: '0'
  				}
  			}
  		},
  		animation: {
  			'accordion-down': 'accordion-down 0.2s ease-out',
  			'accordion-up': 'accordion-up 0.2s ease-out'
  		}
  	}
  },
  plugins: [require("tailwindcss-animate")],
};
export default config;



===== FILE: ./app/admin/layout.tsx =====
"use client";
import Link from 'next/link';
import React, { useEffect } from 'react';
import { useRouter } from 'next/navigation';

export default function AdminLayout({ children }: { children: React.ReactNode }) {
  const router = useRouter();
  useEffect(() => {
    if (typeof window !== 'undefined' && localStorage.getItem('isAdmin') !== 'true') {
      router.push('/admin/login');
    }
  }, [router]);

  return (
    <div className="flex min-h-screen">
      <aside className="w-64 bg-gray-900 text-white flex flex-col p-6 space-y-4">
        <h2 className="text-xl font-bold mb-8">Admin Panel</h2>
        <nav className="flex flex-col space-y-2">
          <Link href="/admin" className="hover:bg-gray-800 rounded px-3 py-2">Dashboard</Link>
          <Link href="/admin/users" className="hover:bg-gray-800 rounded px-3 py-2">Users</Link>
          <Link href="/admin/objects" className="hover:bg-gray-800 rounded px-3 py-2">Objects</Link>
          <button onClick={() => { localStorage.removeItem('isAdmin'); router.push('/admin/login'); }} className="hover:bg-gray-800 rounded px-3 py-2 mt-8 text-left">Logout</button>
        </nav>
      </aside>
      <section className="flex-1 bg-gray-50">
        {children}
      </section>
    </div>
  );
} 


===== FILE: ./app/admin/login/page.tsx =====
"use client";
import { useState } from "react";
import { useRouter } from "next/navigation";

export default function AdminLoginPage() {
  const [username, setUsername] = useState("");
  const [password, setPassword] = useState("");
  const [error, setError] = useState("");
  const router = useRouter();

  function handleSubmit(e: React.FormEvent) {
    e.preventDefault();
    // Simple check (replace with real backend auth later)
    if (username === "admin" && password === "admin123") {
      localStorage.setItem("isAdmin", "true");
      router.push("/admin");
    } else {
      setError("Invalid credentials");
    }
  }

  return (
    <div className="flex items-center justify-center min-h-screen bg-gray-100">
      <form onSubmit={handleSubmit} className="bg-white p-8 rounded shadow-md w-96">
        <h1 className="text-2xl font-bold mb-6">Admin Login</h1>
        {error && <div className="text-red-500 mb-4">{error}</div>}
        <input
          type="text"
          placeholder="Username"
          value={username}
          onChange={e => setUsername(e.target.value)}
          className="w-full mb-4 px-3 py-2 border rounded"
        />
        <input
          type="password"
          placeholder="Password"
          value={password}
          onChange={e => setPassword(e.target.value)}
          className="w-full mb-6 px-3 py-2 border rounded"
        />
        <button type="submit" className="w-full bg-blue-600 text-white py-2 rounded hover:bg-blue-700">Login</button>
      </form>
    </div>
  );
} 


===== FILE: ./app/admin/objects/page.tsx =====
"use client";
import React, { useEffect, useState } from "react";

interface LostObject {
  id: number;
  name: string;
  status: string;
}

const API_BASE = "http://localhost:8080";

export default function AdminObjectsPage() {
  const [objects, setObjects] = useState<LostObject[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");
  const [success, setSuccess] = useState("");

  useEffect(() => {
    setLoading(true);
    fetch(`${API_BASE}/admin/items`)
      .then(res => {
        if (!res.ok) throw new Error("Failed fetch objects");
        return res.json();
      })
      .then(data => {
        setObjects(data);
        setLoading(false);
      })
      .catch(err => {
        setError(err.message);
        setLoading(false);
      });
  }, []);

  function handleValidate(id: number) {
    setError(""); setSuccess("");
    fetch(`${API_BASE}/admin/items/${id}`, { method: "PUT", headers: { "Content-Type": "application/json" }, body: JSON.stringify({ status: "validated" }) })
      .then(res => {
        if (!res.ok) throw new Error("Failed update object");
        return res.json();
      })
      .then(updated => {
        setObjects(objs => objs.map(obj => (obj.id === id ? updated : obj)));
        setSuccess("Object validated successfully");
      })
      .catch(err => setError(err.message));
  }

  function handleDelete(id: number) {
    setError(""); setSuccess("");
    fetch(`${API_BASE}/admin/items/${id}`, { method: "DELETE" })
      .then(res => {
        if (!res.ok) throw new Error("Failed delete object");
        setObjects(objs => objs.filter(obj => obj.id !== id));
        setSuccess("Object deleted successfully");
      })
      .catch(err => setError(err.message));
  }

  return (
    <main className="p-8">
      <h1 className="text-2xl font-bold mb-4">Object Management</h1>
      {error && <div className="text-red-500 mb-2">{error}</div>}
      {success && <div className="text-green-600 mb-2">{success}</div>}
      {loading ? <p>Loading objects...</p> : (
        <table className="min-w-full bg-white border">
          <thead>
            <tr>
              <th className="px-4 py-2 border">Name</th>
              <th className="px-4 py-2 border">Status</th>
              <th className="px-4 py-2 border">Actions</th>
            </tr>
          </thead>
          <tbody>
            {objects.map(obj => (
              <tr key={obj.id}>
                <td className="px-4 py-2 border">{obj.name}</td>
                <td className="px-4 py-2 border">{obj.status}</td>
                <td className="px-4 py-2 border space-x-2">
                  {obj.status !== "validated" && (
                    <button onClick={() => handleValidate(obj.id)} className="bg-green-500 text-white px-3 py-1 rounded hover:bg-green-600">Validate</button>
                  )}
                  <button onClick={() => handleDelete(obj.id)} className="bg-red-500 text-white px-3 py-1 rounded hover:bg-red-600">Delete</button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      )}
    </main>
  );
} 


===== FILE: ./app/admin/page.tsx =====
"use client";
import React, { useEffect, useState } from "react";

const API_BASE = "http://localhost:8080";

export default function AdminDashboard() {
  const [stats, setStats] = useState<{ totalItems: number; totalUsers: number; totalAbandoned: number; totalClaimed: number; totalReturned: number }>({ totalItems: 0, totalUsers: 0, totalAbandoned: 0, totalClaimed: 0, totalReturned: 0 });
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");
  const [success, setSuccess] = useState("");

  useEffect(() => {
    setLoading(true);
    fetch(`${API_BASE}/admin/dashboard`)
      .then(res => {
        if (!res.ok) throw new Error("Failed fetch dashboard stats");
        return res.json();
      })
      .then(data => {
         // Assume backend returns AdminDashboardDto (with keys totalItems, totalUsers, totalAbandoned, totalClaimed, totalReturned)
         setStats({ totalItems: data.totalItems, totalUsers: data.totalUsers, totalAbandoned: data.totalAbandoned, totalClaimed: data.totalClaimed, totalReturned: data.totalReturned });
         setLoading(false);
      })
      .catch(err => {
         setError(err.message);
         setLoading(false);
      });
  }, []);

  return (
    <main className="p-8">
      <h1 className="text-3xl font-bold mb-4">Admin Dashboard</h1>
      <p>Welcome to the admin panel. Use the sidebar to manage users, objects, and more.</p>
      {error && <div className="text-red-500 mt-2">{error}</div>}
      {success && <div className="text-green-600 mt-2">{success}</div>}
      <div className="mt-8">
        {loading ? <p>Loading stats...</p> : (
          <div className="grid grid-cols-3 gap-6">
            <div className="bg-white rounded shadow p-6 text-center">
              <div className="text-2xl font-bold">{stats.totalItems}</div>
              <div className="text-gray-600">Total Items</div>
            </div>
            <div className="bg-white rounded shadow p-6 text-center">
              <div className="text-2xl font-bold">{stats.totalUsers}</div>
              <div className="text-gray-600">Total Users</div>
            </div>
            <div className="bg-white rounded shadow p-6 text-center">
              <div className="text-2xl font-bold">{stats.totalAbandoned}</div>
              <div className="text-gray-600">Total Abandoned</div>
            </div>
            <div className="bg-white rounded shadow p-6 text-center">
              <div className="text-2xl font-bold">{stats.totalClaimed}</div>
              <div className="text-gray-600">Total Claimed</div>
            </div>
            <div className="bg-white rounded shadow p-6 text-center">
              <div className="text-2xl font-bold">{stats.totalReturned}</div>
              <div className="text-gray-600">Total Returned</div>
            </div>
          </div>
        )}
      </div>
    </main>
  );
} 


===== FILE: ./app/admin/users/page.tsx =====
"use client";
import React, { useEffect, useState } from "react";

interface User {
  id: number;
  username: string;
  email: string;
}

const API_BASE = "http://localhost:8080";

export default function AdminUsersPage() {
  const [users, setUsers] = useState<User[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");
  const [success, setSuccess] = useState("");

  useEffect(() => {
    setLoading(true);
    fetch(`${API_BASE}/admin/users`)
      .then(res => {
        if (!res.ok) throw new Error("Failed fetch users");
        return res.json();
      })
      .then(data => {
         // Assume backend returns a list of UserDto (with keys id, username, email)
         setUsers(data);
         setLoading(false);
      })
      .catch(err => {
         setError(err.message);
         setLoading(false);
      });
  }, []);

  function handleDelete(id: number) {
    setError(""); setSuccess("");
    fetch(`${API_BASE}/admin/users/${id}`, { method: "DELETE" })
      .then(res => {
         if (!res.ok) throw new Error("Failed delete user");
         setUsers(users => users.filter(u => u.id !== id));
         setSuccess("User deleted successfully");
      })
      .catch(err => setError(err.message));
  }

  return (
    <main className="p-8">
      <h1 className="text-2xl font-bold mb-4">User Management</h1>
      {error && <div className="text-red-500 mb-2">{error}</div>}
      {success && <div className="text-green-600 mb-2">{success}</div>}
      {loading ? <p>Loading users...</p> : (
        <table className="min-w-full bg-white border">
          <thead>
            <tr>
              <th className="px-4 py-2 border">Username</th>
              <th className="px-4 py-2 border">Email</th>
              <th className="px-4 py-2 border">Actions</th>
            </tr>
          </thead>
          <tbody>
            {users.map(user => (
              <tr key={user.id}>
                <td className="px-4 py-2 border">{user.username}</td>
                <td className="px-4 py-2 border">{user.email}</td>
                <td className="px-4 py-2 border">
                  <button onClick={() => handleDelete(user.id)} className="bg-red-500 text-white px-3 py-1 rounded hover:bg-red-600">Delete</button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      )}
    </main>
  );
} 


===== FILE: ./app/analytics/page.tsx =====
"use client"

import { useState } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Tabs, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Button } from "@/components/ui/button"
import { Calendar } from "@/components/ui/calendar"
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover"
import { format } from "date-fns"
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  Legend,
  ResponsiveContainer,
  PieChart,
  Pie,
  Cell,
  LineChart,
  Line,
  AreaChart,
  Area,
  ScatterChart,
  Scatter,
  ZAxis,
  RadarChart,
  PolarGrid,
  PolarAngleAxis,
  PolarRadiusAxis,
  Radar,
} from "recharts"
import { CalendarIcon, Download, Share2 } from "lucide-react"

// Mock data for analytics
const MONTHLY_DETECTIONS = [
  { name: "Jan", bags: 65, electronics: 42, accessories: 28, other: 15 },
  { name: "Feb", bags: 59, electronics: 39, accessories: 32, other: 18 },
  { name: "Mar", bags: 80, electronics: 48, accessories: 35, other: 21 },
  { name: "Apr", bags: 81, electronics: 55, accessories: 30, other: 19 },
  { name: "May", bags: 56, electronics: 49, accessories: 38, other: 22 },
  { name: "Jun", bags: 55, electronics: 51, accessories: 35, other: 25 },
  { name: "Jul", bags: 40, electronics: 37, accessories: 30, other: 20 },
  { name: "Aug", bags: 45, electronics: 43, accessories: 36, other: 22 },
  { name: "Sep", bags: 62, electronics: 50, accessories: 39, other: 26 },
  { name: "Oct", bags: 68, electronics: 56, accessories: 45, other: 28 },
  { name: "Nov", bags: 71, electronics: 60, accessories: 50, other: 30 },
  { name: "Dec", bags: 85, electronics: 65, accessories: 55, other: 35 },
]

const RECOVERY_TREND = [
  { name: "Jan", rate: 65 },
  { name: "Feb", rate: 68 },
  { name: "Mar", rate: 72 },
  { name: "Apr", rate: 75 },
  { name: "May", rate: 82 },
  { name: "Jun", rate: 85 },
  { name: "Jul", rate: 86 },
  { name: "Aug", rate: 88 },
  { name: "Sep", rate: 87 },
  { name: "Oct", rate: 89 },
  { name: "Nov", rate: 90 },
  { name: "Dec", rate: 92 },
]

const LOCATION_DISTRIBUTION = [
  { name: "Library", value: 32 },
  { name: "Cafeteria", value: 24 },
  { name: "Computer Lab", value: 18 },
  { name: "Main Hall", value: 14 },
  { name: "Gym", value: 12 },
]

const COLORS = ["#0088FE", "#00C49F", "#FFBB28", "#FF8042", "#8884D8"]

const DETECTION_TIME = [
  { hour: "00:00", count: 5 },
  { hour: "02:00", count: 3 },
  { hour: "04:00", count: 2 },
  { hour: "06:00", count: 8 },
  { hour: "08:00", count: 25 },
  { hour: "10:00", count: 38 },
  { hour: "12:00", count: 45 },
  { hour: "14:00", count: 42 },
  { hour: "16:00", count: 35 },
  { hour: "18:00", count: 28 },
  { hour: "20:00", count: 15 },
  { hour: "22:00", count: 8 },
]

const DETECTION_ACCURACY = [
  { category: "Bags", accuracy: 94 },
  { category: "Electronics", accuracy: 92 },
  { category: "Accessories", accuracy: 88 },
  { category: "Clothing", accuracy: 85 },
  { category: "Other", accuracy: 80 },
]

const DETECTION_SCATTER = [
  { x: 10, y: 30, z: 200, name: "Backpack" },
  { x: 30, y: 100, z: 260, name: "Laptop" },
  { x: 45, y: 150, z: 280, name: "Smartphone" },
  { x: 70, y: 220, z: 375, name: "Wallet" },
  { x: 90, y: 70, z: 190, name: "Water Bottle" },
  { x: 110, y: 130, z: 320, name: "Umbrella" },
  { x: 150, y: 185, z: 280, name: "Headphones" },
  { x: 170, y: 210, z: 340, name: "Tablet" },
  { x: 190, y: 160, z: 270, name: "Book" },
]

export default function AnalyticsPage() {
  const [date, setDate] = useState(new Date())
  const [timeRange, setTimeRange] = useState("year")

  return (
    <div className="container py-8">
      <div className="flex flex-col space-y-6">
        <div className="flex flex-col space-y-2">
          <h1 className="text-3xl font-bold">Analytics Dashboard</h1>
          <p className="text-muted-foreground">
            Comprehensive analytics and insights for the lost object detection system
          </p>
        </div>

        <div className="flex flex-col md:flex-row justify-between items-center gap-4">
          <Tabs defaultValue="year" value={timeRange} onValueChange={setTimeRange} className="w-full md:w-auto">
            <TabsList>
              <TabsTrigger value="day">Day</TabsTrigger>
              <TabsTrigger value="week">Week</TabsTrigger>
              <TabsTrigger value="month">Month</TabsTrigger>
              <TabsTrigger value="year">Year</TabsTrigger>
            </TabsList>
          </Tabs>

          <div className="flex items-center gap-2">
            <Popover>
              <PopoverTrigger asChild>
                <Button variant="outline" className="w-[240px] justify-start text-left font-normal">
                  <CalendarIcon className="mr-2 h-4 w-4" />
                  {date ? format(date, "PPP") : <span>Pick a date</span>}
                </Button>
              </PopoverTrigger>
              <PopoverContent className="w-auto p-0" align="end">
                <Calendar mode="single" selected={date} onSelect={(date) => date && setDate(date)} initialFocus />
              </PopoverContent>
            </Popover>

            <Button variant="outline" size="icon">
              <Download className="h-4 w-4" />
            </Button>
            <Button variant="outline" size="icon">
              <Share2 className="h-4 w-4" />
            </Button>
          </div>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
          <Card>
            <CardHeader className="pb-2">
              <CardTitle className="text-sm font-medium">Total Detections</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">1,248</div>
              <p className="text-xs text-muted-foreground">+12.5% from previous period</p>
            </CardContent>
          </Card>
          <Card>
            <CardHeader className="pb-2">
              <CardTitle className="text-sm font-medium">Recovery Rate</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">92%</div>
              <p className="text-xs text-muted-foreground">+7% from previous period</p>
            </CardContent>
          </Card>
          <Card>
            <CardHeader className="pb-2">
              <CardTitle className="text-sm font-medium">Avg. Detection Time</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">28s</div>
              <p className="text-xs text-muted-foreground">-2.1s from previous period</p>
            </CardContent>
          </Card>
          <Card>
            <CardHeader className="pb-2">
              <CardTitle className="text-sm font-medium">Detection Accuracy</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">94%</div>
              <p className="text-xs text-muted-foreground">+1.5% from previous period</p>
            </CardContent>
          </Card>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          <Card>
            <CardHeader>
              <CardTitle>Monthly Detections by Category</CardTitle>
              <CardDescription>Number of objects detected per month by category</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="h-[400px]">
                <ResponsiveContainer width="100%" height="100%">
                  <BarChart data={MONTHLY_DETECTIONS} margin={{ top: 20, right: 30, left: 0, bottom: 0 }}>
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis dataKey="name" />
                    <YAxis />
                    <Tooltip />
                    <Legend />
                    <Bar dataKey="bags" name="Bags" fill="#0088FE" />
                    <Bar dataKey="electronics" name="Electronics" fill="#00C49F" />
                    <Bar dataKey="accessories" name="Accessories" fill="#FFBB28" />
                    <Bar dataKey="other" name="Other" fill="#FF8042" />
                  </BarChart>
                </ResponsiveContainer>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle>Recovery Rate Trend</CardTitle>
              <CardDescription>Percentage of items recovered over time</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="h-[400px]">
                <ResponsiveContainer width="100%" height="100%">
                  <AreaChart data={RECOVERY_TREND} margin={{ top: 20, right: 30, left: 0, bottom: 0 }}>
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis dataKey="name" />
                    <YAxis />
                    <Tooltip />
                    <Area type="monotone" dataKey="rate" stroke="#0088FE" fill="#0088FE" fillOpacity={0.2} />
                  </AreaChart>
                </ResponsiveContainer>
              </div>
            </CardContent>
          </Card>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          <Card>
            <CardHeader>
              <CardTitle>Location Distribution</CardTitle>
              <CardDescription>Areas with most lost items</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="h-[300px]">
                <ResponsiveContainer width="100%" height="100%">
                  <PieChart>
                    <Pie
                      data={LOCATION_DISTRIBUTION}
                      cx="50%"
                      cy="50%"
                      labelLine={false}
                      outerRadius={80}
                      fill="#8884d8"
                      dataKey="value"
                      label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}
                    >
                      {LOCATION_DISTRIBUTION.map((entry, index) => (
                        <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                      ))}
                    </Pie>
                    <Tooltip />
                  </PieChart>
                </ResponsiveContainer>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle>Detection Time Distribution</CardTitle>
              <CardDescription>Number of detections by time of day</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="h-[300px]">
                <ResponsiveContainer width="100%" height="100%">
                  <LineChart data={DETECTION_TIME} margin={{ top: 20, right: 30, left: 0, bottom: 0 }}>
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis dataKey="hour" />
                    <YAxis />
                    <Tooltip />
                    <Line type="monotone" dataKey="count" stroke="#0088FE" strokeWidth={2} />
                  </LineChart>
                </ResponsiveContainer>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle>Detection Accuracy by Category</CardTitle>
              <CardDescription>Model accuracy for different object types</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="h-[300px]">
                <ResponsiveContainer width="100%" height="100%">
                  <RadarChart cx="50%" cy="50%" outerRadius={80} data={DETECTION_ACCURACY}>
                    <PolarGrid />
                    <PolarAngleAxis dataKey="category" />
                    <PolarRadiusAxis angle={30} domain={[0, 100]} />
                    <Radar
                      name="Accuracy"
                      dataKey="accuracy"
                      stroke="#0088FE"
                      fill="#0088FE"
                      fillOpacity={0.6}
                    />
                    <Tooltip />
                  </RadarChart>
                </ResponsiveContainer>
              </div>
            </CardContent>
          </Card>
        </div>

        <Card>
          <CardHeader>
            <CardTitle>Object Detection Correlation</CardTitle>
            <CardDescription>
              Relationship between detection time (x), confidence score (y), and object size (z)
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="h-[400px]">
              <ResponsiveContainer width="100%" height="100%">
                <ScatterChart margin={{ top: 20, right: 30, bottom: 10, left: 10 }}>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis
                    dataKey="x"
                    name="Processing Time"
                    unit="ms"
                    label={{ value: "Processing Time (ms)", position: "bottom", offset: 0 }}
                  />
                  <YAxis
                    dataKey="y"
                    name="Confidence"
                    unit="%"
                    label={{ value: "Confidence Score (%)", angle: -90, position: "left" }}
                  />
                  <ZAxis dataKey="z" range={[60, 400]} name="Size" unit="px" />
                  <Tooltip cursor={{ strokeDasharray: "3 3" }} />
                  <Legend />
                  <Scatter name="Objects" data={DETECTION_SCATTER} fill="#0088FE" />
                </ScatterChart>
              </ResponsiveContainer>
            </div>
          </CardContent>
        </Card>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          <Card>
            <CardHeader>
              <CardTitle>System Performance Metrics</CardTitle>
              <CardDescription>Key performance indicators over time</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="h-[300px]">
                <ResponsiveContainer width="100%" height="100%">
                  <LineChart
                    data={[
                      { name: "Jan", cpu: 45, memory: 60, storage: 30 },
                      { name: "Feb", cpu: 50, memory: 65, storage: 35 },
                      { name: "Mar", cpu: 55, memory: 70, storage: 40 },
                      { name: "Apr", cpu: 60, memory: 75, storage: 45 },
                      { name: "May", cpu: 65, memory: 80, storage: 50 },
                      { name: "Jun", cpu: 70, memory: 85, storage: 55 },
                      { name: "Jul", cpu: 75, memory: 90, storage: 60 },
                      { name: "Aug", cpu: 70, memory: 85, storage: 65 },
                      { name: "Sep", cpu: 65, memory: 80, storage: 70 },
                      { name: "Oct", cpu: 60, memory: 75, storage: 75 },
                      { name: "Nov", cpu: 55, memory: 70, storage: 80 },
                      { name: "Dec", cpu: 50, memory: 65, storage: 85 },
                    ]}
                    margin={{ top: 20, right: 30, left: 0, bottom: 0 }}
                  >
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis dataKey="name" />
                    <YAxis />
                    <Tooltip />
                    <Legend />
                    <Line type="monotone" dataKey="cpu" name="CPU Usage (%)" stroke="#0088FE" />
                    <Line type="monotone" dataKey="memory" name="Memory Usage (%)" stroke="#00C49F" />
                    <Line type="monotone" dataKey="storage" name="Storage Usage (%)" stroke="#FFBB28" />
                  </LineChart>
                </ResponsiveContainer>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle>User Activity</CardTitle>
              <CardDescription>System usage and user interactions</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="h-[300px]">
                <ResponsiveContainer width="100%" height="100%">
                  <BarChart
                    data={[
                      { name: "Jan", reports: 120, searches: 180, claims: 45 },
                      { name: "Feb", reports: 110, searches: 165, claims: 40 },
                      { name: "Mar", reports: 130, searches: 200, claims: 55 },
                      { name: "Apr", reports: 125, searches: 195, claims: 50 },
                      { name: "May", reports: 140, searches: 220, claims: 65 },
                      { name: "Jun", reports: 135, searches: 210, claims: 60 },
                      { name: "Jul", reports: 145, searches: 230, claims: 70 },
                      { name: "Aug", reports: 150, searches: 235, claims: 75 },
                      { name: "Sep", reports: 155, searches: 240, claims: 80 },
                      { name: "Oct", reports: 160, searches: 250, claims: 85 },
                      { name: "Nov", reports: 165, searches: 260, claims: 90 },
                      { name: "Dec", reports: 170, searches: 270, claims: 95 },
                    ]}
                    margin={{ top: 20, right: 30, left: 0, bottom: 0 }}
                  >
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis dataKey="name" />
                    <YAxis />
                    <Tooltip />
                    <Legend />
                    <Bar dataKey="reports" name="Reports" fill="#0088FE" />
                    <Bar dataKey="searches" name="Searches" fill="#00C49F" />
                    <Bar dataKey="claims" name="Claims" fill="#FFBB28" />
                  </BarChart>
                </ResponsiveContainer>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  )
}



===== FILE: ./app/api/auth/[...nextauth]/route.ts =====
import NextAuth from "next-auth"
import { authOptions } from "@/lib/auth-options"

// Export authOptions for use in other files
export { authOptions }

// Export the NextAuth handler
const handler = NextAuth(authOptions)

export { handler as GET, handler as POST }



===== FILE: ./app/api/auth/register/route.ts =====
import { NextResponse } from "next/server";
import bcrypt from "bcryptjs";
import { z } from "zod";

// User registration schema for validation
const userSchema = z.object({
  name: z.string().min(2, "Name must be at least 2 characters"),
  email: z.string().email("Invalid email address"),
  password: z.string().min(8, "Password must be at least 8 characters"),
  contactInformation: z.string().optional(),
});

// Define the User type to avoid type errors
type MockUser = {
  _id: string;
  name: string;
  email: string;
  password: string;
  role: string;
  contactInformation?: string;
};

// Mock database for development
let mockUsers: MockUser[] = [
  {
    _id: "user-1",
    name: "Test User",
    email: "test@example.com",
    password: bcrypt.hashSync("password123", 12),
    role: "user",
    contactInformation: "555-123-4567",
  }
];

export async function POST(request: Request) {
  try {
    const body = await request.json();

    // Validate request body
    const validation = userSchema.safeParse(body);
    if (!validation.success) {
      return NextResponse.json(
        { error: "Invalid data", details: validation.error.issues },
        { status: 400 }
      );
    }

    const { name, email, password, contactInformation } = validation.data;

    // In development, simulate database operations with mock data
    // Check if user already exists
    const existingUser = mockUsers.find(user => user.email === email);
    if (existingUser) {
      return NextResponse.json(
        { error: "User already exists with this email" },
        { status: 400 }
      );
    }

    // Hash the password
    const hashedPassword = await bcrypt.hash(password, 12);

    // Create new user in mock database
    const newUser: MockUser = {
      _id: `user-${mockUsers.length + 1}`,
      name,
      email,
      password: hashedPassword,
      contactInformation,
      role: "user",
    };
    
    mockUsers.push(newUser);

    // Remove password from response
    const safeUser = {
      id: newUser._id,
      name: newUser.name,
      email: newUser.email,
    };

    console.log("User registered successfully:", email);
    
    return NextResponse.json(
      { message: "User registered successfully", user: safeUser },
      { status: 201 }
    );
  } catch (error) {
    console.error("Error registering user:", error);
    return NextResponse.json(
      { error: "An error occurred during registration" },
      { status: 500 }
    );
  }
} 


===== FILE: ./app/api/dashboard/route.ts =====
import { NextRequest, NextResponse } from 'next/server';

const API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8080';

export async function GET(request: NextRequest) {
  try {
    // Get the time range from query parameters
    const searchParams = request.nextUrl.searchParams;
    const timeRange = searchParams.get('timeRange') || 'week';

    // Fetch all dashboard data in parallel
    const [stats, recentDetections, categoryDistribution, recoveryRate] = await Promise.all([
      // Get overall statistics
      fetch(`${API_BASE_URL}/api/dashboard/stats?timeRange=${timeRange}`).then(res => res.json()),
      
      // Get recent detections
      fetch(`${API_BASE_URL}/api/detection/recent?limit=5`).then(res => res.json()),
      
      // Get category distribution
      fetch(`${API_BASE_URL}/api/dashboard/categories`).then(res => res.json()),
      
      // Get recovery rate over time
      fetch(`${API_BASE_URL}/api/dashboard/recovery-rate?timeRange=${timeRange}`).then(res => res.json())
    ]);

    // Transform the data to match the frontend format
    const transformedData = {
      stats: {
        totalDetections: stats.totalDetections,
        detectionChange: stats.detectionChange,
        recoveryRate: stats.recoveryRate,
        recoveryChange: stats.recoveryChange,
        activeUsers: stats.activeUsers,
        userChange: stats.userChange,
      },
      recentDetections: recentDetections.map((detection: any) => ({
        id: detection.id,
        name: detection.name || 'Unnamed Item',
        location: detection.location || 'Unknown Location',
        timestamp: detection.detectionDate,
        image: detection.imageUrl || '/placeholder.svg',
        confidence: Math.round(detection.confidence * 100),
      })),
      categoryDistribution: categoryDistribution.map((cat: any) => ({
        name: cat.name,
        value: cat.count,
      })),
      recoveryRate: recoveryRate.map((rate: any) => ({
        name: rate.month,
        rate: rate.percentage,
      })),
    };

    return NextResponse.json(transformedData);
  } catch (error) {
    console.error('Error fetching dashboard data:', error);
    return NextResponse.json(
      { error: 'Failed to fetch dashboard data' },
      { status: 500 }
    );
  }
} 


===== FILE: ./app/api/lost-objects/route.ts =====
import { NextRequest, NextResponse } from 'next/server';
import connectToDatabase from "@/lib/mongodb"
import LostObject from "@/lib/models/LostObject"
import { getServerSession } from "next-auth"
import { authOptions } from "@/app/api/auth/[...nextauth]/route"

const API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8080';

// GET /api/lost-objects
export async function GET(request: NextRequest) {
  try {
    // Get search parameters from the request
    const searchParams = request.nextUrl.searchParams;
    const query = searchParams.get('query');
    const category = searchParams.get('category');
    const page = searchParams.get('page') || '0';
    const size = searchParams.get('size') || '10';
    
    // Build the API URL with query parameters
    let url = `${API_BASE_URL}/api/items/public?page=${page}&size=${size}`;
    if (query) url += `&query=${encodeURIComponent(query)}`;
    if (category && category !== 'all') url += `&category=${encodeURIComponent(category)}`;

    // Fetch data from Spring Boot backend
    const response = await fetch(url, {
      headers: {
        'Content-Type': 'application/json',
      },
    });

    if (!response.ok) {
      throw new Error(`API responded with status: ${response.status}`);
    }

    const data = await response.json();

    // Transform the data to match the frontend format
    const transformedData = {
      objects: data.content.map((item: any) => ({
        id: item.id,
        name: item.name || 'Unnamed Item',
        location: item.location || 'Unknown Location',
        date: item.detectionDate ? new Date(item.detectionDate).toISOString().split('T')[0] : 'Unknown Date',
        time: item.detectionDate ? new Date(item.detectionDate).toTimeString().split(' ')[0] : 'Unknown Time',
        image: item.imageUrl || '/placeholder.svg',
        category: item.category?.toLowerCase() || 'other',
        description: item.description,
        status: item.status,
      })),
      totalItems: data.totalElements,
      totalPages: data.totalPages,
      currentPage: data.number,
    };
    
    return NextResponse.json(transformedData);
  } catch (error) {
    console.error('Error fetching lost objects:', error);
    return NextResponse.json(
      { error: 'Failed to fetch lost objects' },
      { status: 500 }
    );
  }
}

// POST /api/lost-objects
export async function POST(request: Request) {
  try {
    await connectToDatabase()
    
    // Get session or use mock user if session is not available
    let session = null
    try {
      session = await getServerSession(authOptions)
    } catch (err) {
      console.warn("Session error:", err)
    }
    
    // Create a mock session for development if needed
    if (!session && process.env.NODE_ENV === 'development') {
      console.warn("Using mock session for development")
      session = {
        user: {
          id: 'mock-user-id',
          email: 'mock@example.com',
          name: 'Mock User'
        }
      }
    }
    
    // Check authentication in production
    if (!session && process.env.NODE_ENV === 'production') {
      return NextResponse.json(
        { error: "Authentication required" },
        { status: 401 }
      )
    }
    
    const data = await request.json()

    // Validate required fields
    if (!data.name || !data.location || !data.category || !data.image) {
      return NextResponse.json(
        { error: "Missing required fields" },
        { status: 400 }
      )
    }

    let newObject
    try {
      // Create new object with user reference
      newObject = await LostObject.create({
        ...data,
        reporter: session?.user?.id || 'anonymous',
        date: data.date || new Date(),
        time: data.time || new Date().toTimeString().split(" ")[0].substring(0, 5),
        status: "found"
      })
    } catch (err) {
      console.warn("Error creating document in database:", err)
      
      // Create a mock response for development
      if (process.env.NODE_ENV === 'development') {
        newObject = {
          _id: `mock-${Date.now()}`,
          ...data,
          reporter: session?.user?.id || 'anonymous',
          date: data.date || new Date(),
          time: data.time || new Date().toTimeString().split(" ")[0].substring(0, 5),
          status: "found",
          createdAt: new Date()
        }
      } else {
        throw err
      }
    }

    return NextResponse.json(
      { message: "Object reported successfully", object: newObject },
      { status: 201 }
    )
  } catch (error) {
    console.error("Error creating lost object:", error)
    return NextResponse.json(
      { error: "Failed to process request" },
      { status: 500 }
    )
  }
}



===== FILE: ./app/api/search/image/route.ts =====
import { NextRequest, NextResponse } from 'next/server';

const API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8080';

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { features, minScore } = body;
    
    if (!features || !Array.isArray(features)) {
      return NextResponse.json(
        { error: 'Invalid features data' },
        { status: 400 }
      );
    }
    
    // Send search request to Spring Boot backend
    const response = await fetch(`${API_BASE_URL}/api/search/image`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        features,
        minScore: minScore || 0.7,
      }),
    });

    if (!response.ok) {
      throw new Error(`API responded with status: ${response.status}`);
    }

    const data = await response.json();

    // Transform the results to match the frontend format
    const transformedResults = data.results.map((item: any) => ({
      id: item.id,
      name: item.name || 'Unnamed Item',
      location: item.location || 'Unknown Location',
      date: item.detectionDate ? new Date(item.detectionDate).toISOString().split('T')[0] : 'Unknown Date',
      image: item.imageUrl || '/placeholder.svg',
      matchScore: Math.round(item.similarityScore * 100),
      category: item.category?.toLowerCase() || 'other',
    }));
    
    return NextResponse.json({
      results: transformedResults,
      totalMatches: data.totalMatches,
    });
  } catch (error) {
    console.error('Error performing image search:', error);
    return NextResponse.json(
      { error: 'Failed to perform image search' },
      { status: 500 }
    );
  }
}

// Add server config to handle larger payloads (feature vectors)
export const config = {
  api: {
    responseLimit: '8mb',
    bodyParser: {
      sizeLimit: '8mb',
    },
  },
}; 


===== FILE: ./app/api/search/route.ts =====
import { NextResponse } from "next/server"

// Mock database for lost objects (same as in lost-objects route)
const MOCK_LOST_OBJECTS = [
  {
    id: 1,
    name: "Black Backpack",
    location: "Library, 2nd Floor",
    date: "2025-05-15",
    time: "14:30",
    image: "/placeholder.svg?height=200&width=200",
    category: "bag",
    description: "Black backpack with red logo, contains laptop and notebooks",
    status: "found",
    coordinates: { x: 150, y: 120 },
  },
  {
    id: 2,
    name: "Blue Smartphone",
    location: "Cafeteria",
    date: "2025-05-16",
    time: "12:15",
    image: "/placeholder.svg?height=200&width=200",
    category: "electronics",
    description: "Samsung Galaxy S22, blue case with scratches on screen",
    status: "found",
    coordinates: { x: 320, y: 280 },
  },
  // More objects would be here in a real implementation
]

// POST /api/search
export async function POST(request: Request) {
  try {
    const data = await request.json()

    // This would be where the image matching algorithm would run
    // For now, we'll simulate results with mock data and random match scores

    if (data.searchType === "photo") {
      // In a real implementation, this would:
      // 1. Process the uploaded image
      // 2. Extract features or embeddings
      // 3. Compare with database images
      // 4. Return matches with confidence scores

      // For demo purposes, return mock results with simulated match scores
      const results = MOCK_LOST_OBJECTS.filter((obj) => obj.category === (data.category || obj.category))
        .map((obj) => ({
          ...obj,
          matchScore: Math.floor(Math.random() * 40) + 60, // Random score between 60-99
        }))
        .sort((a, b) => b.matchScore - a.matchScore)
        .slice(0, 5) // Return top 5 matches

      return NextResponse.json({ results })
    } else if (data.searchType === "details") {
      // Filter objects based on provided details
      let filteredObjects = [...MOCK_LOST_OBJECTS]

      if (data.category) {
        filteredObjects = filteredObjects.filter((obj) => obj.category === data.category)
      }

      if (data.color) {
        filteredObjects = filteredObjects.filter((obj) =>
          obj.description.toLowerCase().includes(data.color.toLowerCase()),
        )
      }

      if (data.description) {
        const keywords = data.description.toLowerCase().split(" ")
        filteredObjects = filteredObjects.filter((obj) =>
          keywords.some(
            (keyword) => obj.name.toLowerCase().includes(keyword) || obj.description.toLowerCase().includes(keyword),
          ),
        )
      }

      if (data.location) {
        filteredObjects = filteredObjects.filter((obj) =>
          obj.location.toLowerCase().includes(data.location.toLowerCase()),
        )
      }

      // Calculate a simple relevance score
      const results = filteredObjects
        .map((obj) => {
          let score = 70 // Base score

          // Increase score based on matches
          if (data.category && obj.category === data.category) score += 10
          if (data.color && obj.description.toLowerCase().includes(data.color.toLowerCase())) score += 5
          if (data.location && obj.location.toLowerCase().includes(data.location.toLowerCase())) score += 5

          return {
            ...obj,
            matchScore: Math.min(score, 99), // Cap at 99
          }
        })
        .sort((a, b) => b.matchScore - a.matchScore)

      return NextResponse.json({ results })
    }

    return NextResponse.json({ error: "Invalid search type" }, { status: 400 })
  } catch (error) {
    return NextResponse.json({ error: "Failed to process search request" }, { status: 500 })
  }
}



===== FILE: ./app/api/upload/route.ts =====
import { NextResponse } from "next/server";
import { getServerSession } from "next-auth";
import { authOptions } from "@/app/api/auth/[...nextauth]/route";
import { uploadImage } from "@/lib/cloudinary";
import { extractImageFeatures } from "@/lib/ai/feature-extraction";

// Maximum file size (5MB)
const MAX_FILE_SIZE = 5 * 1024 * 1024;

export async function POST(request: Request) {
  try {
    // Check authentication
    let session = null;
    try {
      session = await getServerSession(authOptions);
    } catch (err) {
      console.warn("Session error:", err);
    }
    
    // In development, allow uploads without authentication
    if (!session && process.env.NODE_ENV !== 'development') {
      return NextResponse.json(
        { error: "Authentication required" },
        { status: 401 }
      );
    }

    // Parse form data with file
    const formData = await request.formData();
    const file = formData.get("file") as File | null;

    if (!file) {
      return NextResponse.json(
        { error: "No file provided" },
        { status: 400 }
      );
    }

    // Validate file type
    if (!file.type.startsWith("image/")) {
      return NextResponse.json(
        { error: "File must be an image" },
        { status: 400 }
      );
    }

    // Validate file size
    if (file.size > MAX_FILE_SIZE) {
      return NextResponse.json(
        { error: "File size exceeds 5MB limit" },
        { status: 400 }
      );
    }

    // Convert file to buffer
    const bytes = await file.arrayBuffer();
    const buffer = Buffer.from(bytes);

    // Upload to Cloudinary
    const imageData = await uploadImage(buffer);

    // Extract image features for AI matching (if available)
    let features = null;
    try {
      features = await extractImageFeatures(imageData.url);
    } catch (error) {
      console.warn("Feature extraction failed:", error);
      // Continue without features if extraction fails
    }

    return NextResponse.json({
      success: true,
      image: {
        url: imageData.url,
        publicId: imageData.publicId,
        width: imageData.width,
        height: imageData.height,
        features,
      },
    });
  } catch (error) {
    console.error("Error uploading image:", error);
    return NextResponse.json(
      { error: "Image upload failed" },
      { status: 500 }
    );
  }
}

// Configure Next.js to handle larger file sizes
export const config = {
  api: {
    bodyParser: false,
    responseLimit: '10mb',
  },
}; 


===== FILE: ./app/auth/register/page.tsx =====
"use client"

import { useState } from "react"
import { useForm } from "react-hook-form"
import { zodResolver } from "@hookform/resolvers/zod"
import { z } from "zod"
import { useRouter } from "next/navigation"
import Link from "next/link"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { Loader2 } from "lucide-react"

// Form validation schema
const registerSchema = z.object({
  name: z.string().min(2, "Name must be at least 2 characters"),
  email: z.string().email("Please enter a valid email address"),
  password: z.string().min(8, "Password must be at least 8 characters"),
  contactInformation: z.string().optional(),
})
.refine(data => data.name.trim().length > 0, {
  message: "Name cannot be empty",
  path: ["name"],
})

type RegisterFormValues = z.infer<typeof registerSchema>

export default function RegisterPage() {
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const [success, setSuccess] = useState(false)
  const router = useRouter()

  const { register, handleSubmit, formState: { errors } } = useForm<RegisterFormValues>({
    resolver: zodResolver(registerSchema),
    defaultValues: {
      name: "",
      email: "",
      password: "",
      contactInformation: "",
    },
  })

  const onSubmit = async (data: RegisterFormValues) => {
    setLoading(true)
    setError(null)
    setSuccess(false)

    try {
      console.log("Attempting to register:", data.email);
      
      const response = await fetch("/api/auth/register", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(data),
      })

      const result = await response.json()

      if (!response.ok) {
        // Show existing account message for test@example.com
        if (data.email === "test@example.com") {
          setError("This email is already in use. Please try another email or sign in.")
        } else {
          setError(result.error || "Registration failed")
        }
        setLoading(false)
        return
      }

      setSuccess(true)
      
      // Redirect to sign in page after short delay
      setTimeout(() => {
        router.push("/auth/signin")
      }, 2000)
    } catch (err) {
      setError("An error occurred during registration")
      setLoading(false)
    }
  }

  return (
    <div className="container mx-auto flex min-h-screen items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
      <div className="w-full max-w-md space-y-8">
        <div className="text-center">
          <h1 className="text-3xl font-bold tracking-tight">Create an Account</h1>
          <p className="text-muted-foreground mt-3">Register to report and find lost items</p>
          
          {/* Development mode notice */}
          <Alert className="mt-6 bg-blue-50 border-blue-200">
            <AlertDescription className="text-blue-700">
              Development Mode: Try any email except <strong>test@example.com</strong> which is already registered
            </AlertDescription>
          </Alert>
        </div>

        <Card className="shadow-lg">
          <CardHeader className="space-y-1">
            <CardTitle className="text-2xl text-center">Register</CardTitle>
            <CardDescription className="text-center">Enter your details to create a new account</CardDescription>
          </CardHeader>
          <form onSubmit={handleSubmit(onSubmit)}>
            <CardContent className="space-y-4 pt-2">
              {error && (
                <Alert variant="destructive">
                  <AlertDescription>{error}</AlertDescription>
                </Alert>
              )}
              
              {success && (
                <Alert className="border-green-500 bg-green-50 text-green-700">
                  <AlertDescription>
                    Registration successful! Redirecting to sign in...
                  </AlertDescription>
                </Alert>
              )}
              
              <div className="space-y-2">
                <Label htmlFor="name">Full Name</Label>
                <Input 
                  id="name" 
                  placeholder="John Doe" 
                  {...register("name")}
                />
                {errors.name && (
                  <p className="text-sm text-destructive">{errors.name.message}</p>
                )}
              </div>
              
              <div className="space-y-2">
                <Label htmlFor="email">Email</Label>
                <Input 
                  id="email" 
                  type="email" 
                  placeholder="you@example.com" 
                  {...register("email")}
                />
                {errors.email && (
                  <p className="text-sm text-destructive">{errors.email.message}</p>
                )}
              </div>
              
              <div className="space-y-2">
                <Label htmlFor="password">Password</Label>
                <Input 
                  id="password" 
                  type="password" 
                  placeholder="••••••••" 
                  {...register("password")} 
                />
                {errors.password && (
                  <p className="text-sm text-destructive">{errors.password.message}</p>
                )}
              </div>
              
              <div className="space-y-2">
                <Label htmlFor="contactInformation">Contact Information (Optional)</Label>
                <Input 
                  id="contactInformation" 
                  placeholder="Phone number or other contact info" 
                  {...register("contactInformation")}
                />
                {errors.contactInformation && (
                  <p className="text-sm text-destructive">{errors.contactInformation.message}</p>
                )}
              </div>
            </CardContent>
            <CardFooter className="flex flex-col">
              <Button type="submit" className="w-full" disabled={loading || success}>
                {loading ? (
                  <>
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                    Registering...
                  </>
                ) : (
                  "Register"
                )}
              </Button>
              <div className="mt-4 text-center text-sm">
                Already have an account?{" "}
                <Link href="/auth/signin" className="text-primary hover:underline">
                  Sign In
                </Link>
              </div>
            </CardFooter>
          </form>
        </Card>
      </div>
    </div>
  )
} 


===== FILE: ./app/auth/signin/page.tsx =====
"use client"

import { useState } from "react"
import { useForm } from "react-hook-form"
import { signIn } from "next-auth/react"
import { zodResolver } from "@hookform/resolvers/zod"
import { z } from "zod"
import { useRouter } from "next/navigation"
import Link from "next/link"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Loader2, Mail } from "lucide-react"

// Form validation schema
const loginSchema = z.object({
  email: z.string().email("Please enter a valid email address"),
  password: z.string().min(8, "Password must be at least 8 characters"),
})

type LoginFormValues = z.infer<typeof loginSchema>

export default function SignInPage() {
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const router = useRouter()

  const { register, handleSubmit, formState: { errors } } = useForm<LoginFormValues>({
    resolver: zodResolver(loginSchema),
    defaultValues: {
      email: "",
      password: "",
    },
  })

  const onSubmit = async (data: LoginFormValues) => {
    setLoading(true)
    setError(null)

    try {
      // For development, show test account credentials
      console.log("Attempting login with:", data.email);
      
      // For development, you can use:
      // test@example.com / password123
      // admin@example.com / admin123
      const result = await signIn("credentials", {
        redirect: false,
        email: data.email,
        password: data.password,
      })

      if (result?.error) {
        setError("Invalid email or password")
        setLoading(false)
        return
      }

      // Redirect to home page on successful login
      router.push("/")
      router.refresh()
    } catch (err) {
      setError("An error occurred during sign-in")
      setLoading(false)
    }
  }

  const handleGoogleSignIn = async () => {
    setLoading(true)
    // In development, use a mock flow
    setError("Social login is disabled in development mode. Please use credentials.")
    setLoading(false)
    // In production: await signIn("google", { callbackUrl: "/" })
  }

  return (
    <div className="container mx-auto flex min-h-screen items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
      <div className="w-full max-w-md space-y-8">
        <div className="text-center">
          <h1 className="text-3xl font-bold tracking-tight">Welcome Back</h1>
          <p className="text-muted-foreground mt-3">Sign in to your account to continue</p>
          
          {/* Development mode notice */}
          <Alert className="mt-6 bg-blue-50 border-blue-200">
            <AlertDescription className="text-blue-700">
              Development Mode: Use <strong>test@example.com / password123</strong> to login
            </AlertDescription>
          </Alert>
        </div>

        <Tabs defaultValue="credentials" className="w-full">
          <TabsList className="grid w-full grid-cols-2 mb-6">
            <TabsTrigger value="credentials">Email & Password</TabsTrigger>
            <TabsTrigger value="providers">Social Login</TabsTrigger>
          </TabsList>

          <TabsContent value="credentials">
            <Card className="shadow-lg">
              <CardHeader className="space-y-1">
                <CardTitle className="text-2xl text-center">Sign In</CardTitle>
                <CardDescription className="text-center">Enter your credentials below</CardDescription>
              </CardHeader>
              <form onSubmit={handleSubmit(onSubmit)}>
                <CardContent className="space-y-4 pt-2">
                  {error && (
                    <Alert variant="destructive">
                      <AlertDescription>{error}</AlertDescription>
                    </Alert>
                  )}
                  <div className="space-y-2">
                    <Label htmlFor="email">Email</Label>
                    <Input 
                      id="email" 
                      type="email" 
                      placeholder="you@example.com" 
                      {...register("email")}
                    />
                    {errors.email && (
                      <p className="text-sm text-destructive">{errors.email.message}</p>
                    )}
                  </div>
                  <div className="space-y-2">
                    <div className="flex items-center justify-between">
                      <Label htmlFor="password">Password</Label>
                      <Link 
                        href="/auth/forgot-password" 
                        className="text-sm text-primary hover:underline"
                      >
                        Forgot password?
                      </Link>
                    </div>
                    <Input 
                      id="password" 
                      type="password" 
                      {...register("password")} 
                    />
                    {errors.password && (
                      <p className="text-sm text-destructive">{errors.password.message}</p>
                    )}
                  </div>
                </CardContent>
                <CardFooter className="flex flex-col">
                  <Button type="submit" className="w-full" disabled={loading}>
                    {loading ? (
                      <>
                        <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                        Signing In...
                      </>
                    ) : (
                      "Sign In"
                    )}
                  </Button>
                  <div className="mt-4 text-center text-sm">
                    Don't have an account?{" "}
                    <Link href="/auth/register" className="text-primary hover:underline">
                      Register
                    </Link>
                  </div>
                </CardFooter>
              </form>
            </Card>
          </TabsContent>

          <TabsContent value="providers">
            <Card className="shadow-lg">
              <CardHeader className="space-y-1">
                <CardTitle className="text-2xl text-center">Social Login</CardTitle>
                <CardDescription className="text-center">Sign in using your social accounts</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4 pt-2">
                <Button 
                  variant="outline" 
                  className="w-full" 
                  onClick={handleGoogleSignIn}
                  disabled={loading}
                >
                  {loading ? (
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  ) : (
                    <svg className="mr-2 h-4 w-4" viewBox="0 0 24 24">
                      <path
                        fill="currentColor"
                        d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"
                      />
                      <path
                        fill="currentColor"
                        d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"
                      />
                      <path
                        fill="currentColor"
                        d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"
                      />
                      <path
                        fill="currentColor"
                        d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"
                      />
                    </svg>
                  )}
                  Sign in with Google
                </Button>
                
                <Button 
                  variant="outline" 
                  className="w-full" 
                  onClick={() => setError("Email link is disabled in development mode")}
                  disabled={loading}
                >
                  <Mail className="mr-2 h-4 w-4" />
                  Sign in with Email Link
                </Button>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  )
} 


===== FILE: ./app/components/footer.tsx =====
"use client"

import Link from "next/link"
import Image from "next/image"
import { Mail, Phone, MapPin, Github, Linkedin, Twitter } from "lucide-react"

export function Footer() {
  const currentYear = new Date().getFullYear()

  return (
    <footer className="border-t bg-background/80 backdrop-blur-lg w-full">
      <div className="max-w-[1800px] mx-auto px-4 sm:px-6 lg:px-8">
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8 py-12">
          {/* Brand column */}
          <div className="space-y-4">
            <Link href="/" className="inline-block">
              <Image src="/logo.svg" alt="RECOVR Logo" width={140} height={40} />
            </Link>
            <p className="text-sm text-muted-foreground max-w-xs">
              Using advanced AI technology to help you recover your lost belongings quickly and efficiently.
            </p>
            <div className="flex items-center space-x-4 mt-4">
              <Link href="#" className="text-muted-foreground hover:text-primary transition-colors">
                <Github className="h-5 w-5" />
                <span className="sr-only">GitHub</span>
              </Link>
              <Link href="#" className="text-muted-foreground hover:text-primary transition-colors">
                <Twitter className="h-5 w-5" />
                <span className="sr-only">Twitter</span>
              </Link>
              <Link href="#" className="text-muted-foreground hover:text-primary transition-colors">
                <Linkedin className="h-5 w-5" />
                <span className="sr-only">LinkedIn</span>
              </Link>
            </div>
          </div>

          {/* Quick links */}
          <div>
            <h3 className="text-base font-medium mb-4">Quick Links</h3>
            <ul className="space-y-2">
              {[
                { title: "Home", href: "/" },
                { title: "Lost Items", href: "/lost-objects" },
                { title: "Report Item", href: "/report" },
                { title: "Find Item", href: "/search" },
                { title: "Map", href: "/map" },
              ].map((link) => (
                <li key={link.title}>
                  <Link 
                    href={link.href}
                    className="text-sm text-muted-foreground hover:text-primary transition-colors"
                  >
                    {link.title}
                  </Link>
                </li>
              ))}
            </ul>
          </div>

          {/* Resources */}
          <div>
            <h3 className="text-base font-medium mb-4">Resources</h3>
            <ul className="space-y-2">
              {[
                { title: "Help Center", href: "/help" },
                { title: "Privacy Policy", href: "/privacy" },
                { title: "Terms of Service", href: "/terms" },
                { title: "FAQ", href: "/faq" },
                { title: "Blog", href: "/blog" },
              ].map((link) => (
                <li key={link.title}>
                  <Link 
                    href={link.href}
                    className="text-sm text-muted-foreground hover:text-primary transition-colors"
                  >
                    {link.title}
                  </Link>
                </li>
              ))}
            </ul>
          </div>

          {/* Contact info */}
          <div>
            <h3 className="text-base font-medium mb-4">Contact</h3>
            <ul className="space-y-3">
              <li className="flex items-start space-x-3 text-sm">
                <MapPin className="h-5 w-5 text-muted-foreground shrink-0" />
                <span className="text-muted-foreground">
                  123 Recovery Street, Tech Park<br />
                  San Francisco, CA 94107
                </span>
              </li>
              <li className="flex items-center space-x-3 text-sm">
                <Mail className="h-5 w-5 text-muted-foreground" />
                <a href="mailto:contact@recovr.tech" className="text-muted-foreground hover:text-primary transition-colors">
                  contact@recovr.tech
                </a>
              </li>
              <li className="flex items-center space-x-3 text-sm">
                <Phone className="h-5 w-5 text-muted-foreground" />
                <a href="tel:+1-800-RECOVR" className="text-muted-foreground hover:text-primary transition-colors">
                  +1-800-RECOVR
                </a>
              </li>
            </ul>
          </div>
        </div>

        <div className="border-t py-6 flex flex-col sm:flex-row justify-between items-center">
          <p className="text-xs text-muted-foreground">
            © {currentYear} RECOVR Technologies. All rights reserved.
          </p>
          <div className="flex items-center space-x-4 mt-4 sm:mt-0">
            <Link href="/privacy" className="text-xs text-muted-foreground hover:text-primary transition-colors">
              Privacy
            </Link>
            <Link href="/terms" className="text-xs text-muted-foreground hover:text-primary transition-colors">
              Terms
            </Link>
            <Link href="/cookies" className="text-xs text-muted-foreground hover:text-primary transition-colors">
              Cookies
            </Link>
          </div>
        </div>
      </div>
    </footer>
  )
} 


===== FILE: ./app/dashboard/loading.tsx =====
export default function Loading() {
  return null
}



===== FILE: ./app/dashboard/page.tsx =====
"use client"

import { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Badge } from "@/components/ui/badge"
import { Progress } from "@/components/ui/progress"
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  ResponsiveContainer,
  PieChart,
  Pie,
  Cell,
  LineChart,
  Line,
} from "recharts"
import {
  ArrowUpRight,
  ArrowDownRight,
  Package,
  Users,
  CameraIcon,
  Clock,
  MapPin,
  Search,
  Bell,
  Settings,
  LogOut,
  Loader2,
} from "lucide-react"
import Image from "next/image"
import Link from "next/link"

const COLORS = ["#0088FE", "#00C49F", "#FFBB28", "#FF8042", "#8884D8"]

interface DashboardData {
  stats: {
    totalDetections: number;
    detectionChange: number;
    recoveryRate: number;
    recoveryChange: number;
    activeUsers: number;
    userChange: number;
  };
  recentDetections: Array<{
    id: string;
    name: string;
    location: string;
    timestamp: string;
    image: string;
    confidence: number;
  }>;
  categoryDistribution: Array<{
    name: string;
    value: number;
  }>;
  recoveryRate: Array<{
    name: string;
    rate: number;
  }>;
}

export default function DashboardPage() {
  const [activeTab, setActiveTab] = useState("overview")
  const [data, setData] = useState<DashboardData | null>(null)
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [timeRange, setTimeRange] = useState("week")

  // Load dashboard data
  useEffect(() => {
    const loadDashboardData = async () => {
      setLoading(true);
      setError(null);
      
      try {
        const response = await fetch(`/api/dashboard?timeRange=${timeRange}`);
        
        if (!response.ok) {
          throw new Error("Failed to fetch dashboard data");
        }
        
        const dashboardData = await response.json();
        setData(dashboardData);
        
      } catch (err) {
        console.error("Error loading dashboard data:", err);
        setError("Failed to load dashboard data. Please try again.");
      } finally {
        setLoading(false);
      }
    };
    
    loadDashboardData();
  }, [timeRange]);

  // Format numbers with + or - sign
  const formatChange = (value: number) => {
    const sign = value >= 0 ? "+" : "";
    return `${sign}${value}%`;
  };

  // Format timestamp to relative time
  const formatTimestamp = (timestamp: string) => {
    const date = new Date(timestamp);
    const now = new Date();
    const diff = now.getTime() - date.getTime();
    
    const minutes = Math.floor(diff / 60000);
    const hours = Math.floor(minutes / 60);
    const days = Math.floor(hours / 24);
    
    if (days > 0) return `${days} day${days === 1 ? "" : "s"} ago`;
    if (hours > 0) return `${hours} hour${hours === 1 ? "" : "s"} ago`;
    if (minutes > 0) return `${minutes} minute${minutes === 1 ? "" : "s"} ago`;
    return "Just now";
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <Loader2 className="h-8 w-8 animate-spin text-primary" />
      </div>
    );
  }

  if (error) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="text-center">
          <h2 className="text-2xl font-bold text-red-600 mb-2">Error</h2>
          <p className="text-muted-foreground">{error}</p>
          <Button 
            variant="outline" 
            className="mt-4"
            onClick={() => window.location.reload()}
          >
            Try Again
          </Button>
        </div>
      </div>
    );
  }

  if (!data) {
    return null;
  }

  return (
    <div className="flex min-h-screen">
      {/* Sidebar */}
      <div className="hidden md:flex w-64 flex-col fixed inset-y-0 border-r bg-background z-30">
        <div className="flex h-14 items-center border-b px-4">
          <Link href="/" className="flex items-center gap-2 font-semibold">
            <Image
              src="/placeholder.svg?height=32&width=32"
              width={32}
              height={32}
              alt="Logo"
              className="rounded-full bg-primary p-1"
            />
            <span>RECOVR Admin</span>
          </Link>
        </div>
        <div className="flex-1 overflow-auto py-2">
          <nav className="grid gap-1 px-2">
            <Link
              href="/dashboard"
              className={`flex items-center gap-3 rounded-md px-3 py-2 text-sm font-medium ${
                activeTab === "overview" ? "bg-secondary" : "hover:bg-secondary/50"
              }`}
              onClick={() => setActiveTab("overview")}
            >
              <Package className="h-4 w-4" />
              Overview
            </Link>
            <Link
              href="/dashboard"
              className={`flex items-center gap-3 rounded-md px-3 py-2 text-sm font-medium ${
                activeTab === "detections" ? "bg-secondary" : "hover:bg-secondary/50"
              }`}
              onClick={() => setActiveTab("detections")}
            >
              <CameraIcon className="h-4 w-4" />
              Detections
            </Link>
            <Link
              href="/dashboard"
              className={`flex items-center gap-3 rounded-md px-3 py-2 text-sm font-medium ${
                activeTab === "users" ? "bg-secondary" : "hover:bg-secondary/50"
              }`}
              onClick={() => setActiveTab("users")}
            >
              <Users className="h-4 w-4" />
              Users
            </Link>
            <Link
              href="/dashboard"
              className={`flex items-center gap-3 rounded-md px-3 py-2 text-sm font-medium ${
                activeTab === "analytics" ? "bg-secondary" : "hover:bg-secondary/50"
              }`}
              onClick={() => setActiveTab("analytics")}
            >
              <BarChart className="h-4 w-4" />
              Analytics
            </Link>
            <Link
              href="/dashboard"
              className={`flex items-center gap-3 rounded-md px-3 py-2 text-sm font-medium ${
                activeTab === "settings" ? "bg-secondary" : "hover:bg-secondary/50"
              }`}
              onClick={() => setActiveTab("settings")}
            >
              <Settings className="h-4 w-4" />
              Settings
            </Link>
          </nav>
        </div>
        <div className="border-t p-4">
          <div className="flex items-center gap-3">
            <Image
              src="/placeholder.svg?height=40&width=40"
              width={40}
              height={40}
              alt="User"
              className="rounded-full"
            />
            <div>
              <p className="text-sm font-medium">Admin User</p>
              <p className="text-xs text-muted-foreground">admin@recovr.tech</p>
            </div>
            <Button variant="ghost" size="icon" className="ml-auto">
              <LogOut className="h-4 w-4" />
              <span className="sr-only">Log out</span>
            </Button>
          </div>
        </div>
      </div>

      {/* Main content */}
      <div className="flex-1 md:pl-64">
        <header className="sticky top-0 z-20 flex h-14 items-center gap-4 border-b bg-background px-4 sm:px-6">
          <div className="flex flex-1 items-center gap-2">
            <Button variant="outline" size="sm" className="md:hidden">
              <Package className="h-4 w-4" />
              <span className="sr-only">Toggle sidebar</span>
            </Button>
            <h1 className="text-lg font-semibold">Dashboard</h1>
          </div>
          <div className="flex items-center gap-2">
            <Button variant="outline" size="sm">
              <Bell className="h-4 w-4" />
              <span className="sr-only">Notifications</span>
            </Button>
            <Button variant="outline" size="sm">
              <Search className="h-4 w-4" />
              <span className="sr-only">Search</span>
            </Button>
          </div>
        </header>

        <main className="grid gap-4 p-4 sm:px-6 sm:py-6 md:gap-8">
          <Tabs defaultValue="overview" value={activeTab} onValueChange={setActiveTab} className="w-full">
            <TabsList className="grid w-full grid-cols-4 md:w-auto">
              <TabsTrigger value="overview">Overview</TabsTrigger>
              <TabsTrigger value="detections">Detections</TabsTrigger>
              <TabsTrigger value="users">Users</TabsTrigger>
              <TabsTrigger value="analytics">Analytics</TabsTrigger>
            </TabsList>

            <TabsContent value="overview" className="space-y-4 mt-4">
              <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
                <Card>
                  <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                    <CardTitle className="text-sm font-medium">Total Detections</CardTitle>
                    <Package className="h-4 w-4 text-muted-foreground" />
                  </CardHeader>
                  <CardContent>
                    <div className="text-2xl font-bold">{data.stats.totalDetections.toLocaleString()}</div>
                    <p className="text-xs text-muted-foreground">
                      <span className={`${data.stats.detectionChange >= 0 ? "text-green-500" : "text-red-500"} flex items-center`}>
                        {data.stats.detectionChange >= 0 ? (
                        <ArrowUpRight className="h-3 w-3 mr-1" />
                        ) : (
                          <ArrowDownRight className="h-3 w-3 mr-1" />
                        )}
                        {formatChange(data.stats.detectionChange)}
                      </span>{" "}
                      from last period
                    </p>
                  </CardContent>
                </Card>

                <Card>
                  <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                    <CardTitle className="text-sm font-medium">Recovery Rate</CardTitle>
                    <ArrowUpRight className="h-4 w-4 text-muted-foreground" />
                  </CardHeader>
                  <CardContent>
                    <div className="text-2xl font-bold">{data.stats.recoveryRate}%</div>
                    <p className="text-xs text-muted-foreground">
                      <span className={`${data.stats.recoveryChange >= 0 ? "text-green-500" : "text-red-500"} flex items-center`}>
                        {data.stats.recoveryChange >= 0 ? (
                        <ArrowUpRight className="h-3 w-3 mr-1" />
                        ) : (
                          <ArrowDownRight className="h-3 w-3 mr-1" />
                        )}
                        {formatChange(data.stats.recoveryChange)}
                      </span>{" "}
                      from last period
                    </p>
                  </CardContent>
                </Card>

                <Card>
                  <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                    <CardTitle className="text-sm font-medium">Active Users</CardTitle>
                    <Users className="h-4 w-4 text-muted-foreground" />
                  </CardHeader>
                  <CardContent>
                    <div className="text-2xl font-bold">{data.stats.activeUsers}</div>
                    <p className="text-xs text-muted-foreground">
                      <span className={`${data.stats.userChange >= 0 ? "text-green-500" : "text-red-500"} flex items-center`}>
                        {data.stats.userChange >= 0 ? (
                        <ArrowUpRight className="h-3 w-3 mr-1" />
                        ) : (
                        <ArrowDownRight className="h-3 w-3 mr-1" />
                        )}
                        {formatChange(data.stats.userChange)}
                      </span>{" "}
                      from last period
                    </p>
                  </CardContent>
                </Card>
              </div>

              <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-7">
                <Card className="col-span-4">
                  <CardHeader>
                    <CardTitle>Recovery Rate Over Time</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="h-[300px]">
                      <ResponsiveContainer width="100%" height="100%">
                        <LineChart data={data.recoveryRate}>
                          <CartesianGrid strokeDasharray="3 3" />
                          <XAxis dataKey="name" />
                          <YAxis />
                          <Tooltip />
                          <Line
                            type="monotone"
                            dataKey="rate"
                            stroke="#8884d8"
                            strokeWidth={2}
                          />
                        </LineChart>
                      </ResponsiveContainer>
                    </div>
                  </CardContent>
                </Card>

                <Card className="col-span-3">
                  <CardHeader>
                    <CardTitle>Category Distribution</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="h-[300px]">
                      <ResponsiveContainer width="100%" height="100%">
                        <PieChart>
                          <Pie
                            data={data.categoryDistribution}
                            dataKey="value"
                            nameKey="name"
                            cx="50%"
                            cy="50%"
                            outerRadius={80}
                            label
                          >
                            {data.categoryDistribution.map((entry, index) => (
                              <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                            ))}
                          </Pie>
                          <Tooltip />
                        </PieChart>
                      </ResponsiveContainer>
                    </div>
                  </CardContent>
                </Card>
              </div>

              <Card>
                  <CardHeader>
                    <CardTitle>Recent Detections</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4">
                    {data.recentDetections.map((detection) => (
                        <div key={detection.id} className="flex items-center gap-4">
                        <div className="relative h-12 w-12">
                            <Image
                            src={detection.image}
                              alt={detection.name}
                              fill
                            className="rounded-md object-cover"
                            />
                          </div>
                        <div className="flex-1">
                          <p className="font-medium">{detection.name}</p>
                          <div className="flex items-center text-sm text-muted-foreground">
                            <MapPin className="h-3 w-3 mr-1" />
                              {detection.location}
                            <Clock className="h-3 w-3 ml-3 mr-1" />
                            {formatTimestamp(detection.timestamp)}
                          </div>
                        </div>
                        <Badge variant="secondary">
                          {detection.confidence}% match
                        </Badge>
                      </div>
                    ))}
                    </div>
                  </CardContent>
                </Card>
            </TabsContent>

            <TabsContent value="detections" className="space-y-4 mt-4">
              <Card>
                <CardHeader>
                  <CardTitle>Detections Content</CardTitle>
                  <CardDescription>Manage and view all detected objects</CardDescription>
                </CardHeader>
                <CardContent>
                  <p>Detections tab content would go here...</p>
                </CardContent>
              </Card>
            </TabsContent>

            <TabsContent value="users" className="space-y-4 mt-4">
              <Card>
                <CardHeader>
                  <CardTitle>Users Content</CardTitle>
                  <CardDescription>Manage system users and permissions</CardDescription>
                </CardHeader>
                <CardContent>
                  <p>Users tab content would go here...</p>
                </CardContent>
              </Card>
            </TabsContent>

            <TabsContent value="analytics" className="space-y-4 mt-4">
              <Card>
                <CardHeader>
                  <CardTitle>Analytics Content</CardTitle>
                  <CardDescription>Detailed system analytics and reports</CardDescription>
                </CardHeader>
                <CardContent>
                  <p>Analytics tab content would go here...</p>
                </CardContent>
              </Card>
            </TabsContent>
          </Tabs>
        </main>
      </div>
    </div>
  )
}



===== FILE: ./app/detection/page.tsx =====
"use client"

import { useState, useEffect, useRef } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Slider } from "@/components/ui/slider"
import { Switch } from "@/components/ui/switch"
import { Label } from "@/components/ui/label"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { CameraIcon, Play, Pause, RotateCw, Download, Maximize2, Settings, AlertCircle } from "lucide-react"
import Image from "next/image"

// Mock detection results
const MOCK_DETECTIONS = [
  {
    id: 1,
    objectType: "Backpack",
    confidence: 98.2,
    status: "abandoned",
    timeDetected: "10:15:32",
    boundingBox: { x: 120, y: 150, width: 100, height: 120 },
  },
  {
    id: 2,
    objectType: "Smartphone",
    confidence: 95.7,
    status: "moving",
    timeDetected: "10:15:35",
    boundingBox: { x: 320, y: 220, width: 40, height: 80 },
  },
  {
    id: 3,
    objectType: "Laptop",
    confidence: 97.1,
    status: "stationary",
    timeDetected: "10:15:40",
    boundingBox: { x: 450, y: 180, width: 120, height: 80 },
  },
]

export default function DetectionPage() {
  const [isPlaying, setIsPlaying] = useState(true)
  const [confidenceThreshold, setConfidenceThreshold] = useState([80])
  const [detectionMode, setDetectionMode] = useState("real-time")
  const [showBoundingBoxes, setShowBoundingBoxes] = useState(true)
  const [showLabels, setShowLabels] = useState(true)
  const [detections, setDetections] = useState(MOCK_DETECTIONS)
  const [selectedDetection, setSelectedDetection] = useState(null)
  const canvasRef = useRef(null)
  const videoRef = useRef(null)

  // Simulate video feed and detection
  useEffect(() => {
    let animationId
    let frameCount = 0

    const drawVideoFrame = () => {
      const canvas = canvasRef.current
      const ctx = canvas?.getContext("2d")

      if (ctx && isPlaying) {
        // Clear canvas
        ctx.clearRect(0, 0, canvas.width, canvas.height)

        // Draw mock video frame (gray background)
        ctx.fillStyle = "#f3f4f6"
        ctx.fillRect(0, 0, canvas.width, canvas.height)

        // Draw some mock scene elements
        ctx.fillStyle = "#d1d5db"
        ctx.fillRect(50, 150, 200, 100) // Table
        ctx.fillRect(400, 100, 150, 80) // Shelf
        ctx.fillRect(300, 300, 180, 60) // Bench

        // Draw detected objects with bounding boxes
        if (showBoundingBoxes) {
          detections.forEach((detection) => {
            const { x, y, width, height } = detection.boundingBox
            const isSelected = selectedDetection?.id === detection.id

            // Draw bounding box
            ctx.strokeStyle =
              detection.status === "abandoned"
                ? "#ef4444" // Red for abandoned
                : detection.status === "stationary"
                  ? "#f59e0b" // Amber for stationary
                  : "#22c55e" // Green for moving
            ctx.lineWidth = isSelected ? 3 : 2
            ctx.strokeRect(x, y, width, height)

            // Draw semi-transparent background for label
            if (showLabels) {
              ctx.fillStyle = "rgba(0, 0, 0, 0.5)"
              ctx.fillRect(x, y - 20, width, 20)

              // Draw label text
              ctx.fillStyle = "#ffffff"
              ctx.font = "12px sans-serif"
              ctx.fillText(`${detection.objectType} (${detection.confidence.toFixed(1)}%)`, x + 5, y - 5)
            }
          })
        }

        // Simulate object movement for the "moving" object
        if (frameCount % 5 === 0) {
          setDetections((prev) =>
            prev.map((det) => {
              if (det.status === "moving") {
                return {
                  ...det,
                  boundingBox: {
                    ...det.boundingBox,
                    x: det.boundingBox.x + (Math.random() > 0.5 ? 1 : -1) * 2,
                    y: det.boundingBox.y + (Math.random() > 0.5 ? 1 : -1) * 2,
                  },
                }
              }
              return det
            }),
          )
        }

        frameCount++
      }

      animationId = requestAnimationFrame(drawVideoFrame)
    }

    drawVideoFrame()

    return () => {
      cancelAnimationFrame(animationId)
    }
  }, [isPlaying, detections, showBoundingBoxes, showLabels, selectedDetection])

  const handleDetectionClick = (detection) => {
    setSelectedDetection(detection)
  }

  return (
    <div className="container py-8">
      <div className="flex flex-col space-y-6">
        <div className="flex flex-col space-y-2">
          <h1 className="text-3xl font-bold">Object Detection System</h1>
          <p className="text-muted-foreground">
            Real-time monitoring and detection of abandoned objects using computer vision
          </p>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          <div className="lg:col-span-2 space-y-6">
            <Card>
              <CardHeader className="pb-2">
                <div className="flex justify-between items-center">
                  <div>
                    <CardTitle>Video Feed</CardTitle>
                    <CardDescription>Camera 1 - Main Hall</CardDescription>
                  </div>
                  <Badge variant={isPlaying ? "default" : "outline"} className="ml-auto">
                    {isPlaying ? "LIVE" : "PAUSED"}
                  </Badge>
                </div>
              </CardHeader>
              <CardContent className="p-0">
                <div className="relative aspect-video bg-muted">
                  <canvas
                    ref={canvasRef}
                    width={800}
                    height={450}
                    className="w-full h-full"
                    onClick={(e) => {
                      const canvas = canvasRef.current
                      const rect = canvas.getBoundingClientRect()
                      const x = (e.clientX - rect.left) * (canvas.width / rect.width)
                      const y = (e.clientY - rect.top) * (canvas.height / rect.height)

                      // Check if click is inside any bounding box
                      const clicked = detections.find((det) => {
                        const { x: bx, y: by, width, height } = det.boundingBox
                        return x >= bx && x <= bx + width && y >= by && y <= by + height
                      })

                      if (clicked) {
                        handleDetectionClick(clicked)
                      } else {
                        setSelectedDetection(null)
                      }
                    }}
                  />
                  <video ref={videoRef} className="hidden" />
                </div>
              </CardContent>
              <CardFooter className="flex justify-between p-4">
                <div className="flex space-x-2">
                  <Button
                    variant="outline"
                    size="icon"
                    onClick={() => setIsPlaying(!isPlaying)}
                    aria-label={isPlaying ? "Pause" : "Play"}
                  >
                    {isPlaying ? <Pause className="h-4 w-4" /> : <Play className="h-4 w-4" />}
                  </Button>
                  <Button variant="outline" size="icon" aria-label="Refresh">
                    <RotateCw className="h-4 w-4" />
                  </Button>
                  <Button variant="outline" size="icon" aria-label="Download">
                    <Download className="h-4 w-4" />
                  </Button>
                  <Button variant="outline" size="icon" aria-label="Fullscreen">
                    <Maximize2 className="h-4 w-4" />
                  </Button>
                </div>
                <Select defaultValue="camera1">
                  <SelectTrigger className="w-[180px]">
                    <SelectValue placeholder="Select camera" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="camera1">Camera 1 - Main Hall</SelectItem>
                    <SelectItem value="camera2">Camera 2 - Library</SelectItem>
                    <SelectItem value="camera3">Camera 3 - Cafeteria</SelectItem>
                    <SelectItem value="camera4">Camera 4 - Entrance</SelectItem>
                  </SelectContent>
                </Select>
              </CardFooter>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>Detection Settings</CardTitle>
                <CardDescription>Configure detection parameters and visualization options</CardDescription>
              </CardHeader>
              <CardContent>
                <Tabs defaultValue="real-time" value={detectionMode} onValueChange={setDetectionMode}>
                  <TabsList className="grid w-full grid-cols-2">
                    <TabsTrigger value="real-time">Real-time Detection</TabsTrigger>
                    <TabsTrigger value="recorded">Recorded Footage</TabsTrigger>
                  </TabsList>
                  <TabsContent value="real-time" className="space-y-4 mt-4">
                    <div className="space-y-2">
                      <div className="flex justify-between">
                        <Label>Confidence Threshold (%)</Label>
                        <span>{confidenceThreshold}%</span>
                      </div>
                      <Slider
                        value={confidenceThreshold}
                        onValueChange={setConfidenceThreshold}
                        min={50}
                        max={100}
                        step={1}
                      />
                    </div>

                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div className="flex items-center space-x-2">
                        <Switch
                          id="bounding-boxes"
                          checked={showBoundingBoxes}
                          onCheckedChange={setShowBoundingBoxes}
                        />
                        <Label htmlFor="bounding-boxes">Show Bounding Boxes</Label>
                      </div>
                      <div className="flex items-center space-x-2">
                        <Switch id="labels" checked={showLabels} onCheckedChange={setShowLabels} />
                        <Label htmlFor="labels">Show Labels</Label>
                      </div>
                      <div className="flex items-center space-x-2">
                        <Switch id="tracking" defaultChecked />
                        <Label htmlFor="tracking">Enable Object Tracking</Label>
                      </div>
                      <div className="flex items-center space-x-2">
                        <Switch id="abandoned" defaultChecked />
                        <Label htmlFor="abandoned">Detect Abandoned Objects</Label>
                      </div>
                    </div>

                    <div className="flex items-center space-x-2 pt-2">
                      <AlertCircle className="h-4 w-4 text-muted-foreground" />
                      <p className="text-xs text-muted-foreground">
                        Objects are considered abandoned after being stationary for 30 seconds
                      </p>
                    </div>
                  </TabsContent>
                  <TabsContent value="recorded" className="space-y-4 mt-4">
                    <p className="text-sm text-muted-foreground">Upload recorded footage to analyze for lost objects</p>
                    <Button variant="outline" className="w-full">
                      <CameraIcon className="mr-2 h-4 w-4" />
                      Upload Video File
                    </Button>
                  </TabsContent>
                </Tabs>
              </CardContent>
            </Card>
          </div>

          <div className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle>Detection Results</CardTitle>
                <CardDescription>Objects detected in the current frame</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {detections.length > 0 ? (
                    detections.map((detection) => (
                      <div
                        key={detection.id}
                        className={`p-3 rounded-lg border ${
                          selectedDetection?.id === detection.id ? "border-primary bg-primary/5" : ""
                        } ${
                          detection.status === "abandoned"
                            ? "border-red-200 bg-red-50 dark:border-red-900 dark:bg-red-950/20"
                            : detection.status === "stationary"
                              ? "border-amber-200 bg-amber-50 dark:border-amber-900 dark:bg-amber-950/20"
                              : "border-green-200 bg-green-50 dark:border-green-900 dark:bg-green-950/20"
                        } cursor-pointer`}
                        onClick={() => handleDetectionClick(detection)}
                      >
                        <div className="flex justify-between items-start">
                          <div>
                            <div className="font-medium">{detection.objectType}</div>
                            <div className="text-xs text-muted-foreground">Detected at {detection.timeDetected}</div>
                          </div>
                          <Badge
                            variant={
                              detection.status === "abandoned"
                                ? "destructive"
                                : detection.status === "stationary"
                                  ? "outline"
                                  : "secondary"
                            }
                          >
                            {detection.status.toUpperCase()}
                          </Badge>
                        </div>
                        <div className="mt-2 flex justify-between items-center">
                          <div className="text-sm">
                            Confidence: <span className="font-medium">{detection.confidence.toFixed(1)}%</span>
                          </div>
                          <Button variant="ghost" size="sm">
                            Details
                          </Button>
                        </div>
                      </div>
                    ))
                  ) : (
                    <div className="text-center py-8">
                      <CameraIcon className="mx-auto h-8 w-8 text-muted-foreground mb-2" />
                      <p className="text-muted-foreground">No objects detected</p>
                    </div>
                  )}
                </div>
              </CardContent>
              <CardFooter>
                <Button variant="outline" className="w-full">
                  View All Detections
                </Button>
              </CardFooter>
            </Card>

            {selectedDetection && (
              <Card>
                <CardHeader>
                  <CardTitle>Object Details</CardTitle>
                  <CardDescription>Information about the selected object</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    <div className="aspect-video relative bg-muted rounded-md overflow-hidden">
                      <div className="absolute inset-0 flex items-center justify-center">
                        <Image
                          src="/placeholder.svg?height=200&width=300"
                          width={300}
                          height={200}
                          alt="Object thumbnail"
                          className="w-full h-full object-cover"
                        />
                      </div>
                    </div>

                    <div className="grid grid-cols-2 gap-2 text-sm">
                      <div className="space-y-1">
                        <p className="text-muted-foreground">Object Type</p>
                        <p className="font-medium">{selectedDetection.objectType}</p>
                      </div>
                      <div className="space-y-1">
                        <p className="text-muted-foreground">Status</p>
                        <p className="font-medium capitalize">{selectedDetection.status}</p>
                      </div>
                      <div className="space-y-1">
                        <p className="text-muted-foreground">Confidence</p>
                        <p className="font-medium">{selectedDetection.confidence.toFixed(1)}%</p>
                      </div>
                      <div className="space-y-1">
                        <p className="text-muted-foreground">Time Detected</p>
                        <p className="font-medium">{selectedDetection.timeDetected}</p>
                      </div>
                    </div>

                    <div className="pt-2 flex justify-between">
                      <Button variant="outline" size="sm">
                        <Download className="mr-2 h-4 w-4" />
                        Save Image
                      </Button>
                      <Button size="sm">
                        <Settings className="mr-2 h-4 w-4" />
                        Process Object
                      </Button>
                    </div>
                  </div>
                </CardContent>
              </Card>
            )}
          </div>
        </div>
      </div>
    </div>
  )
}



===== FILE: ./app/globals.css =====
@import 'leaflet/dist/leaflet.css';
@tailwind base;
@tailwind components;
@tailwind utilities;

@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap');

body {
  font-family: 'Poppins', sans-serif;
}

/* Smooth scrolling for the whole page */
html {
  scroll-behavior: smooth;
}

@layer utilities {
  .text-balance {
    text-wrap: balance;
  }
  
  .animate-fade-in {
    animation: fadeIn 0.6s ease-in-out;
  }
  
  .animate-slide-up {
    animation: slideUp 0.8s ease-out;
  }
  
  .animate-slide-in-right {
    animation: slideInRight 0.8s ease-out;
  }
  
  .animate-slide-in-left {
    animation: slideInLeft 0.8s ease-out;
  }
  
  .animate-bounce-in {
    animation: bounceIn 0.8s cubic-bezier(0.215, 0.61, 0.355, 1);
  }
  
  .animate-float {
    animation: float 6s ease-in-out infinite;
  }
  
  .animate-pulse-slow {
    animation: pulseSlow 3s infinite;
  }
  
  .page-transition {
    animation: fadeIn 0.4s ease-in-out;
  }
  
  .glass-effect {
    background: rgba(255, 255, 255, 0.15);
    backdrop-filter: blur(10px);
    -webkit-backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.2);
  }
  
  .glass-card {
    background: rgba(255, 255, 255, 0.7);
    backdrop-filter: blur(16px);
    -webkit-backdrop-filter: blur(16px);
    border: 1px solid rgba(255, 255, 255, 0.3);
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.05);
  }
  
  .text-gradient {
    background-clip: text;
    -webkit-background-clip: text;
    color: transparent;
    background-image: linear-gradient(90deg, #1e293b, #020617);
  }
  
  .dark .text-gradient {
    background-image: linear-gradient(90deg, #e2e8f0, #f8fafc);
    color: transparent;
    /* Ensure text is visible and bright in dark mode */
    text-shadow: 0 0 1px rgba(255, 255, 255, 0.1);
  }
  
  .text-gradient-blue {
    background-clip: text;
    -webkit-background-clip: text;
    color: transparent;
    background-image: linear-gradient(135deg, #1e40af, #0c4a6e);
  }
  
  .dark .text-gradient-blue {
    background-image: linear-gradient(135deg, #60a5fa, #38bdf8);
    color: transparent;
    /* Ensure text is visible and bright in dark mode */
    text-shadow: 0 0 1px rgba(255, 255, 255, 0.1);
  }
  
  .text-gradient-purple {
    background-clip: text;
    -webkit-background-clip: text;
    color: transparent;
    background-image: linear-gradient(135deg, #1e1b4b, #312e81);
  }
  
  .dark .text-gradient-purple {
    background-image: linear-gradient(135deg, #c7d2fe, #a5b4fc);
  }
  
  .bg-gradient-subtle {
    background: linear-gradient(120deg, #f8fafc 0%, #f1f5f9 100%);
  }
  
  .shadow-soft {
    box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.05), 0 8px 10px -6px rgba(0, 0, 0, 0.02);
  }
  
  .shadow-glow {
    box-shadow: 0 0 15px rgba(56, 189, 248, 0.35);
  }

  .border-gradient {
    border: double 1px transparent;
    background-image: linear-gradient(white, white), 
                      linear-gradient(to right, hsl(var(--primary-gradient-from)), hsl(var(--primary-gradient-to)));
    background-origin: border-box;
    background-clip: padding-box, border-box;
  }
  
  /* Scroll Animation Classes */
  .scroll-fade-in {
    opacity: 0;
    transition: opacity 0.8s ease;
  }
  
  .scroll-fade-in.visible {
    opacity: 1;
  }
  
  .scroll-slide-up {
    opacity: 0;
    transform: translateY(30px);
    transition: transform 0.8s ease, opacity 0.8s ease;
  }
  
  .scroll-slide-up.visible {
    opacity: 1;
    transform: translateY(0);
  }
  
  .scroll-slide-left {
    opacity: 0;
    transform: translateX(-30px);
    transition: transform 0.8s ease, opacity 0.8s ease;
  }
  
  .scroll-slide-left.visible {
    opacity: 1;
    transform: translateX(0);
  }
  
  .scroll-slide-right {
    opacity: 0;
    transform: translateX(30px);
    transition: transform 0.8s ease, opacity 0.8s ease;
  }
  
  .scroll-slide-right.visible {
    opacity: 1;
    transform: translateX(0);
  }
  
  .scroll-zoom-in {
    opacity: 0;
    transform: scale(0.95);
    transition: transform 0.8s ease, opacity 0.8s ease;
  }
  
  .scroll-zoom-in.visible {
    opacity: 1;
    transform: scale(1);
  }
  
  .scroll-bounce {
    opacity: 0;
    transition: transform 0.8s cubic-bezier(0.215, 0.61, 0.355, 1), opacity 0.8s ease;
  }
  
  .scroll-bounce.visible {
    opacity: 1;
    animation: bounceInOnce 0.8s cubic-bezier(0.215, 0.61, 0.355, 1);
  }

  .animate-loadingBar {
    animation: loadingBarAnimation 1.2s ease-in-out infinite;
    background-size: 400% 400%;
    background-image: linear-gradient(to right, #1e293b, #0f172a, #020617, #000000);
  }

  .page-navigating * {
    transition: none !important;
    animation-play-state: paused !important;
  }
}

@keyframes fadeIn {
  from { opacity: 0; }
  to { opacity: 1; }
}

@keyframes slideUp {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes slideInRight {
  from {
    opacity: 0;
    transform: translateX(30px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

@keyframes slideInLeft {
  from {
    opacity: 0;
    transform: translateX(-30px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

@keyframes bounceIn {
  0% {
    opacity: 0;
    transform: scale3d(0.3, 0.3, 0.3);
  }
  20% {
    transform: scale3d(1.1, 1.1, 1.1);
  }
  40% {
    transform: scale3d(0.9, 0.9, 0.9);
  }
  60% {
    opacity: 1;
    transform: scale3d(1.03, 1.03, 1.03);
  }
  80% {
    transform: scale3d(0.97, 0.97, 0.97);
  }
  100% {
    opacity: 1;
    transform: scale3d(1, 1, 1);
  }
}

@keyframes bounceInOnce {
  0% {
    transform: scale3d(0.9, 0.9, 0.9);
  }
  20% {
    transform: scale3d(1.05, 1.05, 1.05);
  }
  40% {
    transform: scale3d(0.95, 0.95, 0.95);
  }
  60% {
    transform: scale3d(1.02, 1.02, 1.02);
  }
  100% {
    transform: scale3d(1, 1, 1);
  }
}

@keyframes float {
  0% {
    transform: translateY(0px);
  }
  50% {
    transform: translateY(-10px);
  }
  100% {
    transform: translateY(0px);
  }
}

@keyframes pulseSlow {
  0%, 100% {
    opacity: 1;
  }
  50% {
    opacity: 0.7;
  }
}

@keyframes loadingBarAnimation {
  0% { width: 0%; }
  25% { width: 35%; }
  50% { width: 60%; }
  75% { width: 85%; }
  100% { width: 100%; }
}

@layer base {
  :root {
    --background: 210 33% 98%;
    --foreground: 224 47% 11%;
    --card: 0 0% 100%;
    --card-foreground: 224 47% 11%;
    --popover: 0 0% 100%;
    --popover-foreground: 224 47% 11%;
    --primary: 222 84% 20%;
    --primary-foreground: 210 40% 98%;
    --primary-gradient-from: 222 84% 20%;
    --primary-gradient-to: 225 85% 15%;
    --secondary: 215 85% 25%;
    --secondary-foreground: 224 47% 11%;
    --muted: 210 40% 96.1%;
    --muted-foreground: 215.4 16.3% 46.9%;
    --accent: 225 85% 15%;
    --accent-foreground: 224 47% 11%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;
    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 222 84% 20%;
    --radius: 0.75rem;
    
    --sidebar-background: 225 90% 10%;
    --sidebar-foreground: 210 40% 98%;
    --sidebar-primary: 222 84% 20%;
    --sidebar-primary-foreground: 210 40% 98%;
    --sidebar-accent: 225 85% 15%;
    --sidebar-accent-foreground: 210 40% 98%;
    --sidebar-border: 217.2 32.6% 17.5%;
    --sidebar-ring: 224.3 76.3% 48%;
  }

  .dark {
    --background: 224 47% 8%;
    --foreground: 210 40% 98%;
    --card: 224 47% 8%;
    --card-foreground: 210 40% 98%;
    --popover: 224 47% 8%;
    --popover-foreground: 210 40% 98%;
    --primary: 222 84% 25%;
    --primary-foreground: 222.2 47.4% 11.2%;
    --primary-gradient-from: 222 84% 25%;
    --primary-gradient-to: 225 85% 10%;
    --secondary: 215 85% 25%;
    --secondary-foreground: 222.2 47.4% 11.2%;
    --muted: 217.2 32.6% 17.5%;
    --muted-foreground: 215 20.2% 65.1%;
    --accent: 225 90% 10%;
    --accent-foreground: 210 40% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 40% 98%;
    --border: 217.2 32.6% 17.5%;
    --input: 217.2 32.6% 17.5%;
    --ring: 224.3 76.3% 48%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

.card-hover {
  transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.card-hover:hover {
  transform: translateY(-5px);
  box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1);
}

.feature-icon {
  @apply relative overflow-hidden flex items-center justify-center rounded-xl;
  background: linear-gradient(135deg, hsl(var(--primary)), hsl(var(--accent)));
}

.feature-icon::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 200%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255,255,255,0.3), transparent);
  transition: all 0.6s ease;
}

.feature-icon:hover::before {
  left: 100%;
}

/* General transition for UI elements */
button, a, input, select, .transition-all {
  transition: all 0.3s ease;
}

/* Add button press effect */
button:active:not(:disabled) {
  transform: scale(0.98);
}

/* Fancy highlight effect */
.highlight-container {
  position: relative;
}

.highlight {
  position: relative;
  z-index: 1;
}

.highlight::after {
  content: "";
  position: absolute;
  z-index: -1;
  bottom: 0;
  left: 0;
  height: 30%;
  width: 100%;
  background: linear-gradient(90deg, hsla(var(--primary), 0.2), hsla(var(--accent), 0.2));
  transition: height 0.3s ease;
}

.highlight:hover::after {
  height: 100%;
}

/* 3D Button Effect */
.btn-3d {
  position: relative;
  transform: translateZ(0);
  transition: transform 0.3s, box-shadow 0.3s;
}

.btn-3d:hover {
  transform: translateY(-2px);
  box-shadow: 0 10px 20px -10px rgba(0, 0, 0, 0.2);
}

.btn-3d:active {
  transform: translateY(0);
  box-shadow: 0 5px 10px -5px rgba(0, 0, 0, 0.2);
}

/* Back to top button */
.back-to-top {
  position: fixed;
  bottom: 20px;
  right: 20px;
  z-index: 99;
  opacity: 0;
  visibility: hidden;
  background-color: hsl(var(--primary));
  color: white;
  border-radius: 50%;
  width: 40px;
  height: 40px;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  transition: opacity 0.3s, visibility 0.3s, transform 0.3s;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
}

.back-to-top.visible {
  opacity: 1;
  visibility: visible;
}

.back-to-top:hover {
  transform: translateY(-3px);
}

/* Performance optimizations */
.transform-gpu {
  transform: translateZ(0);
  will-change: transform, opacity;
}

/* Ensure images don't cause layout shifts and optimize for performance */
img, svg {
  transform: translateZ(0);
}

/* Custom scrollbar for webkit browsers */
::-webkit-scrollbar {
  width: 10px;
}

::-webkit-scrollbar-track {
  background-color: rgba(0, 0, 0, 0.05);
}

::-webkit-scrollbar-thumb {
  background-color: rgba(0, 0, 0, 0.15);
  border-radius: 5px;
}

::-webkit-scrollbar-thumb:hover {
  background-color: rgba(0, 0, 0, 0.25);
}

/* Scroll performance optimizations */
body.is-scrolling * {
  pointer-events: none !important;
}

body.is-scrolling .back-to-top,
body.is-scrolling button,
body.is-scrolling a,
body.is-scrolling input,
body.is-scrolling select,
body.is-scrolling .modal,
body.is-scrolling [role="dialog"] {
  pointer-events: auto !important;
}

/* Force hardware acceleration for smoother animations */
.transform-gpu,
.animate-fade-in,
.animate-slide-up,
.animate-slide-in-right,
.animate-slide-in-left,
.animate-bounce-in,
.animate-float,
.animate-pulse-slow,
.btn-3d,
.glass-card,
.card-hover {
  -webkit-backface-visibility: hidden;
  backface-visibility: hidden;
  transform: translate3d(0, 0, 0);
  perspective: 1000px;
}

/* Add this grid pattern to the CSS file */
.bg-grid-pattern {
  background-image:
    linear-gradient(to right, rgba(15, 23, 42, 0.1) 1px, transparent 1px),
    linear-gradient(to bottom, rgba(15, 23, 42, 0.1) 1px, transparent 1px);
  background-size: 30px 30px;
}

/* Dark mode enhancements */
.dark .active-nav-item {
  color: white !important;
  font-weight: bold;
}

.dark .text-muted-foreground {
  color: rgba(255, 255, 255, 0.7) !important;
}

.dark .link-hover:hover {
  color: white !important;
  text-shadow: 0 0 8px rgba(255, 255, 255, 0.2);
}



===== FILE: ./app/layout.tsx =====
import type React from "react"
import "@/app/globals.css"
import { Poppins } from "next/font/google"
import { ThemeProvider } from "@/components/theme-provider"
import { ClientWrapper } from "@/components/client-wrapper"
import { PageTransition } from "@/components/page-transition"
import { Toaster } from "@/components/ui/toaster"
import { SessionProvider } from "@/components/session-provider"
import { BackToTop } from "@/components/back-to-top"
import { ScrollPerformanceOptimizer } from "@/components/scroll-performance"
import { LoadingIndicator } from "@/components/loading-indicator"
import { Footer } from "./components/footer"
import { getServerSession } from "next-auth"
import { authOptions } from "@/lib/auth-options"

const poppins = Poppins({ 
  subsets: ["latin"],
  weight: ["300", "400", "500", "600", "700"],
  variable: "--font-poppins",
})

export const metadata = {
  title: "RECOVR - Advanced Lost & Found Recovery System",
  description: "AI-powered system for detecting, tracking, and recovering lost objects using advanced image recognition technology.",
  keywords: "lost and found, object recovery, AI, image matching, lost items, found items",
  author: "RECOVR Team",
  generator: 'v0.dev'
}

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode
}>) {
  // Get the session from the server
  const session = await getServerSession(authOptions);
  
  return (
    <html lang="en" suppressHydrationWarning>
      <body className={`${poppins.className} min-h-screen bg-background antialiased`}>
        <SessionProvider session={session}>
          <ThemeProvider attribute="class" defaultTheme="light" enableSystem disableTransitionOnChange>
            <LoadingIndicator />
            <div className="relative flex min-h-screen flex-col items-center">
              <div className="w-full max-w-[1800px] mx-auto">
                <ClientWrapper />
                <main className="flex-1 w-full">
                  <PageTransition>
                    {children}
                  </PageTransition>
                </main>
              </div>
              <Footer />
              <BackToTop />
            </div>
            <ScrollPerformanceOptimizer />
            <Toaster />
          </ThemeProvider>
        </SessionProvider>
      </body>
    </html>
  )
}



===== FILE: ./app/loading.tsx =====
export default function Loading() {
  return null
}



===== FILE: ./app/login/page.tsx =====
"use client";

import { useEffect } from "react";
import { useRouter } from "next/navigation";
import { Loader2 } from "lucide-react";

export default function LoginPage() {
  const router = useRouter();

  useEffect(() => {
    router.push("/auth/signin");
  }, [router]);

  return (
    <div className="flex h-screen w-full items-center justify-center">
      <div className="flex flex-col items-center gap-2">
        <Loader2 className="h-8 w-8 animate-spin text-primary" />
        <p className="text-lg text-muted-foreground">Redirecting to login...</p>
      </div>
    </div>
  );
} 


===== FILE: ./app/lost-objects/page.tsx =====
"use client"

import { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { MapPin, Calendar, Clock, Filter, Loader2 } from "lucide-react"
import Image from "next/image"
import Link from "next/link"
import { useSearchParams, useRouter } from "next/navigation"

interface LostObject {
  id: string;
  name: string;
  location: string;
  date: string;
  time: string;
  image: string;
  category: string;
  description?: string;
  status?: string;
}

export default function LostObjectsPage() {
  const router = useRouter();
  const searchParams = useSearchParams();
  
  const [searchTerm, setSearchTerm] = useState(searchParams.get("query") || "")
  const [activeCategory, setActiveCategory] = useState(searchParams.get("category") || "all")
  const [objects, setObjects] = useState<LostObject[]>([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [currentPage, setCurrentPage] = useState(0)
  const [totalPages, setTotalPages] = useState(0)
  const [totalItems, setTotalItems] = useState(0)

  // Load objects when search parameters change
  useEffect(() => {
    const loadObjects = async () => {
      setLoading(true);
      setError(null);
      
      try {
        // Build query parameters
        const params = new URLSearchParams({
          page: currentPage.toString(),
          size: "12",
        });
        
        if (searchTerm) params.append("query", searchTerm);
        if (activeCategory !== "all") params.append("category", activeCategory);
        
        // Fetch data from API
        const response = await fetch(`/api/lost-objects?${params.toString()}`);
        
        if (!response.ok) {
          throw new Error("Failed to fetch objects");
        }
        
        const data = await response.json();
        
        setObjects(data.objects);
        setTotalPages(data.totalPages);
        setTotalItems(data.totalItems);
        
        // Update URL without reloading page
        const newParams = new URLSearchParams(searchParams);
        if (searchTerm) newParams.set("query", searchTerm);
        if (activeCategory !== "all") newParams.set("category", activeCategory);
        router.push(`/lost-objects?${newParams.toString()}`, { scroll: false });
        
      } catch (err) {
        console.error("Error loading objects:", err);
        setError("Failed to load objects. Please try again.");
      } finally {
        setLoading(false);
      }
    };
    
    loadObjects();
  }, [searchTerm, activeCategory, currentPage, router, searchParams]);

  // Handle search input with debounce
  useEffect(() => {
    const timer = setTimeout(() => {
      setCurrentPage(0); // Reset to first page on new search
    }, 500);
    
    return () => clearTimeout(timer);
  }, [searchTerm]);

  // Handle category change
  const handleCategoryChange = (category: string) => {
    setActiveCategory(category);
    setCurrentPage(0); // Reset to first page on category change
  };

  return (
    <div className="container py-8">
      <div className="flex flex-col space-y-6">
        <div className="flex flex-col space-y-2">
          <h1 className="text-3xl font-bold">Lost Objects</h1>
          <p className="text-muted-foreground">
            Browse through recently detected lost objects or search for specific items
          </p>
        </div>

        <div className="flex flex-col space-y-4 md:flex-row md:space-y-0 md:space-x-4">
          <div className="flex-1">
            <Input
              placeholder="Search by name or location..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="w-full"
            />
          </div>
          <div className="flex space-x-2">
            <Button variant="outline" size="icon">
              <Filter className="h-4 w-4" />
            </Button>
            <Link href="/map">
              <Button variant="outline">View Map</Button>
            </Link>
          </div>
        </div>

        <Tabs defaultValue="all" value={activeCategory} onValueChange={handleCategoryChange}>
          <TabsList className="grid grid-cols-5 w-full max-w-md">
            <TabsTrigger value="all">All</TabsTrigger>
            <TabsTrigger value="bag">Bags</TabsTrigger>
            <TabsTrigger value="electronics">Electronics</TabsTrigger>
            <TabsTrigger value="accessory">Accessories</TabsTrigger>
            <TabsTrigger value="other">Other</TabsTrigger>
          </TabsList>

          {error && (
            <div className="mt-4 p-4 bg-red-50 text-red-700 rounded-md">
              {error}
            </div>
          )}

          <div className="mt-6">
            {loading ? (
              <div className="flex justify-center items-center h-64">
                <Loader2 className="h-8 w-8 animate-spin text-primary" />
              </div>
            ) : objects.length === 0 ? (
              <div className="text-center py-12 text-muted-foreground">
                No objects found. Try adjusting your search criteria.
            </div>
            ) : (
              <>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                  {objects.map((object) => (
                <LostObjectCard key={object.id} object={object} />
              ))}
            </div>

                {/* Pagination */}
                {totalPages > 1 && (
                  <div className="flex justify-center items-center space-x-2 mt-8">
                    <Button
                      variant="outline"
                      onClick={() => setCurrentPage(p => Math.max(0, p - 1))}
                      disabled={currentPage === 0}
                    >
                      Previous
                    </Button>
                    <span className="text-sm text-muted-foreground">
                      Page {currentPage + 1} of {totalPages}
                    </span>
                    <Button
                      variant="outline"
                      onClick={() => setCurrentPage(p => Math.min(totalPages - 1, p + 1))}
                      disabled={currentPage === totalPages - 1}
                    >
                      Next
                    </Button>
            </div>
                )}
              </>
            )}
            </div>
        </Tabs>
      </div>
    </div>
  )
}

function LostObjectCard({ object }: { object: LostObject }) {
  return (
    <Card className="overflow-hidden">
      <div className="aspect-square relative">
        <Image 
          src={object.image || "/placeholder.svg"} 
          alt={object.name} 
          fill 
          className="object-cover"
        />
      </div>
      <CardHeader>
        <CardTitle>{object.name}</CardTitle>
      </CardHeader>
      <CardContent>
        <div className="space-y-2 text-sm">
          <div className="flex items-center">
            <MapPin className="h-4 w-4 mr-2 text-muted-foreground" />
            <span>{object.location}</span>
          </div>
          <div className="flex items-center">
            <Calendar className="h-4 w-4 mr-2 text-muted-foreground" />
            <span>{object.date}</span>
          </div>
          <div className="flex items-center">
            <Clock className="h-4 w-4 mr-2 text-muted-foreground" />
            <span>{object.time}</span>
          </div>
        </div>
      </CardContent>
      <CardFooter>
        <Button variant="outline" className="w-full" asChild>
          <Link href={`/lost-objects/${object.id}`}>
          View Details
          </Link>
        </Button>
      </CardFooter>
    </Card>
  )
}



===== FILE: ./app/map/page.tsx =====
"use client"

import { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { MapPin, Search, Layers, List } from "lucide-react"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Input } from "@/components/ui/input"
import dynamic from "next/dynamic"

// Import MapViewer component dynamically to avoid SSR issues
const MapViewer = dynamic(() => import("@/components/map-viewer"), { ssr: false })

// Mock data for initial development
const MOCK_OBJECT_LOCATIONS = [
  {
    id: 1,
    name: "Black Backpack",
    location: "Library, 2nd Floor",
    date: "2025-05-15",
    image: "/placeholder.svg?height=100&width=100",
    category: "bag",
    coordinates: {
      lat: 40.7128,
      lng: -74.006,
      x: 150,
      y: 120,
    },
  },
  {
    id: 2,
    name: "Blue Smartphone",
    location: "Cafeteria",
    date: "2025-05-16",
    image: "/placeholder.svg?height=100&width=100",
    category: "electronics",
    coordinates: {
      lat: 40.7138,
      lng: -74.013,
      x: 320,
      y: 280,
    },
  },
  {
    id: 3,
    name: "Red Wallet",
    location: "Gym Area",
    date: "2025-05-17",
    image: "/placeholder.svg?height=100&width=100",
    category: "accessory",
    coordinates: {
      lat: 40.7148,
      lng: -74.001,
      x: 450,
      y: 380,
    },
  },
]

export default function MapPage() {
  const [objects, setObjects] = useState(MOCK_OBJECT_LOCATIONS)
  const [selectedCategory, setSelectedCategory] = useState("all")
  const [loading, setLoading] = useState(false)
  const [searchQuery, setSearchQuery] = useState("")
  
  // In a real app, fetch from API
  useEffect(() => {
    const fetchData = async () => {
      setLoading(true)
      
      try {
        // Simulate API call
        // In production, replace with real API call:
        // const response = await fetch('/api/lost-objects?status=found');
        // const data = await response.json();
        // setObjects(data.objects);
        
        // For now, just simulate a delay
        setTimeout(() => {
          setLoading(false)
        }, 500)
      } catch (error) {
        console.error("Error fetching object locations:", error)
        setLoading(false)
      }
    }
    
    fetchData()
  }, [])
  
  // Filter objects by category and search query
  const filteredObjects = objects.filter(obj => {
    const categoryMatch = selectedCategory === "all" || obj.category === selectedCategory
    const searchMatch = !searchQuery || 
      obj.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
      obj.location.toLowerCase().includes(searchQuery.toLowerCase())
    
    return categoryMatch && searchMatch
  })

  return (
    <div className="container py-8">
      <div className="flex flex-col space-y-4">
        <div>
          <h1 className="text-3xl font-bold">Lost Object Map</h1>
          <p className="text-muted-foreground">Locate and track lost items on the map</p>
        </div>
        
        <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
          {/* Sidebar filters */}
          <div className="lg:col-span-1">
            <Card>
              <CardHeader>
                <CardTitle>Filters</CardTitle>
                <CardDescription>Narrow down your search</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="space-y-2">
                  <label className="text-sm font-medium">Category</label>
                  <Select value={selectedCategory} onValueChange={setSelectedCategory}>
                    <SelectTrigger>
                      <SelectValue placeholder="Select category" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="all">All Categories</SelectItem>
                      <SelectItem value="bag">Bags</SelectItem>
                      <SelectItem value="electronics">Electronics</SelectItem>
                      <SelectItem value="accessory">Accessories</SelectItem>
                      <SelectItem value="clothing">Clothing</SelectItem>
                      <SelectItem value="document">Documents</SelectItem>
                      <SelectItem value="other">Other</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                
                <div className="space-y-2">
                  <label className="text-sm font-medium">Search</label>
                  <div className="relative">
                    <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
                    <Input
                      type="search"
                      placeholder="Search by name or location"
                      className="pl-8"
                      value={searchQuery}
                      onChange={(e) => setSearchQuery(e.target.value)}
                    />
                  </div>
                </div>
              </CardContent>
              
              <CardFooter>
                <Button
                  variant="outline"
                  className="w-full"
                  onClick={() => {
                    setSelectedCategory("all")
                    setSearchQuery("")
                  }}
                >
                  Reset Filters
                </Button>
              </CardFooter>
            </Card>
            
            <div className="mt-4">
              <Card>
                <CardHeader className="p-4">
                  <CardTitle className="text-lg">Found Objects ({filteredObjects.length})</CardTitle>
                </CardHeader>
                <CardContent className="p-4 max-h-[400px] overflow-y-auto">
                  {loading ? (
                    <div className="text-center py-8">Loading...</div>
                  ) : filteredObjects.length === 0 ? (
                    <div className="text-center py-8 text-muted-foreground">
                      No objects found matching your criteria
                    </div>
                  ) : (
                    <div className="space-y-4">
                      {filteredObjects.map((obj) => (
                        <div
                          key={obj.id}
                          className="flex items-center p-2 border rounded-md hover:bg-muted transition cursor-pointer"
                        >
                          <div className="w-12 h-12 rounded-md mr-3 overflow-hidden">
                            <img
                              src={obj.image}
                              alt={obj.name}
                              className="w-full h-full object-cover"
                            />
                          </div>
                          <div className="flex-1">
                            <h4 className="font-medium">{obj.name}</h4>
                            <div className="flex items-center text-xs text-muted-foreground">
                              <MapPin className="h-3 w-3 mr-1" />
                              {obj.location}
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                  )}
                </CardContent>
              </Card>
            </div>
          </div>
          
          {/* Map view */}
          <div className="lg:col-span-3">
            <Tabs defaultValue="map" className="w-full">
              <TabsList>
                <TabsTrigger value="map">
                  <Layers className="h-4 w-4 mr-2" />
                  Map View
                </TabsTrigger>
                <TabsTrigger value="list">
                  <List className="h-4 w-4 mr-2" />
                  List View
                </TabsTrigger>
              </TabsList>
              
              <TabsContent value="map">
                <Card>
                  <CardContent className="p-0 relative overflow-hidden">
                    <div className="w-full h-[600px]">
                      {!loading && (
                        <MapViewer objects={filteredObjects} />
                      )}
                    </div>
                  </CardContent>
                </Card>
              </TabsContent>
              
              <TabsContent value="list">
                <Card>
                  <CardContent>
                    <div className="space-y-4 py-4">
                      {filteredObjects.length === 0 ? (
                        <div className="text-center py-8 text-muted-foreground">
                          No objects found matching your criteria
                        </div>
                      ) : (
                        filteredObjects.map((obj) => (
                          <Card key={obj.id}>
                            <CardContent className="p-4">
                              <div className="flex flex-col sm:flex-row gap-4">
                                <div className="sm:w-1/4">
                                  <img
                                    src={obj.image}
                                    alt={obj.name}
                                    className="w-full aspect-square object-cover rounded-md"
                                  />
                                </div>
                                <div className="flex-1">
                                  <h3 className="text-lg font-bold">{obj.name}</h3>
                                  <div className="mt-2 space-y-1">
                                    <div className="flex items-center gap-1 text-sm">
                                      <MapPin className="h-4 w-4 text-muted-foreground" />
                                      <span>{obj.location}</span>
                                    </div>
                                    <p className="text-sm">Found on: {obj.date}</p>
                                    <p className="text-sm capitalize">Category: {obj.category}</p>
                                  </div>
                                  <div className="mt-4">
                                    <Button size="sm">View Details</Button>
                                  </div>
                                </div>
                              </div>
                            </CardContent>
                          </Card>
                        ))
                      )}
                    </div>
                  </CardContent>
                </Card>
              </TabsContent>
            </Tabs>
          </div>
        </div>
      </div>
    </div>
  )
}



===== FILE: ./app/page.tsx =====
import { HeroSection } from "@/components/hero-section"
import { FeaturesSection } from "@/components/features-section"
import { HowItWorks } from "@/components/how-it-works"
import { FeatureGallery } from "@/components/feature-gallery"
import { Testimonials } from "@/components/testimonials"

export default function Home() {
  return (
    <div className="flex flex-col">
      <HeroSection />
      <FeatureGallery />
      <FeaturesSection />
      <HowItWorks />
      <Testimonials />
    </div>
  )
}



===== FILE: ./app/report/page.tsx =====
"use client"

import { useState } from "react"
import { useForm } from "react-hook-form"
import { zodResolver } from "@hookform/resolvers/zod"
import { z } from "zod"
import { useRouter } from "next/navigation"
import { useSession } from "next-auth/react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Calendar } from "@/components/ui/calendar"
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover"
import { cn } from "@/lib/utils"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { format } from "date-fns"
import { CalendarIcon, MapPin, Upload, Loader2, X } from "lucide-react"
import { PageContainer } from "@/components/page-container"

// Form validation schema
const reportSchema = z.object({
  name: z.string().min(3, "Name must be at least 3 characters"),
  location: z.string().min(3, "Location is required"),
  description: z.string().min(10, "Please provide a detailed description"),
  category: z.string().min(1, "Please select a category"),
  date: z.date({ required_error: "Date is required" }),
  time: z.string().min(1, "Time is required"),
  image: z.string().min(1, "Please upload an image of the item"),
  contactInformation: z.string().optional()
})

type ReportFormValues = z.infer<typeof reportSchema>

export default function ReportPage() {
  const { data: session, status } = useSession()
  const router = useRouter()
  const [date, setDate] = useState<Date | undefined>(new Date())
  const [isUploading, setIsUploading] = useState(false)
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [uploadedImage, setUploadedImage] = useState<string | null>(null)
  const [error, setError] = useState<string | null>(null)
  const [success, setSuccess] = useState(false)

  const { register, handleSubmit, setValue, formState: { errors }, reset } = useForm<ReportFormValues>({
    resolver: zodResolver(reportSchema),
    defaultValues: {
      name: "",
      location: "",
      description: "",
      category: "",
      time: "",
      contactInformation: session?.user?.email || ""
    }
  })

  // Set date and image when they change
  if (date) {
    setValue("date", date)
  }

  if (uploadedImage) {
    setValue("image", uploadedImage)
  }

  const handleImageUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0]
    if (!file) return

    // Reset any previous errors
    setError(null)

    // Validate file type
    if (!file.type.startsWith("image/")) {
      setError("File must be an image")
      return
    }

    // Validate file size (5MB max)
    if (file.size > 5 * 1024 * 1024) {
      setError("File size must be less than 5MB")
      return
    }

      setIsUploading(true)

    try {
      // Create form data for upload
      const formData = new FormData()
      formData.append("file", file)

      // Upload image to server
      const response = await fetch("/api/upload", {
        method: "POST",
        body: formData,
      })

      if (!response.ok) {
        throw new Error("Failed to upload image")
      }

      const data = await response.json()
      setUploadedImage(data.image.url)
    } catch (err) {
      console.error("Upload error:", err)
      setError("Failed to upload image. Please try again.")
    } finally {
        setIsUploading(false)
    }
  }

  const onSubmit = async (data: ReportFormValues) => {
    if (status === "unauthenticated") {
      // Save form data to session storage and redirect to sign in
      sessionStorage.setItem("reportFormData", JSON.stringify(data))
      router.push("/auth/signin?callbackUrl=/report&reason=report")
      return
    }

    setIsSubmitting(true)
    setError(null)

    try {
      // Format date for submission
      const formattedDate = format(data.date, "yyyy-MM-dd")

      // Prepare coordinates (in a real app, this would be from a map picker)
      const coordinates = {
        x: Math.floor(Math.random() * 500), // Mock coordinates for demo
        y: Math.floor(Math.random() * 400),
        lat: 40.7128 + (Math.random() * 0.01), // Mock NYC area coordinates
        lng: -74.006 + (Math.random() * 0.01)
      }

      // Submit to API
      const response = await fetch("/api/lost-objects", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          ...data,
          date: formattedDate,
          coordinates
        }),
      })

      if (!response.ok) {
        const result = await response.json()
        throw new Error(result.error || "Failed to submit report")
      }

      // Success
      setSuccess(true)
      reset()
      setUploadedImage(null)
      
      // Redirect to confirmation page after a short delay
    setTimeout(() => {
        router.push("/lost-objects")
      }, 2000)
    } catch (err: any) {
      setError(err.message || "An error occurred while submitting your report")
    } finally {
      setIsSubmitting(false)
    }
  }

  return (
    <PageContainer>
      <div className="max-w-2xl mx-auto">
        <div className="flex flex-col space-y-2 mb-6">
          <h1 className="text-3xl font-bold">Report a Found Item</h1>
          <p className="text-muted-foreground">
            Fill out the form below with details about the item you found
          </p>
        </div>

        {success && (
          <Alert className="mb-6 border-green-500 bg-green-50 text-green-700">
            <AlertDescription>
              Your item has been reported successfully! Redirecting...
            </AlertDescription>
          </Alert>
        )}

        <Card className="transform-gpu">
          <CardHeader>
            <CardTitle>Item Details</CardTitle>
            <CardDescription>
              Provide as much information as possible to help someone find their lost item
            </CardDescription>
          </CardHeader>
          <CardContent>
            <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
              {error && (
                <Alert variant="destructive">
                  <AlertDescription>{error}</AlertDescription>
                </Alert>
              )}

              <div className="space-y-4">
                <div className="grid grid-cols-1 gap-4 sm:grid-cols-2">
                  <div className="space-y-2">
                    <Label htmlFor="name">Item Name</Label>
                    <Input
                      id="name"
                      placeholder="e.g., Black Backpack"
                      {...register("name")}
                    />
                    {errors.name && (
                      <p className="text-sm text-destructive">{errors.name.message}</p>
                    )}
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="category">Category</Label>
                    <Select
                      onValueChange={(value) => setValue("category", value)}
                      defaultValue=""
                    >
                      <SelectTrigger id="category">
                        <SelectValue placeholder="Select category" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="bag">Bag</SelectItem>
                        <SelectItem value="electronics">Electronics</SelectItem>
                        <SelectItem value="accessory">Accessory</SelectItem>
                        <SelectItem value="clothing">Clothing</SelectItem>
                        <SelectItem value="document">Document</SelectItem>
                        <SelectItem value="other">Other</SelectItem>
                      </SelectContent>
                    </Select>
                    {errors.category && (
                      <p className="text-sm text-destructive">{errors.category.message}</p>
                    )}
                  </div>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="description">Description</Label>
                  <Textarea
                    id="description"
                    placeholder="Describe the item in detail (color, brand, distinguishing features, etc.)"
                    rows={4}
                    {...register("description")}
                  />
                  {errors.description && (
                    <p className="text-sm text-destructive">{errors.description.message}</p>
                  )}
                </div>

                <div className="grid grid-cols-1 gap-4 sm:grid-cols-2">
                  <div className="space-y-2">
                    <Label>Date Found</Label>
                    <Popover>
                      <PopoverTrigger asChild>
                        <Button
                          variant={"outline"}
                          className={cn("w-full justify-start text-left font-normal", !date && "text-muted-foreground")}
                        >
                          <CalendarIcon className="mr-2 h-4 w-4" />
                          {date ? format(date, "PPP") : <span>Pick a date</span>}
                        </Button>
                      </PopoverTrigger>
                      <PopoverContent className="w-auto p-0">
                        <Calendar
                          mode="single"
                          selected={date}
                          onSelect={setDate}
                          initialFocus
                        />
                      </PopoverContent>
                    </Popover>
                    {errors.date && (
                      <p className="text-sm text-destructive">{errors.date.message}</p>
                    )}
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="time">Approximate Time</Label>
                    <Input
                      id="time"
                      type="time"
                      {...register("time")}
                    />
                    {errors.time && (
                      <p className="text-sm text-destructive">{errors.time.message}</p>
                    )}
                  </div>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="location">Found Location</Label>
                  <div className="flex space-x-2">
                    <Input
                      id="location"
                      placeholder="e.g., Library, 2nd Floor"
                      className="flex-1"
                      {...register("location")}
                    />
                    <Button type="button" variant="outline" size="icon" title="Pick location on map">
                      <MapPin className="h-4 w-4" />
                    </Button>
                  </div>
                  {errors.location && (
                    <p className="text-sm text-destructive">{errors.location.message}</p>
                  )}
                </div>

                <div className="space-y-2">
                  <Label htmlFor="image">Upload Image</Label>
                  <div className="flex flex-col items-center justify-center border-2 border-dashed rounded-md p-6 relative">
                    {uploadedImage ? (
                      <div className="relative w-full h-48">
                        <img
                          src={uploadedImage}
                          alt="Uploaded item"
                          className="w-full h-full object-contain"
                        />
                        <Button
                          type="button"
                          variant="outline"
                          size="icon"
                          className="absolute top-2 right-2"
                          onClick={() => {
                            setUploadedImage(null)
                            setValue("image", "")
                          }}
                        >
                          <X className="h-4 w-4" />
                        </Button>
                      </div>
                    ) : (
                      <>
                        {isUploading ? (
                          <div className="flex flex-col items-center justify-center py-4">
                            <Loader2 className="h-8 w-8 animate-spin text-primary mb-2" />
                            <p className="text-sm text-muted-foreground">Uploading image...</p>
                          </div>
                        ) : (
                          <>
                            <Upload className="h-10 w-10 text-muted-foreground mb-2" />
                            <p className="text-sm text-muted-foreground mb-2">Drag and drop or click to upload</p>
                            <p className="text-xs text-muted-foreground">PNG, JPG or JPEG (max. 5MB)</p>
                            <Input
                              id="image"
                              type="file"
                              accept="image/*"
                              className="absolute inset-0 w-full h-full opacity-0 cursor-pointer"
                              onChange={handleImageUpload}
                            />
                          </>
                        )}
                      </>
                    )}
                  </div>
                  {errors.image && (
                    <p className="text-sm text-destructive">{errors.image.message}</p>
                  )}
                </div>

                <div className="space-y-2">
                  <Label htmlFor="contactInformation">Contact Information (Optional)</Label>
                  <Input
                    id="contactInformation"
                    placeholder="Email or phone number where you can be reached"
                    {...register("contactInformation")}
                    defaultValue={session?.user?.email || ""}
                  />
                </div>
              </div>

              <CardFooter className="px-0 pt-4">
                <Button
                  type="submit"
                  className="w-full"
                  disabled={isSubmitting || isUploading || success}
                >
                  {isSubmitting ? (
                    <>
                      <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                      Submitting...
                    </>
                  ) : (
                    "Submit Report"
                  )}
                </Button>
              </CardFooter>
            </form>
          </CardContent>
        </Card>
      </div>
    </PageContainer>
  )
}




===== FILE: ./app/search/loading.tsx =====
export default function Loading() {
  return null
}



===== FILE: ./app/search/page.tsx =====
"use client"

import { useState, useCallback } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Badge } from "@/components/ui/badge"
import { Loader2, Upload, Search as SearchIcon, Image as ImageIcon } from "lucide-react"
import Image from "next/image"
import { useDropzone } from "react-dropzone"

interface SearchResult {
  id: string;
  name: string;
  location: string;
  date: string;
  image: string;
  matchScore: number;
  category: string;
}

export default function SearchPage() {
  const [searchMethod, setSearchMethod] = useState<"image" | "text">("text")
  const [searchTerm, setSearchTerm] = useState("")
  const [uploadedImage, setUploadedImage] = useState<File | null>(null)
  const [imagePreview, setImagePreview] = useState<string | null>(null)
  const [results, setResults] = useState<SearchResult[]>([])
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)
  
  const onDrop = useCallback((acceptedFiles: File[]) => {
    const file = acceptedFiles[0]
    if (file) {
      setUploadedImage(file)
      const reader = new FileReader()
      reader.onload = () => {
        setImagePreview(reader.result as string)
      }
      reader.readAsDataURL(file)
    }
  }, [])

  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    onDrop,
    accept: {
      'image/*': ['.jpeg', '.jpg', '.png']
    },
    maxFiles: 1,
    multiple: false
  })

  const handleTextSearch = async () => {
    if (!searchTerm.trim()) return

    setLoading(true)
    setError(null)

    try {
      const response = await fetch(`/api/lost-objects?search=${encodeURIComponent(searchTerm)}`)
      
      if (!response.ok) {
        throw new Error("Failed to search objects")
      }
      
      const data = await response.json()
      setResults(data.items.map((item: any) => ({
        id: item.id,
        name: item.name,
        location: item.location,
        date: item.date,
        image: item.image,
        matchScore: 100, // Text search doesn't have match scores
        category: item.category
      })))
    } catch (err) {
      console.error("Error searching objects:", err)
      setError("Failed to search objects. Please try again.")
    } finally {
      setLoading(false)
    }
  }

  const handleImageSearch = async () => {
    if (!uploadedImage) return

    setLoading(true)
    setError(null)

    try {
      // First, get image features using the detection service
      const formData = new FormData()
      formData.append("image", uploadedImage)

      const featuresResponse = await fetch("/api/detection/features", {
        method: "POST",
        body: formData
      })

      if (!featuresResponse.ok) {
        throw new Error("Failed to extract image features")
      }
      
      const { features } = await featuresResponse.json()

      // Then, search using the features
      const searchResponse = await fetch("/api/search/image", {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          features,
          minScore: 0.7 // Minimum similarity score
        })
      })
      
      if (!searchResponse.ok) {
        throw new Error("Failed to search with image")
      }
      
      const data = await searchResponse.json()
      setResults(data.results)
    } catch (err) {
      console.error("Error searching with image:", err)
      setError("Failed to search with image. Please try again.")
    } finally {
      setLoading(false)
    }
  }

  const formatDate = (dateString: string) => {
    const date = new Date(dateString)
    return date.toLocaleDateString("fr-FR", {
      year: "numeric",
      month: "long",
      day: "numeric"
    })
  }

  return (
    <div className="container mx-auto py-8">
      <div className="max-w-4xl mx-auto">
        <h1 className="text-3xl font-bold mb-8">Rechercher un objet perdu</h1>

        <Tabs defaultValue="text" value={searchMethod} onValueChange={(v) => setSearchMethod(v as "image" | "text")}>
          <TabsList className="grid w-full grid-cols-2 mb-8">
            <TabsTrigger value="text">Recherche par texte</TabsTrigger>
            <TabsTrigger value="image">Recherche par image</TabsTrigger>
        </TabsList>

          <TabsContent value="text">
            <Card>
              <CardHeader>
                <CardTitle>Recherche par texte</CardTitle>
                <CardDescription>
                  Entrez une description de l'objet que vous recherchez
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="flex gap-4">
                  <Input
                    placeholder="Ex: Sac à dos noir, téléphone Samsung..."
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    onKeyDown={(e) => e.key === "Enter" && handleTextSearch()}
                  />
                  <Button onClick={handleTextSearch} disabled={loading}>
                    {loading ? (
                      <Loader2 className="h-4 w-4 animate-spin" />
                        ) : (
                      <SearchIcon className="h-4 w-4" />
                    )}
                    <span className="ml-2">Rechercher</span>
                      </Button>
                </div>
              </CardContent>
            </Card>
        </TabsContent>
        
          <TabsContent value="image">
          <Card>
            <CardHeader>
                <CardTitle>Recherche par image</CardTitle>
                <CardDescription>
                  Téléchargez une photo de l'objet que vous recherchez
                </CardDescription>
            </CardHeader>
            <CardContent>
                <div
                  {...getRootProps()}
                  className={`border-2 border-dashed rounded-lg p-8 text-center cursor-pointer transition-colors ${
                    isDragActive ? "border-primary bg-primary/5" : "border-muted-foreground/25"
                  }`}
                >
                  <input {...getInputProps()} />
                  {imagePreview ? (
                <div className="space-y-4">
                      <div className="relative h-48 w-full">
                        <Image
                          src={imagePreview}
                          alt="Preview"
                          fill
                          className="object-contain rounded-lg"
                        />
                      </div>
                      <Button onClick={handleImageSearch} disabled={loading}>
                        {loading ? (
                          <Loader2 className="h-4 w-4 animate-spin" />
                        ) : (
                          <SearchIcon className="h-4 w-4" />
                        )}
                        <span className="ml-2">Rechercher</span>
                      </Button>
                    </div>
                  ) : (
                    <div className="space-y-4">
                      <div className="mx-auto w-12 h-12 rounded-full bg-primary/10 flex items-center justify-center">
                        <Upload className="h-6 w-6 text-primary" />
                      </div>
                      <div>
                        <p className="text-sm font-medium">
                          Glissez-déposez une image ici, ou cliquez pour sélectionner
                        </p>
                        <p className="text-sm text-muted-foreground mt-1">
                          Formats acceptés: JPG, JPEG, PNG
                        </p>
                  </div>
                  </div>
                  )}
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>

        {error && (
          <div className="mt-4 p-4 bg-red-50 border border-red-200 rounded-lg">
            <p className="text-sm text-red-600">{error}</p>
          </div>
        )}

        {results.length > 0 && (
              <div className="mt-8">
            <h2 className="text-xl font-semibold mb-4">
              Résultats de la recherche ({results.length})
            </h2>
            <div className="grid gap-4 md:grid-cols-2">
              {results.map((result) => (
                <Card key={result.id}>
                  <div className="relative h-48 w-full">
                              <Image
                      src={result.image}
                                alt={result.name}
                                fill
                      className="object-cover rounded-t-lg"
                              />
                    {result.matchScore && (
                      <Badge
                        variant="secondary"
                        className="absolute top-2 right-2"
                      >
                        {Math.round(result.matchScore * 100)}% match
                      </Badge>
                    )}
                            </div>
                  <CardContent className="p-4">
                    <h3 className="font-semibold">{result.name}</h3>
                    <p className="text-sm text-muted-foreground mt-1">
                      {result.location}
                                </p>
                    <p className="text-sm text-muted-foreground">
                      {formatDate(result.date)}
                          </p>
                    <Badge variant="outline" className="mt-2">
                      {result.category}
                    </Badge>
                  </CardContent>
                      </Card>
                    ))}
                  </div>
          </div>
        )}

        {!loading && results.length === 0 && searchTerm && (
          <div className="mt-8 text-center text-muted-foreground">
            Aucun résultat trouvé pour votre recherche
                </div>
              )}
      </div>
    </div>
  )
}



===== FILE: ./app/signup/page.tsx =====
"use client";

import { useEffect } from "react";
import { useRouter } from "next/navigation";
import { Loader2 } from "lucide-react";

export default function SignupPage() {
  const router = useRouter();

  useEffect(() => {
    router.push("/auth/register");
  }, [router]);

  return (
    <div className="flex h-screen w-full items-center justify-center">
      <div className="flex flex-col items-center gap-2">
        <Loader2 className="h-8 w-8 animate-spin text-primary" />
        <p className="text-lg text-muted-foreground">Redirecting to signup...</p>
      </div>
    </div>
  );
} 


===== FILE: ./components/back-to-top.tsx =====
"use client"

import { useState, useEffect } from 'react'
import { ChevronUp } from 'lucide-react'

export function BackToTop() {
  const [isVisible, setIsVisible] = useState(false)

  useEffect(() => {
    // Show button when page is scrolled down 300px
    const toggleVisibility = () => {
      if (window.scrollY > 300) {
        setIsVisible(true)
      } else {
        setIsVisible(false)
      }
    }

    window.addEventListener('scroll', toggleVisibility, { passive: true })

    return () => window.removeEventListener('scroll', toggleVisibility)
  }, [])

  const scrollToTop = () => {
    window.scrollTo({
      top: 0,
      behavior: 'smooth'
    })
  }

  return (
    <button
      onClick={scrollToTop}
      className={`back-to-top ${isVisible ? 'visible' : ''}`}
      aria-label="Scroll to top"
    >
      <ChevronUp className="h-5 w-5" />
    </button>
  )
} 


===== FILE: ./components/client-wrapper.tsx =====
"use client"

import { Navbar } from "./navbar"

export function ClientWrapper() {
  return <Navbar />
} 


===== FILE: ./components/cta.tsx =====
import Link from "next/link"
import { GradientButton } from "@/components/ui/gradient-button"
import { Button } from "@/components/ui/button"

export function Cta() {
  return (
    <section className="border-t bg-muted/30 py-20">
      <div className="container px-4 md:px-6">
        <div className="grid gap-6 items-center">
          <div className="flex flex-col gap-4 text-center mx-auto max-w-[900px]">
            <div className="space-y-4">
              <h2 className="text-3xl font-bold tracking-tighter sm:text-4xl md:text-5xl">Ready to Find Your Lost Items?</h2>
              <p className="mx-auto max-w-[700px] text-muted-foreground md:text-xl/relaxed">
                Start using our AI-powered lost and found system today to quickly recover your valuable belongings.
              </p>
            </div>
            <div className="mx-auto flex flex-col sm:flex-row gap-4 min-[400px]:w-full min-[400px]:max-w-md">
              <Link href="/report" className="w-full">
                <GradientButton size="lg" className="w-full" animation="shimmer">
                  Get Started Now
                </GradientButton>
              </Link>
              <Link href="/search" className="w-full">
                <Button size="lg" variant="outline" className="w-full">
                  Learn More
                </Button>
              </Link>
            </div>
          </div>
        </div>
      </div>
    </section>
  )
} 


===== FILE: ./components/feature-gallery.tsx =====
"use client"

import Image from "next/image"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Card, CardContent } from "@/components/ui/card"
import { Smartphone, CameraIcon, Search as SearchIcon, CheckCircle, BarChart, BellRing } from "lucide-react"

export function FeatureGallery() {
  return (
    <section className="py-20 bg-background relative overflow-hidden">
      <div className="container px-4 md:px-6 mx-auto">
        <div className="flex flex-col items-center justify-center space-y-4 text-center mb-12">
          <h2 className="text-3xl font-bold tracking-tighter md:text-4xl/tight">
            How <span className="text-gradient">RECOVR</span> Works
          </h2>
          <p className="max-w-[700px] text-muted-foreground md:text-lg/relaxed">
            Our advanced AI system efficiently connects people with their lost items through a simple process
          </p>
        </div>
        
        <div className="mx-auto max-w-4xl">
          <Tabs defaultValue="report" className="w-full">
            <TabsList className="grid w-full grid-cols-3 mb-8">
              <TabsTrigger value="report" className="data-[state=active]:bg-background">
                <div className="flex items-center gap-2">
                  <CameraIcon className="h-4 w-4" />
                  <span>Report</span>
                </div>
              </TabsTrigger>
              <TabsTrigger value="match" className="data-[state=active]:bg-background">
                <div className="flex items-center gap-2">
                  <SearchIcon className="h-4 w-4" />
                  <span>Match</span>
                </div>
              </TabsTrigger>
              <TabsTrigger value="recover" className="data-[state=active]:bg-background">
                <div className="flex items-center gap-2">
                  <CheckCircle className="h-4 w-4" />
                  <span>Recover</span>
                </div>
              </TabsTrigger>
            </TabsList>
            
            <TabsContent value="report" className="border rounded-lg p-1">
              <div className="relative overflow-hidden rounded-md aspect-video bg-muted">
                <Image 
                  src="/report-step.svg" 
                  alt="Reporting lost item on RECOVR"
                  fill
                  className="object-cover"
                />
                <div className="absolute inset-0 bg-gradient-to-t from-black/60 to-transparent flex flex-col justify-end p-6 text-white">
                  <h3 className="text-xl font-bold mb-2">Report Your Lost Item</h3>
                  <p className="text-sm text-white/80">
                    Take a photo or upload an image of your lost item along with a description and location details.
                  </p>
                </div>
              </div>
              
              <div className="grid grid-cols-2 gap-4 mt-4">
                <Card className="overflow-hidden">
                  <CardContent className="p-0 relative aspect-[4/3]">
                    <Image 
                      src="/report-detail.svg"
                      alt="Adding item details on RECOVR" 
                      fill 
                      className="object-cover"
                    />
                  </CardContent>
                </Card>
                <Card className="overflow-hidden">
                  <CardContent className="p-0 relative aspect-[4/3]">
                    <Image 
                      src="/mobile-upload.svg"
                      alt="Mobile reporting on RECOVR" 
                      fill 
                      className="object-cover"
                    />
                  </CardContent>
                </Card>
              </div>
            </TabsContent>
            
            <TabsContent value="match" className="border rounded-lg p-1">
              <div className="relative overflow-hidden rounded-md aspect-video bg-muted">
                <Image 
                  src="/matching-step.svg" 
                  alt="AI matching process" 
                  fill 
                  className="object-cover"
                />
                <div className="absolute inset-0 bg-gradient-to-t from-black/60 to-transparent flex flex-col justify-end p-6 text-white">
                  <h3 className="text-xl font-bold mb-2">AI-Powered Matching</h3>
                  <p className="text-sm text-white/80">
                    Our advanced AI analyzes images to find potential matches from our database with high accuracy.
                  </p>
                </div>
              </div>
              
              <div className="grid grid-cols-2 gap-4 mt-4">
                <Card className="overflow-hidden">
                  <CardContent className="p-0 relative aspect-[4/3]">
                    <Image 
                      src="/ai-analysis.svg"
                      alt="AI vision analysis" 
                      fill 
                      className="object-cover"
                    />
                  </CardContent>
                </Card>
                <Card className="overflow-hidden">
                  <CardContent className="p-0 relative aspect-[4/3]">
                    <Image 
                      src="/matching-results.svg"
                      alt="Item matching results" 
                      fill 
                      className="object-cover"
                    />
                  </CardContent>
                </Card>
              </div>
            </TabsContent>
            
            <TabsContent value="recover" className="border rounded-lg p-1">
              <div className="relative overflow-hidden rounded-md aspect-video bg-muted">
                <Image 
                  src="/recover-step.svg" 
                  alt="Recovering lost item" 
                  fill 
                  className="object-cover"
                />
                <div className="absolute inset-0 bg-gradient-to-t from-black/60 to-transparent flex flex-col justify-end p-6 text-white">
                  <h3 className="text-xl font-bold mb-2">Recover Your Item</h3>
                  <p className="text-sm text-white/80">
                    Get notified when your item is found and arrange for safe recovery through our secure system.
                  </p>
                </div>
              </div>
              
              <div className="grid grid-cols-2 gap-4 mt-4">
                <Card className="overflow-hidden">
                  <CardContent className="p-0 relative aspect-[4/3]">
                    <Image 
                      src="/notify-step.svg"
                      alt="Notification on RECOVR" 
                      fill 
                      className="object-cover"
                    />
                  </CardContent>
                </Card>
                <Card className="overflow-hidden">
                  <CardContent className="p-0 relative aspect-[4/3]">
                    <Image 
                      src="/handover.svg"
                      alt="Item handover" 
                      fill 
                      className="object-cover"
                    />
                  </CardContent>
                </Card>
              </div>
            </TabsContent>
          </Tabs>
        </div>
        
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mt-20">
          <div className="flex flex-col items-center text-center p-4">
            <div className="h-12 w-12 rounded-full bg-primary/10 flex items-center justify-center mb-4">
              <Smartphone className="h-6 w-6 text-primary" />
            </div>
            <h3 className="text-lg font-semibold mb-2">Mobile-Ready</h3>
            <p className="text-sm text-muted-foreground">
              Report and track your lost items on the go with our responsive mobile interface.
            </p>
          </div>
          <div className="flex flex-col items-center text-center p-4">
            <div className="h-12 w-12 rounded-full bg-primary/10 flex items-center justify-center mb-4">
              <BellRing className="h-6 w-6 text-primary" />
            </div>
            <h3 className="text-lg font-semibold mb-2">Instant Alerts</h3>
            <p className="text-sm text-muted-foreground">
              Get immediate notifications when a potential match for your item is found.
            </p>
          </div>
          <div className="flex flex-col items-center text-center p-4">
            <div className="h-12 w-12 rounded-full bg-primary/10 flex items-center justify-center mb-4">
              <BarChart className="h-6 w-6 text-primary" />
            </div>
            <h3 className="text-lg font-semibold mb-2">Recovery Rate</h3>
            <p className="text-sm text-muted-foreground">
              Our system boasts a 96% success rate for returning items to their owners.
            </p>
          </div>
        </div>
      </div>
    </section>
  )
} 


===== FILE: ./components/features-section.tsx =====
"use client"

import { MapPin, Search, Upload, Clock, Shield, Image as ImageIcon, Database, Map } from "lucide-react"

const features = [
  {
    icon: <Upload className="h-5 w-5" />,
    name: "Easy Reporting",
    description:
      "Report lost items in seconds with our intuitive form. Upload images and provide details to improve matching accuracy.",
  },
  {
    icon: <ImageIcon className="h-5 w-5" />,
    name: "AI Image Matching",
    description:
      "Our system uses TensorFlow.js to extract features from images and match your lost items with found objects.",
  },
  {
    icon: <MapPin className="h-5 w-5" />,
    name: "Location Tracking",
    description:
      "Track where items were lost or found with interactive maps to help narrow down search areas.",
  },
  {
    icon: <Search className="h-5 w-5" />,
    name: "Smart Search",
    description:
      "Find items using text descriptions, categories, or upload an image for visual similarity search.",
  },
  {
    icon: <Database className="h-5 w-5" />,
    name: "Secure Storage",
    description:
      "All data is securely stored in MongoDB with proper authentication and encryption protocols.",
  },
  {
    icon: <Map className="h-5 w-5" />,
    name: "Interactive Maps",
    description:
      "View lost and found items on a map to easily locate where objects were reported.",
  },
  {
    icon: <Clock className="h-5 w-5" />,
    name: "Real-time Updates",
    description:
      "Receive notifications when potential matches are found for your lost items.",
  },
  {
    icon: <Shield className="h-5 w-5" />,
    name: "Secure System",
    description:
      "JWT authentication, secure API endpoints, and data encryption protect your information.",
  },
]

export function FeaturesSection() {
  return (
    <section className="bg-muted/30 py-20 md:py-24 lg:py-28 w-full">
      <div className="px-4 sm:px-6 lg:px-8 max-w-[1800px] mx-auto">
        <div className="flex flex-col items-center justify-center space-y-5 text-center md:max-w-3xl md:mx-auto">
          <div className="inline-flex items-center rounded-full border bg-background/50 px-3 py-1 text-sm font-semibold">
            <span className="text-primary">Powerful Features</span>
          </div>
          <h2 className="text-3xl font-bold tracking-tighter sm:text-4xl md:text-5xl">Advanced Technology Made Simple</h2>
          <p className="max-w-[700px] text-muted-foreground text-base md:text-lg/relaxed">
            Our system combines cutting-edge AI technology with user-friendly interfaces to create the most effective lost and found solution available.
          </p>
        </div>

        <div className="mx-auto grid max-w-none gap-8 pt-16 md:grid-cols-2 lg:grid-cols-4">
          {features.map((feature, index) => (
            <div key={index} className="group relative flex flex-col gap-2 rounded-lg border bg-background p-6 shadow-sm transition-all duration-200 hover:shadow-md">
              <div className="feature-icon h-12 w-12 flex items-center justify-center text-white">
                {feature.icon}
              </div>
              <h3 className="pt-4 text-xl font-semibold">{feature.name}</h3>
              <p className="text-muted-foreground text-sm">{feature.description}</p>
            </div>
          ))}
        </div>
      </div>
    </section>
  )
} 


===== FILE: ./components/footer.tsx =====
"use client"

import Link from "next/link"
import Image from "next/image"
import { Mail, Phone, MapPin, Github, Linkedin, Twitter } from "lucide-react"

export function Footer() {
  const currentYear = new Date().getFullYear()

  return (
    <footer className="border-t bg-background/80 backdrop-blur-lg w-full">
      <div className="max-w-[1800px] mx-auto px-4 sm:px-6 lg:px-8">
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8 py-12">
          {/* Brand column */}
          <div className="space-y-4">
            <Link href="/" className="inline-block">
              <Image src="/logo.svg" alt="RECOVR Logo" width={140} height={40} />
            </Link>
            <p className="text-sm text-muted-foreground max-w-xs">
              Using advanced AI technology to help you recover your lost belongings quickly and efficiently.
            </p>
            <div className="flex items-center space-x-4 mt-4">
              <Link href="#" className="text-muted-foreground hover:text-primary transition-colors">
                <Github className="h-5 w-5" />
                <span className="sr-only">GitHub</span>
              </Link>
              <Link href="#" className="text-muted-foreground hover:text-primary transition-colors">
                <Twitter className="h-5 w-5" />
                <span className="sr-only">Twitter</span>
              </Link>
              <Link href="#" className="text-muted-foreground hover:text-primary transition-colors">
                <Linkedin className="h-5 w-5" />
                <span className="sr-only">LinkedIn</span>
              </Link>
            </div>
          </div>

          {/* Quick links */}
          <div>
            <h3 className="text-base font-medium mb-4">Quick Links</h3>
            <ul className="space-y-2">
              {[
                { title: "Home", href: "/" },
                { title: "Lost Items", href: "/lost-objects" },
                { title: "Report Item", href: "/report" },
                { title: "Find Item", href: "/search" },
                { title: "Map", href: "/map" },
              ].map((link) => (
                <li key={link.title}>
                  <Link 
                    href={link.href}
                    className="text-sm text-muted-foreground hover:text-primary transition-colors"
                  >
                    {link.title}
                  </Link>
                </li>
              ))}
            </ul>
          </div>

          {/* Resources */}
          <div>
            <h3 className="text-base font-medium mb-4">Resources</h3>
            <ul className="space-y-2">
              {[
                { title: "Help Center", href: "/help" },
                { title: "Privacy Policy", href: "/privacy" },
                { title: "Terms of Service", href: "/terms" },
                { title: "FAQ", href: "/faq" },
                { title: "Blog", href: "/blog" },
              ].map((link) => (
                <li key={link.title}>
                  <Link 
                    href={link.href}
                    className="text-sm text-muted-foreground hover:text-primary transition-colors"
                  >
                    {link.title}
                  </Link>
                </li>
              ))}
            </ul>
          </div>

          {/* Contact info */}
          <div>
            <h3 className="text-base font-medium mb-4">Contact</h3>
            <ul className="space-y-3">
              <li className="flex items-start space-x-3 text-sm">
                <MapPin className="h-5 w-5 text-muted-foreground shrink-0" />
                <span className="text-muted-foreground">
                  123 Recovery Street, Tech Park<br />
                  San Francisco, CA 94107
                </span>
              </li>
              <li className="flex items-center space-x-3 text-sm">
                <Mail className="h-5 w-5 text-muted-foreground" />
                <a href="mailto:contact@recovr.tech" className="text-muted-foreground hover:text-primary transition-colors">
                  contact@recovr.tech
                </a>
              </li>
              <li className="flex items-center space-x-3 text-sm">
                <Phone className="h-5 w-5 text-muted-foreground" />
                <a href="tel:+1-800-RECOVR" className="text-muted-foreground hover:text-primary transition-colors">
                  +1-800-RECOVR
                </a>
              </li>
            </ul>
          </div>
        </div>

        <div className="border-t py-6 flex flex-col sm:flex-row justify-between items-center">
          <p className="text-xs text-muted-foreground">
            © {currentYear} RECOVR Technologies. All rights reserved.
          </p>
          <div className="flex items-center space-x-4 mt-4 sm:mt-0">
            <Link href="/privacy" className="text-xs text-muted-foreground hover:text-primary transition-colors">
              Privacy
            </Link>
            <Link href="/terms" className="text-xs text-muted-foreground hover:text-primary transition-colors">
              Terms
            </Link>
            <Link href="/cookies" className="text-xs text-muted-foreground hover:text-primary transition-colors">
              Cookies
            </Link>
          </div>
        </div>
      </div>
    </footer>
  )
} 


===== FILE: ./components/hero-section.tsx =====
"use client"

import { useEffect, useRef } from "react"
import Link from "next/link"
import { ArrowRight, Search, Upload, Sparkles, ChevronDown, Globe, Shield, Clock, Wand2 } from "lucide-react"
import { GradientButton } from "@/components/ui/gradient-button"
import { Button } from "@/components/ui/button"
import Image from "next/image"

export function HeroSection() {
  return (
    <section className="relative overflow-hidden bg-gradient-to-b from-background to-muted/30 py-16 md:py-20 lg:py-24 w-full">
      {/* Enhanced decorative elements with subtler effects */}
      <div className="absolute inset-0 z-0 overflow-hidden">
        <div className="absolute top-[10%] -right-[15%] h-[600px] w-[600px] rounded-full bg-primary/5 blur-2xl animate-pulse-slow" />
        <div className="absolute -bottom-[30%] -left-[10%] h-[450px] w-[450px] rounded-full bg-accent/5 blur-2xl" />
        <div className="absolute top-[40%] left-[20%] h-[200px] w-[200px] rounded-full bg-secondary/5 blur-xl" />
        
        {/* Subtle grid pattern overlay for depth */}
        <div className="absolute inset-0 bg-grid-pattern opacity-[0.02]" />
        
        {/* Reduced number of particle dots for better performance */}
        <div className="hidden lg:block absolute top-[15%] left-[15%] h-1.5 w-1.5 rounded-full bg-primary/60 shadow-glow"></div>
        <div className="hidden lg:block absolute top-[35%] left-[65%] h-2 w-2 rounded-full bg-accent/60 shadow-glow"></div>
        <div className="hidden lg:block absolute top-[65%] left-[55%] h-1.5 w-1.5 rounded-full bg-secondary/60 shadow-glow"></div>
      </div>
      
      <div className="px-4 sm:px-6 lg:px-8 max-w-[1800px] mx-auto relative z-10">
        <div className="grid gap-8 lg:grid-cols-2 lg:gap-12 items-center">
          {/* Left column with text content */}
          <div className="flex flex-col space-y-6">
            <div className="inline-flex items-center gap-2 rounded-full border bg-background/90 backdrop-blur px-4 py-1.5 text-sm font-medium shadow-soft animate-fade-in max-w-max">
              <span className="flex h-5 w-5 items-center justify-center rounded-full bg-primary/20">
                <Sparkles className="h-3 w-3 text-primary" />
              </span>
              <span className="text-muted-foreground">
                AI-Powered Lost & Found System
              </span>
            </div>
            
            <div className="space-y-4 animate-slide-in-left">
              <h1 className="text-3xl font-bold tracking-tight sm:text-4xl xl:text-5xl/none">
                <span className="block">Lost Something?</span>
                <span className="block text-gradient dark:text-gradient-blue">Let's Recover It</span>
              </h1>
              <p className="max-w-[550px] text-muted-foreground text-base leading-relaxed md:text-lg">
                Using advanced AI vision technology to help you recover your lost belongings. Fast, reliable, and highly accurate.
              </p>
            </div>
            
            <div className="flex flex-col sm:flex-row gap-4 animate-slide-up" style={{animationDelay: "0.2s"}}>
              <Link href="/report">
                <GradientButton size="lg" variant="dark" className="w-full sm:w-auto text-base px-5 py-4 shadow-soft btn-3d">
                  Report Lost Item
                  <Upload className="ml-2 h-4 w-4" />
                </GradientButton>
              </Link>
              <Link href="/search">
                <Button size="lg" variant="outline" className="w-full sm:w-auto group text-base px-5 py-4 shadow-soft border-gradient dark:border-gray-600 dark:text-gray-100 dark:hover:bg-gray-800">
                  Search for Item
                  <Search className="ml-2 h-4 w-4 transition-transform group-hover:translate-x-1" />
                </Button>
              </Link>
            </div>
          </div>
          
          {/* Enhanced right column with interactive graphics */}
          <div className="relative mx-auto lg:ml-auto animate-slide-in-right">
            {/* Improved 3D effect background with subtle gradient */}
            <div className="absolute inset-0 -m-4 rounded-3xl bg-gradient-to-tr from-primary/5 via-transparent to-accent/5 blur-lg animate-pulse-slow">
              <div className="absolute inset-0 rounded-3xl bg-background/40 backdrop-blur-sm" />
            </div>

            {/* Main content card with improved aesthetics */}
            <div className="relative rounded-2xl overflow-hidden border shadow-lg glass-card max-w-[550px] mx-auto transform-gpu">
              {/* Mockup screen showing the application UI */}
              <div className="relative aspect-[4/3] transform-gpu">
                <div className="absolute inset-0 bg-gradient-to-b from-gray-900/30 via-transparent to-gray-900/30 z-10"></div>
                <Image
                  src="/hero-image.svg"
                  fill
                  alt="RECOVR AI Lost and Found System"
                  className="object-cover transform transition-transform duration-500 hover:scale-102"
                />
              
                {/* Floating elements that suggest AI functionality */}
                <div className="absolute top-6 right-6 h-16 w-24 rounded-lg glass-card p-2 shadow-md animate-float" style={{animationDelay: "0.5s"}}>
                  <div className="flex items-center gap-2">
                    <div className="flex h-6 w-6 items-center justify-center rounded-full bg-green-100">
                      <Shield className="h-3 w-3 text-green-600" />
                    </div>
                    <div>
                      <h4 className="text-xs font-medium text-gray-600">Recovery</h4>
                      <p className="text-sm font-bold text-gray-900">96.3%</p>
                    </div>
                  </div>
                </div>
                
                {/* AI recognition visualization */}
                <div className="absolute top-1/4 left-1/4 w-1/2 h-1/2 border-2 border-dashed border-white/30 rounded-lg flex items-center justify-center animate-pulse-slow">
                  <div className="h-10 w-10 rounded-full border-2 border-white/50 flex items-center justify-center">
                    <Wand2 className="h-5 w-5 text-white" />
                  </div>
                </div>
                
                <div className="absolute bottom-6 left-6 right-6 rounded-xl bg-background/80 backdrop-blur-md p-3 border shadow-lg">
                  <div className="flex items-center gap-3">
                    <div className="flex h-10 w-10 items-center justify-center rounded-full bg-gradient-to-br from-primary to-accent text-primary-foreground">
                      <Globe className="h-5 w-5" />
                    </div>
                    <div>
                      <h3 className="text-sm font-semibold">RECOVR Network</h3>
                      <p className="text-xs text-muted-foreground">
                        Fast, accurate item recognition and matching
                      </p>
                    </div>
                  </div>
                </div>
              </div>

              {/* Feature highlights below the image */}
              <div className="px-6 py-5 bg-background">
                <div className="flex justify-between items-center">
                  <div className="space-y-1">
                    <h3 className="text-sm font-medium">Match confidence</h3>
                    <div className="flex gap-1">
                      <div className="h-1 bg-primary rounded-full w-16"></div>
                      <div className="h-1 bg-primary/70 rounded-full w-6"></div>
                      <div className="h-1 bg-primary/40 rounded-full w-4"></div>
                      <div className="h-1 bg-primary/20 rounded-full w-3"></div>
                    </div>
                  </div>
                  <Button variant="outline" size="sm" className="text-xs px-3 h-8">
                    View Details
                    <ArrowRight className="ml-1 h-3 w-3" />
                  </Button>
                </div>
              </div>
            </div>
          </div>
        </div>

      </div>
      
      {/* Stylized scroll indicator with subtle bounce */}
      <div className="absolute bottom-5 left-1/2 transform -translate-x-1/2 animate-bounce hidden lg:block">
        <div className="w-10 h-16 flex flex-col items-center justify-center relative">
          <div className="w-px h-8 bg-gradient-to-b from-transparent to-muted-foreground/40 absolute top-0"></div>
          <div className="rounded-full border border-muted-foreground/40 h-6 w-6 flex items-center justify-center mt-7">
            <ChevronDown className="h-3 w-3 text-muted-foreground/70" />
          </div>
        </div>
      </div>
    </section>
  )
} 


===== FILE: ./components/how-it-works.tsx =====
"use client"

import { Camera, Search, Bell, ThumbsUp } from "lucide-react"
import Image from "next/image"

const steps = [
  {
    icon: <Camera className="h-6 w-6" />,
    title: "Report Your Lost Item",
    description: "Fill out a simple form with details about your lost item and upload a photo if available.",
    image: "/placeholder.svg",
  },
  {
    icon: <Search className="h-6 w-6" />,
    title: "AI-Powered Matching",
    description: "Our system uses advanced image recognition to match your lost item with found objects.",
    image: "/placeholder.svg",
  },
  {
    icon: <Bell className="h-6 w-6" />,
    title: "Get Notified",
    description: "Receive notifications when potential matches are found for your lost item.",
    image: "/placeholder.svg",
  },
  {
    icon: <ThumbsUp className="h-6 w-6" />,
    title: "Recover Your Item",
    description: "Connect with the finder and retrieve your lost item safely.",
    image: "/placeholder.svg",
  },
]

export function HowItWorks() {
  return (
    <section className="py-20 md:py-24 lg:py-28 overflow-hidden w-full">
      <div className="px-4 sm:px-6 lg:px-8 max-w-[1800px] mx-auto">
        <div className="flex flex-col items-center justify-center space-y-5 text-center md:max-w-3xl md:mx-auto mb-16">
          <div className="inline-flex items-center rounded-full border bg-background/50 px-3 py-1 text-sm font-semibold">
            <span className="text-primary">Simple Process</span>
          </div>
          <h2 className="text-3xl font-bold tracking-tighter sm:text-4xl md:text-5xl">How It Works</h2>
          <p className="max-w-[700px] text-muted-foreground text-base md:text-lg/relaxed">
            Our system makes finding lost items simple and efficient with a streamlined four-step process.
          </p>
        </div>
        
        <div className="relative">
          {/* Connection line */}
          <div className="absolute left-1/2 top-24 h-[calc(100%-6rem)] w-px -translate-x-1/2 bg-border md:block hidden"></div>
          
          <div className="space-y-20 md:space-y-28">
            {steps.map((step, index) => (
              <div 
                key={index} 
                className={`relative grid gap-10 md:grid-cols-2 md:gap-16 items-center ${
                  index % 2 === 1 ? "md:grid-flow-col-dense" : ""
                }`}
              >
                <div className={`flex flex-col space-y-4 ${index % 2 === 1 ? "md:items-end md:text-right" : ""}`}>
                  <div className="relative z-10 flex h-12 w-12 items-center justify-center rounded-full bg-primary text-primary-foreground shadow-md">
                    {step.icon}
                    <span className="absolute -right-2 -top-2 flex h-6 w-6 items-center justify-center rounded-full bg-background text-xs font-bold shadow">
                      {index + 1}
                    </span>
                  </div>
                  <h3 className="text-2xl font-bold">{step.title}</h3>
                  <p className="max-w-md text-muted-foreground">{step.description}</p>
                </div>
                
                <div className={`group relative overflow-hidden rounded-xl border bg-background p-1 shadow-lg transition-all hover:shadow-xl ${
                  index % 2 === 1 ? "md:order-first" : ""
                }`}>
                  <div className="absolute inset-0 bg-gradient-to-br from-primary/5 via-transparent to-accent/5"></div>
                  <Image
                    src={step.image}
                    alt={step.title}
                    width={600}
                    height={400}
                    className="w-full h-auto rounded-lg object-cover transition-transform duration-500 group-hover:scale-105"
                  />
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </section>
  )
} 


===== FILE: ./components/loading-indicator.tsx =====
"use client"

import { useState, useEffect } from "react"
import { usePathname, useSearchParams } from "next/navigation"

export function LoadingIndicator() {
  const [loading, setLoading] = useState(false)
  const pathname = usePathname()
  const searchParams = useSearchParams()

  useEffect(() => {
    const handleStart = () => {
      setLoading(true)
    }

    const handleComplete = () => {
      setTimeout(() => setLoading(false), 300)
    }
    
    // Create custom events for route change monitoring
    window.addEventListener("routeChangeStart", handleStart)
    window.addEventListener("routeChangeComplete", handleComplete)
    window.addEventListener("routeChangeError", handleComplete)

    // Next.js App Router doesn't expose route change events directly,
    // so we'll use a custom approach to detect navigation
    return () => {
      window.removeEventListener("routeChangeStart", handleStart)
      window.removeEventListener("routeChangeComplete", handleComplete)
      window.removeEventListener("routeChangeError", handleComplete)
    }
  }, [])
  
  // Reset loading state when path or search params change
  useEffect(() => {
    setLoading(false)
  }, [pathname, searchParams])
  
  // Listen for click events on links to preemptively show loading
  useEffect(() => {
    const handleLinkClick = (e: MouseEvent) => {
      const target = e.target as Element
      const link = target.closest('a')
      if (link && link.href && link.href.startsWith(window.location.origin)) {
        setLoading(true)
        // Dispatch custom event for route change start
        window.dispatchEvent(new Event("routeChangeStart"))
      }
    }
    
    document.addEventListener('click', handleLinkClick)
    return () => document.removeEventListener('click', handleLinkClick)
  }, [])

  if (!loading) return null

  return (
    <div className="fixed top-0 left-0 right-0 h-1 z-50 animate-loadingBar"></div>
  )
} 


===== FILE: ./components/map-viewer.tsx =====
"use client"

import { useState, useEffect } from 'react'
import dynamic from 'next/dynamic'

// Object type that matches our map data
interface MapObject {
  id: number
  name: string
  location: string
  date: string
  image: string
  category: string
  coordinates: {
    lat: number
    lng: number
    x?: number
    y?: number
  }
}

// Dynamically import the Map component to avoid SSR issues
const MapWithNoSSRComponent = dynamic(
  () => import('./map-with-no-ssr'),
  { 
    ssr: false,
    loading: () => (
      <div className="w-full h-[600px] flex items-center justify-center bg-muted">
        <p>Loading map resources...</p>
      </div>
    )
  }
)

// This component will only be rendered on the client side
const MapViewer = ({ objects }: { objects: MapObject[] }) => {
  // No need for state to manage keys, as we've fixed the underlying issue
  return (
    <div className="w-full h-full">
      <MapWithNoSSRComponent objects={objects} />
    </div>
  )
}

export default MapViewer 


===== FILE: ./components/map-with-no-ssr.tsx =====
"use client"

import React, { useEffect, useRef, useState } from 'react'
import L from 'leaflet'
import 'leaflet/dist/leaflet.css'
import { Button } from '@/components/ui/button'

// Fix the default icon issue
delete (L.Icon.Default.prototype as any)._getIconUrl
L.Icon.Default.mergeOptions({
  iconUrl: '/marker-icon.png',
  iconRetinaUrl: '/marker-icon-2x.png',
  shadowUrl: '/marker-shadow.png',
})

// Object type that matches our map data
interface MapObject {
  id: number
  name: string
  location: string
  date: string
  image: string
  category: string
  coordinates: {
    lat: number
    lng: number
    x?: number
    y?: number
  }
}

export interface MapWithNoSSRProps {
  objects: MapObject[]
}

const MapWithNoSSR = ({ objects }: MapWithNoSSRProps) => {
  const mapRef = useRef<L.Map | null>(null);
  const mapContainerRef = useRef<HTMLDivElement>(null);
  const [mapId] = useState(() => `map-${Math.random().toString(36).substring(2, 9)}`);
  const [isMapInitialized, setIsMapInitialized] = useState(false);

  // Initialize map once component is mounted
  useEffect(() => {
    // Safety check - if already initialized, clean up first
    if (mapRef.current) {
      mapRef.current.remove();
      mapRef.current = null;
      setIsMapInitialized(false);
    }

    // Only initialize if the container is available
    if (!mapContainerRef.current || isMapInitialized) return;

    try {
      // Create the map instance
      const map = L.map(mapContainerRef.current, {
        center: [40.7128, -74.006],
        zoom: 15,
        scrollWheelZoom: false
      });

      // Add the tile layer
      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
      }).addTo(map);

      // Add markers
      objects.forEach((obj) => {
        const marker = L.marker([obj.coordinates.lat, obj.coordinates.lng])
          .addTo(map)
          .bindPopup(`
            <div class="flex flex-col items-center">
              <img 
                src="${obj.image}" 
                alt="${obj.name}"
                class="w-16 h-16 object-cover my-2 rounded" 
              />
              <h4 class="font-medium">${obj.name}</h4>
              <div class="text-xs text-muted-foreground">${obj.location}</div>
              <div class="text-xs text-muted-foreground">${obj.date}</div>
              <button class="mt-2 px-2 py-1 bg-blue-600 text-white text-xs rounded">View Details</button>
            </div>
          `);
      });

      // Save the map instance to ref
      mapRef.current = map;
      setIsMapInitialized(true);
    } catch (error) {
      console.error("Error initializing map:", error);
    }

    // Clean up on unmount
    return () => {
      if (mapRef.current) {
        mapRef.current.remove();
        mapRef.current = null;
        setIsMapInitialized(false);
      }
    };
  }, [objects, mapId]);

  return (
    <div className="w-full h-full">
      <div 
        id={mapId}
        ref={mapContainerRef} 
        className="h-[600px] w-full" 
        style={{ height: "600px", width: "100%" }}
      />
    </div>
  );
}

export default MapWithNoSSR 


===== FILE: ./components/navbar.tsx =====
"use client"

import Link from "next/link"
import Image from "next/image"
import { Button } from "@/components/ui/button"
import { GradientButton } from "@/components/ui/gradient-button"
import { Sheet, SheetContent, SheetTrigger } from "@/components/ui/sheet"
import { Menu, Search, MapPin } from "lucide-react"
import { ThemeToggle } from "@/components/theme-toggle"
import { cn } from "@/lib/utils"
import { usePathname } from "next/navigation"
import { NotificationDropdown } from "@/components/ui/notification-dropdown"

const mainNavItems = [
  { title: "Home", href: "/" },
  { title: "Lost Items", href: "/lost-objects" },
  { title: "Report Item", href: "/report" },
  { title: "Find Item", href: "/search", className: "dark:text-white dark:font-bold dark:hover:text-primary-300" },
  { title: "Map", href: "/map" },
]

export function MainNav() {
  const pathname = usePathname()

  return (
    <div className="mr-4 hidden md:flex">
      <nav className="flex items-center gap-8 text-base">
        {mainNavItems.map((item, index) => (
          <Link
            key={index}
            href={item.href}
            className={cn(
              "transition-colors hover:text-primary py-2 relative group dark:hover:text-primary link-hover",
              pathname === item.href 
                ? "text-primary font-medium active-nav-item" 
                : "text-muted-foreground dark:text-gray-300",
              item.className
            )}
          >
            {item.title}
            <span className={cn(
              "absolute bottom-0 left-0 w-full h-0.5 bg-primary transform origin-left transition-transform duration-300", 
              pathname === item.href ? "scale-x-100" : "scale-x-0 group-hover:scale-x-100"
            )}></span>
          </Link>
        ))}
      </nav>
    </div>
  )
}

export function MobileNav() {
  const pathname = usePathname()

  return (
    <Sheet>
      <SheetTrigger asChild>
        <Button variant="ghost" className="px-2 md:hidden dark:text-gray-300">
          <Menu className="h-6 w-6" />
          <span className="sr-only">Toggle menu</span>
        </Button>
      </SheetTrigger>
      <SheetContent side="left" className="pr-0 sm:max-w-xs bg-background/95 backdrop-blur-xl">
        <Link href="/" className="flex items-center gap-2 px-2 mb-8">
          <Image src="/logo.svg" width={140} height={50} alt="RECOVR Logo" className="dark:filter dark:brightness-110" />
        </Link>
        <div className="my-6 flex flex-col gap-2">
          {mainNavItems.map((item, index) => (
            <Link
              key={index}
              href={item.href}
              className={cn(
                "flex w-full items-center py-3 px-4 text-base font-medium transition-all rounded-md link-hover",
                pathname === item.href
                  ? "font-medium text-primary bg-primary/5 active-nav-item"
                  : "text-muted-foreground hover:bg-muted dark:text-gray-200 dark:hover:text-primary",
                item.className
              )}
            >
              {item.title}
            </Link>
          ))}
        </div>
        <div className="mt-auto pt-4 border-t space-y-4 px-2">
          <Button className="w-full hover:text-white dark:text-gray-300 dark:hover:text-white" variant="outline" asChild>
            <Link href="/auth/signin">Log in</Link>
          </Button>
          <GradientButton variant="dark" className="w-full" asChild>
            <Link href="/auth/register">Sign up</Link>
          </GradientButton>
        </div>
      </SheetContent>
    </Sheet>
  )
}

export function Navbar({ className }: { className?: string }) {
  return (
    <header className={cn("sticky top-0 z-40 w-full border-b bg-background/95 backdrop-blur-xl supports-[backdrop-filter]:bg-background/60", className)}>
      <div className="max-w-[1800px] mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex h-20 items-center justify-between">
          <div className="flex items-center">
            <MobileNav />
            <Link href="/" className="flex items-center gap-2 mr-10 relative group">
              <div className="absolute -inset-2 rounded-xl bg-background opacity-0 group-hover:opacity-100 transition-opacity"></div>
              <Image 
                src="/logo.svg" 
                width={140} 
                height={50} 
                alt="RECOVR Logo" 
                priority 
                className="h-10 w-auto relative dark:filter dark:brightness-110" 
              />
            </Link>
            <MainNav />
          </div>
          <div className="flex items-center gap-3">
            <Button variant="ghost" size="icon" className="text-muted-foreground hidden sm:flex hover:bg-muted dark:text-gray-300 dark:hover:bg-gray-800">
              <Search className="h-5 w-5" />
              <span className="sr-only">Search</span>
            </Button>
            <Button variant="ghost" size="icon" className="text-muted-foreground hidden sm:flex hover:bg-muted dark:text-gray-300 dark:hover:bg-gray-800">
              <MapPin className="h-5 w-5" />
              <span className="sr-only">Map</span>
            </Button>
            <NotificationDropdown className="mr-2 hidden sm:flex" />
            <ThemeToggle />
            <div className="hidden md:flex md:gap-3 ml-2">
              <Button variant="outline" size="sm" className="h-10 px-4 hover:text-white dark:text-gray-300" asChild>
                <Link href="/auth/signin">Log in</Link>
              </Button>
              <GradientButton variant="dark" size="sm" className="h-10 px-4" asChild>
                <Link href="/auth/register">Sign up</Link>
              </GradientButton>
            </div>
          </div>
        </div>
      </div>
    </header>
  )
} 


===== FILE: ./components/page-container.tsx =====
import React from "react"
import { cn } from "@/lib/utils"

interface PageContainerProps {
  children: React.ReactNode
  className?: string
  maxWidth?: "sm" | "md" | "lg" | "xl" | "2xl" | "none"
}

/**
 * Consistent page container for all application pages
 * Ensures consistent centering, width and padding
 */
export function PageContainer({
  children,
  className,
  maxWidth = "none",
}: PageContainerProps) {
  
  const maxWidthClass = {
    sm: "max-w-screen-sm",
    md: "max-w-screen-md",
    lg: "max-w-screen-lg",
    xl: "max-w-screen-xl",
    "2xl": "max-w-screen-2xl",
    "none": "max-w-[1800px]", // Same as layout default
  }[maxWidth]
  
  return (
    <div className={cn(
      "w-full mx-auto px-4 sm:px-6 lg:px-8 py-6",
      maxWidthClass,
      className
    )}>
      {children}
    </div>
  )
} 


===== FILE: ./components/page-transition.tsx =====
"use client"

import { usePathname } from 'next/navigation'
import { useEffect, useState, ReactNode } from 'react'

interface PageTransitionProps {
  children: ReactNode
}

export function PageTransition({ children }: PageTransitionProps) {
  const pathname = usePathname()
  const [isTransitioning, setIsTransitioning] = useState(false)
  const [displayChildren, setDisplayChildren] = useState(children)
  
  useEffect(() => {
    // Only trigger transition when path changes
    if (pathname) {
      setIsTransitioning(true)
      
      // IMPORTANT: Must wait for new page content to be ready BEFORE transitioning
      // This helps prevent layout shifts and flickering
      const timer = setTimeout(() => {
        setDisplayChildren(children)
        
        // Small delay after children are updated to allow render to complete
        requestAnimationFrame(() => {
          requestAnimationFrame(() => {
            setIsTransitioning(false)
          })
        })
      }, 10)
      
      return () => clearTimeout(timer)
    }
  }, [pathname, children])
  
  return (
    <div
      className={`page-transition w-full transform-gpu ${isTransitioning ? 'opacity-0' : 'opacity-100'}`}
      style={{
        transition: isTransitioning ? 'none' : 'opacity 0.3s ease-in-out',
      }}
    >
      {displayChildren}
    </div>
  )
} 


===== FILE: ./components/scroll-animations.tsx =====
"use client"

import { useEffect, useRef, ReactNode } from 'react'

type AnimationType = 'fade-in' | 'slide-up' | 'slide-left' | 'slide-right' | 'zoom-in' | 'bounce'

interface ScrollRevealProps {
  children: ReactNode
  animation?: AnimationType
  delay?: number
  threshold?: number
  className?: string
  once?: boolean
}

export function ScrollReveal({
  children,
  animation = 'fade-in',
  delay = 0,
  threshold = 0.1,
  className = '',
  once = true,
}: ScrollRevealProps) {
  const ref = useRef<HTMLDivElement>(null)
  const enteredRef = useRef(false)

  useEffect(() => {
    const currentRef = ref.current
    if (!currentRef) return

    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            if (once && enteredRef.current) return
            
            enteredRef.current = true
            setTimeout(() => {
              currentRef.classList.add('visible')
            }, delay)
            
            if (once) observer.unobserve(currentRef)
          } else if (!once) {
            enteredRef.current = false
            currentRef.classList.remove('visible')
          }
        })
      },
      { threshold }
    )

    observer.observe(currentRef)

    return () => {
      if (currentRef) observer.unobserve(currentRef)
    }
  }, [delay, threshold, once])

  const getAnimationClass = () => {
    switch (animation) {
      case 'fade-in': return 'scroll-fade-in'
      case 'slide-up': return 'scroll-slide-up'
      case 'slide-left': return 'scroll-slide-left'
      case 'slide-right': return 'scroll-slide-right'
      case 'zoom-in': return 'scroll-zoom-in'
      case 'bounce': return 'scroll-bounce'
      default: return 'scroll-fade-in'
    }
  }

  return (
    <div 
      ref={ref} 
      className={`${getAnimationClass()} ${className}`}
      style={{ 
        opacity: 0,
        transition: `transform 0.8s ease, opacity 0.8s ease`,
        transitionDelay: `${delay}ms`,
        willChange: 'transform, opacity'
      }}
    >
      {children}
    </div>
  )
}

export function ParallaxSection({ 
  children,
  speed = 0.2,
  className = ''
}: { 
  children: ReactNode
  speed?: number
  className?: string
}) {
  const ref = useRef<HTMLDivElement>(null)
  
  useEffect(() => {
    const handleScroll = () => {
      if (!ref.current) return
      
      const scrollY = window.scrollY
      const elementTop = ref.current.offsetTop
      const viewport = window.innerHeight
      
      // Only apply parallax when element is visible
      if (scrollY + viewport > elementTop && scrollY < elementTop + ref.current.offsetHeight) {
        const offset = (scrollY - elementTop) * speed
        ref.current.style.transform = `translateY(${offset}px)`
      }
    }
    
    window.addEventListener('scroll', handleScroll, { passive: true })
    return () => window.removeEventListener('scroll', handleScroll)
  }, [speed])
  
  return (
    <div ref={ref} className={className}>
      {children}
    </div>
  )
}

// Smooth scrolling utility
export function enableSmoothScroll() {
  useEffect(() => {
    // Add smooth scrolling to all links
    const handleLinkClick = (e: MouseEvent) => {
      const target = e.target as HTMLElement
      const link = target.closest('a')
      
      if (!link) return
      const href = link.getAttribute('href')
      
      if (href?.startsWith('#') && href.length > 1) {
        e.preventDefault()
        const targetElement = document.querySelector(href)
        
        if (targetElement) {
          targetElement.scrollIntoView({
            behavior: 'smooth',
            block: 'start'
          })
        }
      }
    }
    
    document.addEventListener('click', handleLinkClick)
    return () => document.removeEventListener('click', handleLinkClick)
  }, [])
  
  return null
} 


===== FILE: ./components/scroll-performance.tsx =====
"use client"

import { useEffect } from 'react'

export function ScrollPerformanceOptimizer() {
  useEffect(() => {
    // Add a class to body during scroll to optimize rendering
    let scrollTimeout: NodeJS.Timeout
    const scrollHandler = () => {
      document.body.classList.add('is-scrolling')
      
      clearTimeout(scrollTimeout)
      scrollTimeout = setTimeout(() => {
        document.body.classList.remove('is-scrolling')
      }, 100)
    }
    
    // Using passive event listener for better scroll performance
    window.addEventListener('scroll', scrollHandler, { passive: true })
    
    // Other browser optimizations
    if ('requestIdleCallback' in window) {
      // Force browsers to use compositor-only animations
      window.requestIdleCallback(() => {
        const allAnimatedElements = document.querySelectorAll('.animate-fade-in, .animate-slide-up, .animate-slide-in-right, .animate-slide-in-left')
        allAnimatedElements.forEach(el => {
          if (el instanceof HTMLElement) {
            el.style.willChange = 'transform, opacity'
            el.style.transform = 'translateZ(0)'
          }
        })
      })
    }
    
    // Clean up
    return () => {
      window.removeEventListener('scroll', scrollHandler)
      clearTimeout(scrollTimeout)
    }
  }, [])
  
  return null
} 


===== FILE: ./components/session-provider.tsx =====
"use client"

import { SessionProvider as NextAuthSessionProvider } from "next-auth/react"
import type { Session } from "next-auth"
import React from "react"

export function SessionProvider({ 
  children,
  session
}: { 
  children: React.ReactNode,
  session?: Session | null
}) {
  return <NextAuthSessionProvider session={session}>{children}</NextAuthSessionProvider>
} 


===== FILE: ./components/stats.tsx =====
import { Users, Map, Search, ThumbsUp } from "lucide-react"

const stats = [
  {
    icon: <Users className="h-5 w-5" />,
    value: "10K+",
    label: "Active Users",
  },
  {
    icon: <Map className="h-5 w-5" />,
    value: "250+",
    label: "Locations",
  },
  {
    icon: <Search className="h-5 w-5" />,
    value: "15K+",
    label: "Items Found",
  },
  {
    icon: <ThumbsUp className="h-5 w-5" />,
    value: "95%",
    label: "Success Rate",
  },
]

export function Stats() {
  return (
    <section className="border-y py-12 bg-muted/20">
      <div className="container">
        <div className="grid grid-cols-2 gap-8 md:grid-cols-4">
          {stats.map((stat, index) => (
            <div
              key={index}
              className="flex flex-col items-center justify-center text-center"
            >
              <div className="mb-4 flex h-14 w-14 items-center justify-center rounded-full bg-primary/10">
                <div className="text-primary">{stat.icon}</div>
              </div>
              <h3 className="text-3xl font-bold">{stat.value}</h3>
              <p className="text-sm text-muted-foreground">{stat.label}</p>
            </div>
          ))}
        </div>
      </div>
    </section>
  )
} 


===== FILE: ./components/testimonials.tsx =====
"use client"

import Image from "next/image"
import { cn } from "@/lib/utils"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"

const testimonials = [
  {
    content: "I lost my laptop in the campus library and was devastated. The RECOVR system helped me locate it within hours! The image matching technology is incredibly accurate.",
    author: { name: "Alex Johnson", role: "Student", avatarSrc: "/user-1.jpg" }
  },
  {
    content: "Lost my phone at a conference. I reported it on RECOVR and within a day, someone had found it and uploaded it to the system. The notification feature is fantastic!",
    author: { name: "Sarah Chen", role: "Software Engineer", avatarSrc: "/user-2.jpg" }
  },
  {
    content: "As someone who's constantly traveling for work, I'm prone to losing things. RECOVR has saved me multiple times by helping me recover my items quickly and efficiently.",
    author: { name: "Michael Rodriguez", role: "Business Consultant", avatarSrc: "/user-3.jpg" }
  },
  {
    content: "I use RECOVR to manage lost items in my classroom. The system is so intuitive that even my students can use it to report and find their lost belongings.",
    author: { name: "Emily Watson", role: "Teacher", avatarSrc: "/user-4.jpg" }
  }
]

export function Testimonials() {
  return (
    <section className="py-20 md:py-24 lg:py-28 bg-gradient-to-b from-background to-muted/25">
      <div className="container">
        <div className="flex flex-col items-center justify-center space-y-4 text-center md:mx-auto md:max-w-3xl">
          <div className="inline-flex items-center rounded-full border bg-background/50 px-3 py-1 text-sm font-semibold">
            <span className="text-primary">User Experiences</span>
          </div>
          <h2 className="text-3xl font-bold tracking-tighter sm:text-4xl md:text-5xl">What Our Users Say</h2>
          <p className="max-w-[700px] text-muted-foreground md:text-lg/relaxed">
            Thousands of people have successfully recovered their lost items using our system. Here are some of their stories.
          </p>
        </div>

        <div className="mx-auto grid max-w-6xl gap-6 py-14 md:grid-cols-2 lg:grid-cols-2">
          {testimonials.map((testimonial, index) => (
            <div 
              key={index} 
              className={cn(
                "relative flex flex-col gap-4 rounded-xl border bg-background p-6 shadow transition-shadow hover:shadow-md",
                index === 0 ? "md:col-span-2 lg:col-span-1 lg:row-span-2" : ""
              )}
            >
              <div className="flex items-center gap-4">
                <div className="h-12 w-12 overflow-hidden rounded-full">
                  <Image
                    src={testimonial.author.avatarSrc}
                    alt={testimonial.author.name}
                    width={48}
                    height={48}
                    className="h-full w-full object-cover"
                    onError={(e) => {
                      e.currentTarget.src = "/placeholder-user.jpg";
                    }}
                  />
                </div>
                <div>
                  <h4 className="font-semibold">{testimonial.author.name}</h4>
                  <p className="text-sm text-muted-foreground">{testimonial.author.role}</p>
                </div>
              </div>
              <blockquote className="text-pretty text-muted-foreground">
                "{testimonial.content}"
              </blockquote>
              <div className="flex text-primary">
                {[1, 2, 3, 4, 5].map((star) => (
                  <svg
                    key={star}
                    className="h-4 w-4 fill-current"
                    xmlns="http://www.w3.org/2000/svg"
                    viewBox="0 0 24 24"
                  >
                    <path d="M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z" />
                  </svg>
                ))}
              </div>
            </div>
          ))}
        </div>
      </div>
    </section>
  )
} 


===== FILE: ./components/theme-provider.tsx =====
"use client"

import { ThemeProvider as NextThemesProvider } from "next-themes"
import { type ThemeProviderProps } from "next-themes"

export function ThemeProvider({ children, ...props }: ThemeProviderProps) {
  return <NextThemesProvider {...props}>{children}</NextThemesProvider>
}



===== FILE: ./components/theme-toggle.tsx =====
"use client"

import * as React from "react"
import { Moon, Sun } from "lucide-react"
import { useTheme } from "next-themes"

import { Button } from "@/components/ui/button"
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"

export function ThemeToggle() {
  const { setTheme, theme } = useTheme()

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="ghost" size="icon">
          <Sun className="h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0" />
          <Moon className="absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100" />
          <span className="sr-only">Toggle theme</span>
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end">
        <DropdownMenuItem onClick={() => setTheme("light")}>
          Light
        </DropdownMenuItem>
        <DropdownMenuItem onClick={() => setTheme("dark")}>
          Dark
        </DropdownMenuItem>
        <DropdownMenuItem onClick={() => setTheme("system")}>
          System
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  )
} 


===== FILE: ./components/ui/accordion.tsx =====
"use client"

import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
))

AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }



===== FILE: ./components/ui/alert-dialog.tsx =====
"use client"

import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}



===== FILE: ./components/ui/alert.tsx =====
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }



===== FILE: ./components/ui/aspect-ratio.tsx =====
"use client"

import * as AspectRatioPrimitive from "@radix-ui/react-aspect-ratio"

const AspectRatio = AspectRatioPrimitive.Root

export { AspectRatio }



===== FILE: ./components/ui/avatar.tsx =====
"use client"

import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }



===== FILE: ./components/ui/badge.tsx =====
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }



===== FILE: ./components/ui/breadcrumb.tsx =====
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"

const Breadcrumb = React.forwardRef<
  HTMLElement,
  React.ComponentPropsWithoutRef<"nav"> & {
    separator?: React.ReactNode
  }
>(({ ...props }, ref) => <nav ref={ref} aria-label="breadcrumb" {...props} />)
Breadcrumb.displayName = "Breadcrumb"

const BreadcrumbList = React.forwardRef<
  HTMLOListElement,
  React.ComponentPropsWithoutRef<"ol">
>(({ className, ...props }, ref) => (
  <ol
    ref={ref}
    className={cn(
      "flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5",
      className
    )}
    {...props}
  />
))
BreadcrumbList.displayName = "BreadcrumbList"

const BreadcrumbItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentPropsWithoutRef<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    className={cn("inline-flex items-center gap-1.5", className)}
    {...props}
  />
))
BreadcrumbItem.displayName = "BreadcrumbItem"

const BreadcrumbLink = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentPropsWithoutRef<"a"> & {
    asChild?: boolean
  }
>(({ asChild, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      className={cn("transition-colors hover:text-foreground", className)}
      {...props}
    />
  )
})
BreadcrumbLink.displayName = "BreadcrumbLink"

const BreadcrumbPage = React.forwardRef<
  HTMLSpanElement,
  React.ComponentPropsWithoutRef<"span">
>(({ className, ...props }, ref) => (
  <span
    ref={ref}
    role="link"
    aria-disabled="true"
    aria-current="page"
    className={cn("font-normal text-foreground", className)}
    {...props}
  />
))
BreadcrumbPage.displayName = "BreadcrumbPage"

const BreadcrumbSeparator = ({
  children,
  className,
  ...props
}: React.ComponentProps<"li">) => (
  <li
    role="presentation"
    aria-hidden="true"
    className={cn("[&>svg]:w-3.5 [&>svg]:h-3.5", className)}
    {...props}
  >
    {children ?? <ChevronRight />}
  </li>
)
BreadcrumbSeparator.displayName = "BreadcrumbSeparator"

const BreadcrumbEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    role="presentation"
    aria-hidden="true"
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More</span>
  </span>
)
BreadcrumbEllipsis.displayName = "BreadcrumbElipssis"

export {
  Breadcrumb,
  BreadcrumbList,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbPage,
  BreadcrumbSeparator,
  BreadcrumbEllipsis,
}



===== FILE: ./components/ui/button.tsx =====
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }



===== FILE: ./components/ui/calendar.tsx =====
"use client"

import * as React from "react"
import { ChevronLeft, ChevronRight } from "lucide-react"
import { DayPicker } from "react-day-picker"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

export type CalendarProps = React.ComponentProps<typeof DayPicker>

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}: CalendarProps) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
        month: "space-y-4",
        caption: "flex justify-center pt-1 relative items-center",
        caption_label: "text-sm font-medium",
        nav: "space-x-1 flex items-center",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100"
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-y-1",
        head_row: "flex",
        head_cell:
          "text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: "h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20",
        day: cn(
          buttonVariants({ variant: "ghost" }),
          "h-9 w-9 p-0 font-normal aria-selected:opacity-100"
        ),
        day_range_end: "day-range-end",
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside:
          "day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle:
          "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: ({ ...props }) => <ChevronLeft className="h-4 w-4" />,
        IconRight: ({ ...props }) => <ChevronRight className="h-4 w-4" />,
      }}
      {...props}
    />
  )
}
Calendar.displayName = "Calendar"

export { Calendar }



===== FILE: ./components/ui/card.tsx =====
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }



===== FILE: ./components/ui/carousel.tsx =====
"use client"

import * as React from "react"
import useEmblaCarousel, {
  type UseEmblaCarouselType,
} from "embla-carousel-react"
import { ArrowLeft, ArrowRight } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"

type CarouselApi = UseEmblaCarouselType[1]
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>
type CarouselOptions = UseCarouselParameters[0]
type CarouselPlugin = UseCarouselParameters[1]

type CarouselProps = {
  opts?: CarouselOptions
  plugins?: CarouselPlugin
  orientation?: "horizontal" | "vertical"
  setApi?: (api: CarouselApi) => void
}

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0]
  api: ReturnType<typeof useEmblaCarousel>[1]
  scrollPrev: () => void
  scrollNext: () => void
  canScrollPrev: boolean
  canScrollNext: boolean
} & CarouselProps

const CarouselContext = React.createContext<CarouselContextProps | null>(null)

function useCarousel() {
  const context = React.useContext(CarouselContext)

  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />")
  }

  return context
}

const Carousel = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & CarouselProps
>(
  (
    {
      orientation = "horizontal",
      opts,
      setApi,
      plugins,
      className,
      children,
      ...props
    },
    ref
  ) => {
    const [carouselRef, api] = useEmblaCarousel(
      {
        ...opts,
        axis: orientation === "horizontal" ? "x" : "y",
      },
      plugins
    )
    const [canScrollPrev, setCanScrollPrev] = React.useState(false)
    const [canScrollNext, setCanScrollNext] = React.useState(false)

    const onSelect = React.useCallback((api: CarouselApi) => {
      if (!api) {
        return
      }

      setCanScrollPrev(api.canScrollPrev())
      setCanScrollNext(api.canScrollNext())
    }, [])

    const scrollPrev = React.useCallback(() => {
      api?.scrollPrev()
    }, [api])

    const scrollNext = React.useCallback(() => {
      api?.scrollNext()
    }, [api])

    const handleKeyDown = React.useCallback(
      (event: React.KeyboardEvent<HTMLDivElement>) => {
        if (event.key === "ArrowLeft") {
          event.preventDefault()
          scrollPrev()
        } else if (event.key === "ArrowRight") {
          event.preventDefault()
          scrollNext()
        }
      },
      [scrollPrev, scrollNext]
    )

    React.useEffect(() => {
      if (!api || !setApi) {
        return
      }

      setApi(api)
    }, [api, setApi])

    React.useEffect(() => {
      if (!api) {
        return
      }

      onSelect(api)
      api.on("reInit", onSelect)
      api.on("select", onSelect)

      return () => {
        api?.off("select", onSelect)
      }
    }, [api, onSelect])

    return (
      <CarouselContext.Provider
        value={{
          carouselRef,
          api: api,
          opts,
          orientation:
            orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
          scrollPrev,
          scrollNext,
          canScrollPrev,
          canScrollNext,
        }}
      >
        <div
          ref={ref}
          onKeyDownCapture={handleKeyDown}
          className={cn("relative", className)}
          role="region"
          aria-roledescription="carousel"
          {...props}
        >
          {children}
        </div>
      </CarouselContext.Provider>
    )
  }
)
Carousel.displayName = "Carousel"

const CarouselContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { carouselRef, orientation } = useCarousel()

  return (
    <div ref={carouselRef} className="overflow-hidden">
      <div
        ref={ref}
        className={cn(
          "flex",
          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
          className
        )}
        {...props}
      />
    </div>
  )
})
CarouselContent.displayName = "CarouselContent"

const CarouselItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { orientation } = useCarousel()

  return (
    <div
      ref={ref}
      role="group"
      aria-roledescription="slide"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className
      )}
      {...props}
    />
  )
})
CarouselItem.displayName = "CarouselItem"

const CarouselPrevious = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute  h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-left-12 top-1/2 -translate-y-1/2"
          : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeft className="h-4 w-4" />
      <span className="sr-only">Previous slide</span>
    </Button>
  )
})
CarouselPrevious.displayName = "CarouselPrevious"

const CarouselNext = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollNext, canScrollNext } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-right-12 top-1/2 -translate-y-1/2"
          : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRight className="h-4 w-4" />
      <span className="sr-only">Next slide</span>
    </Button>
  )
})
CarouselNext.displayName = "CarouselNext"

export {
  type CarouselApi,
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
}



===== FILE: ./components/ui/chart.tsx =====
"use client"

import * as React from "react"
import * as RechartsPrimitive from "recharts"

import { cn } from "@/lib/utils"

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = { light: "", dark: ".dark" } as const

export type ChartConfig = {
  [k in string]: {
    label?: React.ReactNode
    icon?: React.ComponentType
  } & (
    | { color?: string; theme?: never }
    | { color?: never; theme: Record<keyof typeof THEMES, string> }
  )
}

type ChartContextProps = {
  config: ChartConfig
}

const ChartContext = React.createContext<ChartContextProps | null>(null)

function useChart() {
  const context = React.useContext(ChartContext)

  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />")
  }

  return context
}

const ChartContainer = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    config: ChartConfig
    children: React.ComponentProps<
      typeof RechartsPrimitive.ResponsiveContainer
    >["children"]
  }
>(({ id, className, children, config, ...props }, ref) => {
  const uniqueId = React.useId()
  const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`

  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-chart={chartId}
        ref={ref}
        className={cn(
          "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
          className
        )}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>
          {children}
        </RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  )
})
ChartContainer.displayName = "Chart"

const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
  const colorConfig = Object.entries(config).filter(
    ([_, config]) => config.theme || config.color
  )

  if (!colorConfig.length) {
    return null
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color =
      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
      itemConfig.color
    return color ? `  --color-${key}: ${color};` : null
  })
  .join("\n")}
}
`
          )
          .join("\n"),
      }}
    />
  )
}

const ChartTooltip = RechartsPrimitive.Tooltip

const ChartTooltipContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &
    React.ComponentProps<"div"> & {
      hideLabel?: boolean
      hideIndicator?: boolean
      indicator?: "line" | "dot" | "dashed"
      nameKey?: string
      labelKey?: string
    }
>(
  (
    {
      active,
      payload,
      className,
      indicator = "dot",
      hideLabel = false,
      hideIndicator = false,
      label,
      labelFormatter,
      labelClassName,
      formatter,
      color,
      nameKey,
      labelKey,
    },
    ref
  ) => {
    const { config } = useChart()

    const tooltipLabel = React.useMemo(() => {
      if (hideLabel || !payload?.length) {
        return null
      }

      const [item] = payload
      const key = `${labelKey || item.dataKey || item.name || "value"}`
      const itemConfig = getPayloadConfigFromPayload(config, item, key)
      const value =
        !labelKey && typeof label === "string"
          ? config[label as keyof typeof config]?.label || label
          : itemConfig?.label

      if (labelFormatter) {
        return (
          <div className={cn("font-medium", labelClassName)}>
            {labelFormatter(value, payload)}
          </div>
        )
      }

      if (!value) {
        return null
      }

      return <div className={cn("font-medium", labelClassName)}>{value}</div>
    }, [
      label,
      labelFormatter,
      payload,
      hideLabel,
      labelClassName,
      config,
      labelKey,
    ])

    if (!active || !payload?.length) {
      return null
    }

    const nestLabel = payload.length === 1 && indicator !== "dot"

    return (
      <div
        ref={ref}
        className={cn(
          "grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl",
          className
        )}
      >
        {!nestLabel ? tooltipLabel : null}
        <div className="grid gap-1.5">
          {payload.map((item, index) => {
            const key = `${nameKey || item.name || item.dataKey || "value"}`
            const itemConfig = getPayloadConfigFromPayload(config, item, key)
            const indicatorColor = color || item.payload.fill || item.color

            return (
              <div
                key={item.dataKey}
                className={cn(
                  "flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground",
                  indicator === "dot" && "items-center"
                )}
              >
                {formatter && item?.value !== undefined && item.name ? (
                  formatter(item.value, item.name, item, index, item.payload)
                ) : (
                  <>
                    {itemConfig?.icon ? (
                      <itemConfig.icon />
                    ) : (
                      !hideIndicator && (
                        <div
                          className={cn(
                            "shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]",
                            {
                              "h-2.5 w-2.5": indicator === "dot",
                              "w-1": indicator === "line",
                              "w-0 border-[1.5px] border-dashed bg-transparent":
                                indicator === "dashed",
                              "my-0.5": nestLabel && indicator === "dashed",
                            }
                          )}
                          style={
                            {
                              "--color-bg": indicatorColor,
                              "--color-border": indicatorColor,
                            } as React.CSSProperties
                          }
                        />
                      )
                    )}
                    <div
                      className={cn(
                        "flex flex-1 justify-between leading-none",
                        nestLabel ? "items-end" : "items-center"
                      )}
                    >
                      <div className="grid gap-1.5">
                        {nestLabel ? tooltipLabel : null}
                        <span className="text-muted-foreground">
                          {itemConfig?.label || item.name}
                        </span>
                      </div>
                      {item.value && (
                        <span className="font-mono font-medium tabular-nums text-foreground">
                          {item.value.toLocaleString()}
                        </span>
                      )}
                    </div>
                  </>
                )}
              </div>
            )
          })}
        </div>
      </div>
    )
  }
)
ChartTooltipContent.displayName = "ChartTooltip"

const ChartLegend = RechartsPrimitive.Legend

const ChartLegendContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> &
    Pick<RechartsPrimitive.LegendProps, "payload" | "verticalAlign"> & {
      hideIcon?: boolean
      nameKey?: string
    }
>(
  (
    { className, hideIcon = false, payload, verticalAlign = "bottom", nameKey },
    ref
  ) => {
    const { config } = useChart()

    if (!payload?.length) {
      return null
    }

    return (
      <div
        ref={ref}
        className={cn(
          "flex items-center justify-center gap-4",
          verticalAlign === "top" ? "pb-3" : "pt-3",
          className
        )}
      >
        {payload.map((item) => {
          const key = `${nameKey || item.dataKey || "value"}`
          const itemConfig = getPayloadConfigFromPayload(config, item, key)

          return (
            <div
              key={item.value}
              className={cn(
                "flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground"
              )}
            >
              {itemConfig?.icon && !hideIcon ? (
                <itemConfig.icon />
              ) : (
                <div
                  className="h-2 w-2 shrink-0 rounded-[2px]"
                  style={{
                    backgroundColor: item.color,
                  }}
                />
              )}
              {itemConfig?.label}
            </div>
          )
        })}
      </div>
    )
  }
)
ChartLegendContent.displayName = "ChartLegend"

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(
  config: ChartConfig,
  payload: unknown,
  key: string
) {
  if (typeof payload !== "object" || payload === null) {
    return undefined
  }

  const payloadPayload =
    "payload" in payload &&
    typeof payload.payload === "object" &&
    payload.payload !== null
      ? payload.payload
      : undefined

  let configLabelKey: string = key

  if (
    key in payload &&
    typeof payload[key as keyof typeof payload] === "string"
  ) {
    configLabelKey = payload[key as keyof typeof payload] as string
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key as keyof typeof payloadPayload] === "string"
  ) {
    configLabelKey = payloadPayload[
      key as keyof typeof payloadPayload
    ] as string
  }

  return configLabelKey in config
    ? config[configLabelKey]
    : config[key as keyof typeof config]
}

export {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
  ChartStyle,
}



===== FILE: ./components/ui/checkbox.tsx =====
"use client"

import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "@/lib/utils"

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }



===== FILE: ./components/ui/collapsible.tsx =====
"use client"

import * as CollapsiblePrimitive from "@radix-ui/react-collapsible"

const Collapsible = CollapsiblePrimitive.Root

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent

export { Collapsible, CollapsibleTrigger, CollapsibleContent }



===== FILE: ./components/ui/command.tsx =====
"use client"

import * as React from "react"
import { type DialogProps } from "@radix-ui/react-dialog"
import { Command as CommandPrimitive } from "cmdk"
import { Search } from "lucide-react"

import { cn } from "@/lib/utils"
import { Dialog, DialogContent } from "@/components/ui/dialog"

const Command = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive>
>(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
      className
    )}
    {...props}
  />
))
Command.displayName = CommandPrimitive.displayName

const CommandDialog = ({ children, ...props }: DialogProps) => {
  return (
    <Dialog {...props}>
      <DialogContent className="overflow-hidden p-0 shadow-lg">
        <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  )
}

const CommandInput = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Input>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>
>(({ className, ...props }, ref) => (
  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    <Search className="mr-2 h-4 w-4 shrink-0 opacity-50" />
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        "flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    />
  </div>
))

CommandInput.displayName = CommandPrimitive.Input.displayName

const CommandList = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)}
    {...props}
  />
))

CommandList.displayName = CommandPrimitive.List.displayName

const CommandEmpty = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Empty>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>
>((props, ref) => (
  <CommandPrimitive.Empty
    ref={ref}
    className="py-6 text-center text-sm"
    {...props}
  />
))

CommandEmpty.displayName = CommandPrimitive.Empty.displayName

const CommandGroup = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Group>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
      className
    )}
    {...props}
  />
))

CommandGroup.displayName = CommandPrimitive.Group.displayName

const CommandSeparator = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 h-px bg-border", className)}
    {...props}
  />
))
CommandSeparator.displayName = CommandPrimitive.Separator.displayName

const CommandItem = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      className
    )}
    {...props}
  />
))

CommandItem.displayName = CommandPrimitive.Item.displayName

const CommandShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
CommandShortcut.displayName = "CommandShortcut"

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
}



===== FILE: ./components/ui/context-menu.tsx =====
"use client"

import * as React from "react"
import * as ContextMenuPrimitive from "@radix-ui/react-context-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const ContextMenu = ContextMenuPrimitive.Root

const ContextMenuTrigger = ContextMenuPrimitive.Trigger

const ContextMenuGroup = ContextMenuPrimitive.Group

const ContextMenuPortal = ContextMenuPrimitive.Portal

const ContextMenuSub = ContextMenuPrimitive.Sub

const ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup

const ContextMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <ContextMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </ContextMenuPrimitive.SubTrigger>
))
ContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName

const ContextMenuSubContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
ContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName

const ContextMenuContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Portal>
    <ContextMenuPrimitive.Content
      ref={ref}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </ContextMenuPrimitive.Portal>
))
ContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName

const ContextMenuItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName

const ContextMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <ContextMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.CheckboxItem>
))
ContextMenuCheckboxItem.displayName =
  ContextMenuPrimitive.CheckboxItem.displayName

const ContextMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <ContextMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.RadioItem>
))
ContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName

const ContextMenuLabel = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold text-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName

const ContextMenuSeparator = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-border", className)}
    {...props}
  />
))
ContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName

const ContextMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
ContextMenuShortcut.displayName = "ContextMenuShortcut"

export {
  ContextMenu,
  ContextMenuTrigger,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuCheckboxItem,
  ContextMenuRadioItem,
  ContextMenuLabel,
  ContextMenuSeparator,
  ContextMenuShortcut,
  ContextMenuGroup,
  ContextMenuPortal,
  ContextMenuSub,
  ContextMenuSubContent,
  ContextMenuSubTrigger,
  ContextMenuRadioGroup,
}



===== FILE: ./components/ui/dialog.tsx =====
"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}



===== FILE: ./components/ui/drawer.tsx =====
"use client"

import * as React from "react"
import { Drawer as DrawerPrimitive } from "vaul"

import { cn } from "@/lib/utils"

const Drawer = ({
  shouldScaleBackground = true,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (
  <DrawerPrimitive.Root
    shouldScaleBackground={shouldScaleBackground}
    {...props}
  />
)
Drawer.displayName = "Drawer"

const DrawerTrigger = DrawerPrimitive.Trigger

const DrawerPortal = DrawerPrimitive.Portal

const DrawerClose = DrawerPrimitive.Close

const DrawerOverlay = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Overlay
    ref={ref}
    className={cn("fixed inset-0 z-50 bg-black/80", className)}
    {...props}
  />
))
DrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName

const DrawerContent = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DrawerPortal>
    <DrawerOverlay />
    <DrawerPrimitive.Content
      ref={ref}
      className={cn(
        "fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background",
        className
      )}
      {...props}
    >
      <div className="mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted" />
      {children}
    </DrawerPrimitive.Content>
  </DrawerPortal>
))
DrawerContent.displayName = "DrawerContent"

const DrawerHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("grid gap-1.5 p-4 text-center sm:text-left", className)}
    {...props}
  />
)
DrawerHeader.displayName = "DrawerHeader"

const DrawerFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("mt-auto flex flex-col gap-2 p-4", className)}
    {...props}
  />
)
DrawerFooter.displayName = "DrawerFooter"

const DrawerTitle = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DrawerTitle.displayName = DrawerPrimitive.Title.displayName

const DrawerDescription = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DrawerDescription.displayName = DrawerPrimitive.Description.displayName

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
}



===== FILE: ./components/ui/dropdown-menu.tsx =====
"use client"

import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}



===== FILE: ./components/ui/form.tsx =====
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
  FormProvider,
  useFormContext,
} from "react-hook-form"

import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()

  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  )
})
FormItem.displayName = "FormItem"

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
})
FormLabel.displayName = "FormLabel"

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
})
FormControl.displayName = "FormControl"

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-sm text-muted-foreground", className)}
      {...props}
    />
  )
})
FormDescription.displayName = "FormDescription"

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message) : children

  if (!body) {
    return null
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-sm font-medium text-destructive", className)}
      {...props}
    >
      {body}
    </p>
  )
})
FormMessage.displayName = "FormMessage"

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}



===== FILE: ./components/ui/gradient-button.tsx =====
"use client"

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"
import { cn } from "@/lib/utils"

const gradientButtonVariants = cva(
  "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 relative overflow-hidden",
  {
    variants: {
      variant: {
        default: "bg-gradient-to-r from-primary to-accent text-white shadow-lg shadow-primary/20 hover:shadow-xl hover:shadow-primary/30",
        outline: "border-2 border-primary text-primary hover:text-white hover:border-transparent hover:bg-gradient-to-r hover:from-primary hover:to-accent",
        ghost: "text-primary hover:bg-gradient-to-r hover:from-primary/10 hover:to-accent/10 hover:text-primary",
        secondary: "bg-gradient-to-r from-secondary to-primary text-white shadow-lg shadow-secondary/20 hover:shadow-xl hover:shadow-secondary/30",
        subtle: "bg-gradient-to-r from-primary/10 to-accent/10 text-primary hover:bg-gradient-to-r hover:from-primary/20 hover:to-accent/20",
        dark: "bg-gradient-to-r from-gray-900 to-gray-800 text-white shadow-lg shadow-gray-900/30 hover:shadow-xl hover:shadow-black/20",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        xl: "h-14 rounded-lg px-10 text-base",
        icon: "h-10 w-10",
      },
      animation: {
        none: "",
        shimmer: "animate-shimmer relative overflow-hidden before:absolute before:inset-0 before:-translate-x-full before:animate-[shimmer_2s_infinite] before:bg-gradient-to-r before:from-transparent before:via-white/25 before:to-transparent",
      }
    },
    defaultVariants: {
      variant: "default",
      size: "default",
      animation: "none",
    },
  }
)

export interface GradientButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof gradientButtonVariants> {
  asChild?: boolean
}

const GradientButton = React.forwardRef<HTMLButtonElement, GradientButtonProps>(
  ({ className, variant, size, animation, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(gradientButtonVariants({ variant, size, animation, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
GradientButton.displayName = "GradientButton"

export { GradientButton, gradientButtonVariants } 


===== FILE: ./components/ui/hover-card.tsx =====
"use client"

import * as React from "react"
import * as HoverCardPrimitive from "@radix-ui/react-hover-card"

import { cn } from "@/lib/utils"

const HoverCard = HoverCardPrimitive.Root

const HoverCardTrigger = HoverCardPrimitive.Trigger

const HoverCardContent = React.forwardRef<
  React.ElementRef<typeof HoverCardPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <HoverCardPrimitive.Content
    ref={ref}
    align={align}
    sideOffset={sideOffset}
    className={cn(
      "z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
HoverCardContent.displayName = HoverCardPrimitive.Content.displayName

export { HoverCard, HoverCardTrigger, HoverCardContent }



===== FILE: ./components/ui/input-otp.tsx =====
"use client"

import * as React from "react"
import { OTPInput, OTPInputContext } from "input-otp"
import { Dot } from "lucide-react"

import { cn } from "@/lib/utils"

const InputOTP = React.forwardRef<
  React.ElementRef<typeof OTPInput>,
  React.ComponentPropsWithoutRef<typeof OTPInput>
>(({ className, containerClassName, ...props }, ref) => (
  <OTPInput
    ref={ref}
    containerClassName={cn(
      "flex items-center gap-2 has-[:disabled]:opacity-50",
      containerClassName
    )}
    className={cn("disabled:cursor-not-allowed", className)}
    {...props}
  />
))
InputOTP.displayName = "InputOTP"

const InputOTPGroup = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("flex items-center", className)} {...props} />
))
InputOTPGroup.displayName = "InputOTPGroup"

const InputOTPSlot = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div"> & { index: number }
>(({ index, className, ...props }, ref) => {
  const inputOTPContext = React.useContext(OTPInputContext)
  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]

  return (
    <div
      ref={ref}
      className={cn(
        "relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md",
        isActive && "z-10 ring-2 ring-ring ring-offset-background",
        className
      )}
      {...props}
    >
      {char}
      {hasFakeCaret && (
        <div className="pointer-events-none absolute inset-0 flex items-center justify-center">
          <div className="h-4 w-px animate-caret-blink bg-foreground duration-1000" />
        </div>
      )}
    </div>
  )
})
InputOTPSlot.displayName = "InputOTPSlot"

const InputOTPSeparator = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ ...props }, ref) => (
  <div ref={ref} role="separator" {...props}>
    <Dot />
  </div>
))
InputOTPSeparator.displayName = "InputOTPSeparator"

export { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }



===== FILE: ./components/ui/input.tsx =====
import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }



===== FILE: ./components/ui/item-card.tsx =====
import { cn } from "@/lib/utils"
import { Card, CardContent, CardFooter, CardHeader } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { MapPin, Calendar, Clock, ArrowRight } from "lucide-react"
import Image from "next/image"
import Link from "next/link"

interface ItemCardProps {
  id: string
  title: string
  description: string
  category: string
  status: "lost" | "found" | "claimed" | "returned"
  date: string
  time?: string
  location?: string
  image: string
  className?: string
}

export function ItemCard({
  id,
  title,
  description,
  category,
  status,
  date,
  time,
  location,
  image,
  className,
}: ItemCardProps) {
  const statusColors = {
    lost: "bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-300",
    found: "bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-300",
    claimed: "bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-300",
    returned: "bg-violet-100 text-violet-800 dark:bg-violet-900/30 dark:text-violet-300",
  }

  return (
    <Card className={cn("overflow-hidden transition-all duration-200 card-hover", className)}>
      <div className="relative aspect-square w-full overflow-hidden">
        <div className="absolute top-2 right-2 z-10">
          <Badge className={cn("px-2 py-1", statusColors[status])}>
            {status.charAt(0).toUpperCase() + status.slice(1)}
          </Badge>
        </div>
        <Image
          src={image}
          alt={title}
          fill
          className="object-cover transition-all duration-300 hover:scale-105"
        />
      </div>
      <CardHeader className="p-4 pb-0">
        <div className="flex justify-between items-start">
          <div>
            <h3 className="font-semibold text-lg line-clamp-1">{title}</h3>
            <p className="text-xs text-muted-foreground">{category}</p>
          </div>
        </div>
      </CardHeader>
      <CardContent className="p-4 pt-2">
        <p className="text-sm text-muted-foreground line-clamp-2 min-h-[40px]">
          {description}
        </p>
        <div className="mt-3 space-y-2">
          <div className="flex items-center gap-2 text-xs text-muted-foreground">
            <Calendar className="h-3.5 w-3.5" />
            <span>{date}</span>
            {time && (
              <>
                <Clock className="h-3.5 w-3.5 ml-2" />
                <span>{time}</span>
              </>
            )}
          </div>
          {location && (
            <div className="flex items-center gap-2 text-xs text-muted-foreground">
              <MapPin className="h-3.5 w-3.5" />
              <span className="line-clamp-1">{location}</span>
            </div>
          )}
        </div>
      </CardContent>
      <CardFooter className="p-4 pt-0">
        <Link href={`/lost-objects/${id}`} className="w-full">
          <Button variant="outline" className="w-full group">
            View Details
            <ArrowRight className="ml-2 h-4 w-4 transition-transform group-hover:translate-x-1" />
          </Button>
        </Link>
      </CardFooter>
    </Card>
  )
} 


===== FILE: ./components/ui/label.tsx =====
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }



===== FILE: ./components/ui/menubar.tsx =====
"use client"

import * as React from "react"
import * as MenubarPrimitive from "@radix-ui/react-menubar"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const MenubarMenu = MenubarPrimitive.Menu

const MenubarGroup = MenubarPrimitive.Group

const MenubarPortal = MenubarPrimitive.Portal

const MenubarSub = MenubarPrimitive.Sub

const MenubarRadioGroup = MenubarPrimitive.RadioGroup

const Menubar = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Root
    ref={ref}
    className={cn(
      "flex h-10 items-center space-x-1 rounded-md border bg-background p-1",
      className
    )}
    {...props}
  />
))
Menubar.displayName = MenubarPrimitive.Root.displayName

const MenubarTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      className
    )}
    {...props}
  />
))
MenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName

const MenubarSubTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <MenubarPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </MenubarPrimitive.SubTrigger>
))
MenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName

const MenubarSubContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
MenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName

const MenubarContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>
>(
  (
    { className, align = "start", alignOffset = -4, sideOffset = 8, ...props },
    ref
  ) => (
    <MenubarPrimitive.Portal>
      <MenubarPrimitive.Content
        ref={ref}
        align={align}
        alignOffset={alignOffset}
        sideOffset={sideOffset}
        className={cn(
          "z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
          className
        )}
        {...props}
      />
    </MenubarPrimitive.Portal>
  )
)
MenubarContent.displayName = MenubarPrimitive.Content.displayName

const MenubarItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarItem.displayName = MenubarPrimitive.Item.displayName

const MenubarCheckboxItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <MenubarPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.CheckboxItem>
))
MenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName

const MenubarRadioItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <MenubarPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.RadioItem>
))
MenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName

const MenubarLabel = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarLabel.displayName = MenubarPrimitive.Label.displayName

const MenubarSeparator = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
MenubarSeparator.displayName = MenubarPrimitive.Separator.displayName

const MenubarShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
MenubarShortcut.displayname = "MenubarShortcut"

export {
  Menubar,
  MenubarMenu,
  MenubarTrigger,
  MenubarContent,
  MenubarItem,
  MenubarSeparator,
  MenubarLabel,
  MenubarCheckboxItem,
  MenubarRadioGroup,
  MenubarRadioItem,
  MenubarPortal,
  MenubarSubContent,
  MenubarSubTrigger,
  MenubarGroup,
  MenubarSub,
  MenubarShortcut,
}



===== FILE: ./components/ui/navigation-menu.tsx =====
import * as React from "react"
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu"
import { cva } from "class-variance-authority"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const NavigationMenu = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Root
    ref={ref}
    className={cn(
      "relative z-10 flex max-w-max flex-1 items-center justify-center",
      className
    )}
    {...props}
  >
    {children}
    <NavigationMenuViewport />
  </NavigationMenuPrimitive.Root>
))
NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName

const NavigationMenuList = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.List
    ref={ref}
    className={cn(
      "group flex flex-1 list-none items-center justify-center space-x-1",
      className
    )}
    {...props}
  />
))
NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName

const NavigationMenuItem = NavigationMenuPrimitive.Item

const navigationMenuTriggerStyle = cva(
  "group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50"
)

const NavigationMenuTrigger = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Trigger
    ref={ref}
    className={cn(navigationMenuTriggerStyle(), "group", className)}
    {...props}
  >
    {children}{" "}
    <ChevronDown
      className="relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180"
      aria-hidden="true"
    />
  </NavigationMenuPrimitive.Trigger>
))
NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName

const NavigationMenuContent = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Content
    ref={ref}
    className={cn(
      "left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto ",
      className
    )}
    {...props}
  />
))
NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName

const NavigationMenuLink = NavigationMenuPrimitive.Link

const NavigationMenuViewport = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>
>(({ className, ...props }, ref) => (
  <div className={cn("absolute left-0 top-full flex justify-center")}>
    <NavigationMenuPrimitive.Viewport
      className={cn(
        "origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]",
        className
      )}
      ref={ref}
      {...props}
    />
  </div>
))
NavigationMenuViewport.displayName =
  NavigationMenuPrimitive.Viewport.displayName

const NavigationMenuIndicator = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Indicator
    ref={ref}
    className={cn(
      "top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in",
      className
    )}
    {...props}
  >
    <div className="relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md" />
  </NavigationMenuPrimitive.Indicator>
))
NavigationMenuIndicator.displayName =
  NavigationMenuPrimitive.Indicator.displayName

export {
  navigationMenuTriggerStyle,
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
}



===== FILE: ./components/ui/notification-dropdown.tsx =====
"use client"

import * as React from "react"
import { Bell } from "lucide-react"
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover"
import { Button } from "@/components/ui/button"
import { ScrollArea } from "@/components/ui/scroll-area"
import { cn } from "@/lib/utils"

// Mock notifications for demo purposes
const DEMO_NOTIFICATIONS = [
  {
    id: 1,
    title: "Your item has been found!",
    message: "Someone reported finding your lost wallet near the park.",
    time: "Just now",
    read: false,
  },
  {
    id: 2,
    title: "New message from finder",
    message: "Hello, I found your keys at the library. Let's connect to return them.",
    time: "2 hours ago",
    read: false,
  },
  {
    id: 3,
    title: "Verification completed",
    message: "Your item report has been verified and published.",
    time: "Yesterday",
    read: true,
  },
  {
    id: 4,
    title: "Reminder",
    message: "Don't forget to update your contact information for better item recovery.",
    time: "3 days ago",
    read: true,
  },
]

interface NotificationDropdownProps {
  className?: string
}

export function NotificationDropdown({ className }: NotificationDropdownProps) {
  const [notifications, setNotifications] = React.useState(DEMO_NOTIFICATIONS)
  const [open, setOpen] = React.useState(false)
  
  const unreadCount = notifications.filter(notification => !notification.read).length

  const markAllAsRead = () => {
    setNotifications(
      notifications.map(notification => ({
        ...notification,
        read: true,
      }))
    )
  }

  const markAsRead = (id: number) => {
    setNotifications(
      notifications.map(notification => 
        notification.id === id 
          ? { ...notification, read: true }
          : notification
      )
    )
  }

  return (
    <Popover open={open} onOpenChange={setOpen}>
      <PopoverTrigger asChild>
        <Button variant="ghost" size="icon" className={cn("text-muted-foreground hover:bg-muted relative", className)}>
          <Bell className="h-5 w-5" />
          {unreadCount > 0 && (
            <span className="absolute top-2 right-2 h-2 w-2 rounded-full bg-primary"></span>
          )}
          <span className="sr-only">Notifications</span>
        </Button>
      </PopoverTrigger>
      <PopoverContent className="w-80 p-0" align="end">
        <div className="flex items-center justify-between border-b p-3">
          <h3 className="text-sm font-medium">Notifications</h3>
          {unreadCount > 0 && (
            <Button 
              variant="ghost" 
              size="sm" 
              className="h-8 text-xs"
              onClick={markAllAsRead}
            >
              Mark all as read
            </Button>
          )}
        </div>
        {notifications.length > 0 ? (
          <ScrollArea className="h-[300px]">
            <div className="grid gap-1 p-1">
              {notifications.map(notification => (
                <button
                  key={notification.id}
                  className={cn(
                    "flex flex-col gap-1 rounded-md p-3 text-left text-sm transition-colors hover:bg-muted",
                    !notification.read && "bg-muted/50"
                  )}
                  onClick={() => markAsRead(notification.id)}
                >
                  <div className="flex items-start justify-between gap-2">
                    <div className="font-medium">{notification.title}</div>
                    <div className="text-xs text-muted-foreground whitespace-nowrap">
                      {notification.time}
                    </div>
                  </div>
                  <div className="text-xs text-muted-foreground">
                    {notification.message}
                  </div>
                  {!notification.read && (
                    <div className="mt-1 h-1.5 w-1.5 rounded-full bg-primary"></div>
                  )}
                </button>
              ))}
            </div>
          </ScrollArea>
        ) : (
          <div className="p-8 text-center text-muted-foreground">
            No notifications
          </div>
        )}
        <div className="border-t p-2">
          <Button variant="outline" size="sm" className="w-full">
            View all notifications
          </Button>
        </div>
      </PopoverContent>
    </Popover>
  )
} 


===== FILE: ./components/ui/pagination.tsx =====
import * as React from "react"
import { ChevronLeft, ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"
import { ButtonProps, buttonVariants } from "@/components/ui/button"

const Pagination = ({ className, ...props }: React.ComponentProps<"nav">) => (
  <nav
    role="navigation"
    aria-label="pagination"
    className={cn("mx-auto flex w-full justify-center", className)}
    {...props}
  />
)
Pagination.displayName = "Pagination"

const PaginationContent = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    className={cn("flex flex-row items-center gap-1", className)}
    {...props}
  />
))
PaginationContent.displayName = "PaginationContent"

const PaginationItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li ref={ref} className={cn("", className)} {...props} />
))
PaginationItem.displayName = "PaginationItem"

type PaginationLinkProps = {
  isActive?: boolean
} & Pick<ButtonProps, "size"> &
  React.ComponentProps<"a">

const PaginationLink = ({
  className,
  isActive,
  size = "icon",
  ...props
}: PaginationLinkProps) => (
  <a
    aria-current={isActive ? "page" : undefined}
    className={cn(
      buttonVariants({
        variant: isActive ? "outline" : "ghost",
        size,
      }),
      className
    )}
    {...props}
  />
)
PaginationLink.displayName = "PaginationLink"

const PaginationPrevious = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to previous page"
    size="default"
    className={cn("gap-1 pl-2.5", className)}
    {...props}
  >
    <ChevronLeft className="h-4 w-4" />
    <span>Previous</span>
  </PaginationLink>
)
PaginationPrevious.displayName = "PaginationPrevious"

const PaginationNext = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to next page"
    size="default"
    className={cn("gap-1 pr-2.5", className)}
    {...props}
  >
    <span>Next</span>
    <ChevronRight className="h-4 w-4" />
  </PaginationLink>
)
PaginationNext.displayName = "PaginationNext"

const PaginationEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    aria-hidden
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More pages</span>
  </span>
)
PaginationEllipsis.displayName = "PaginationEllipsis"

export {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
}



===== FILE: ./components/ui/popover.tsx =====
"use client"

import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent }



===== FILE: ./components/ui/progress.tsx =====
"use client"

import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-4 w-full overflow-hidden rounded-full bg-secondary",
      className
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }



===== FILE: ./components/ui/radio-group.tsx =====
"use client"

import * as React from "react"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const RadioGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Root
      className={cn("grid gap-2", className)}
      {...props}
      ref={ref}
    />
  )
})
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName

const RadioGroupItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-2.5 w-2.5 fill-current text-current" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  )
})
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName

export { RadioGroup, RadioGroupItem }



===== FILE: ./components/ui/resizable.tsx =====
"use client"

import { GripVertical } from "lucide-react"
import * as ResizablePrimitive from "react-resizable-panels"

import { cn } from "@/lib/utils"

const ResizablePanelGroup = ({
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (
  <ResizablePrimitive.PanelGroup
    className={cn(
      "flex h-full w-full data-[panel-group-direction=vertical]:flex-col",
      className
    )}
    {...props}
  />
)

const ResizablePanel = ResizablePrimitive.Panel

const ResizableHandle = ({
  withHandle,
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {
  withHandle?: boolean
}) => (
  <ResizablePrimitive.PanelResizeHandle
    className={cn(
      "relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90",
      className
    )}
    {...props}
  >
    {withHandle && (
      <div className="z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border">
        <GripVertical className="h-2.5 w-2.5" />
      </div>
    )}
  </ResizablePrimitive.PanelResizeHandle>
)

export { ResizablePanelGroup, ResizablePanel, ResizableHandle }



===== FILE: ./components/ui/scroll-area.tsx =====
"use client"

import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }



===== FILE: ./components/ui/select.tsx =====
"use client"

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}



===== FILE: ./components/ui/separator.tsx =====
"use client"

import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }



===== FILE: ./components/ui/sheet.tsx =====
"use client"

import * as React from "react"
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
    VariantProps<typeof sheetVariants> {}

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      {children}
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}



===== FILE: ./components/ui/sidebar.tsx =====
"use client"

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { VariantProps, cva } from "class-variance-authority"
import { PanelLeft } from "lucide-react"

import { useIsMobile } from "@/hooks/use-mobile"
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Separator } from "@/components/ui/separator"
import { Sheet, SheetContent } from "@/components/ui/sheet"
import { Skeleton } from "@/components/ui/skeleton"
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip"

const SIDEBAR_COOKIE_NAME = "sidebar:state"
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7
const SIDEBAR_WIDTH = "16rem"
const SIDEBAR_WIDTH_MOBILE = "18rem"
const SIDEBAR_WIDTH_ICON = "3rem"
const SIDEBAR_KEYBOARD_SHORTCUT = "b"

type SidebarContext = {
  state: "expanded" | "collapsed"
  open: boolean
  setOpen: (open: boolean) => void
  openMobile: boolean
  setOpenMobile: (open: boolean) => void
  isMobile: boolean
  toggleSidebar: () => void
}

const SidebarContext = React.createContext<SidebarContext | null>(null)

function useSidebar() {
  const context = React.useContext(SidebarContext)
  if (!context) {
    throw new Error("useSidebar must be used within a SidebarProvider.")
  }

  return context
}

const SidebarProvider = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    defaultOpen?: boolean
    open?: boolean
    onOpenChange?: (open: boolean) => void
  }
>(
  (
    {
      defaultOpen = true,
      open: openProp,
      onOpenChange: setOpenProp,
      className,
      style,
      children,
      ...props
    },
    ref
  ) => {
    const isMobile = useIsMobile()
    const [openMobile, setOpenMobile] = React.useState(false)

    // This is the internal state of the sidebar.
    // We use openProp and setOpenProp for control from outside the component.
    const [_open, _setOpen] = React.useState(defaultOpen)
    const open = openProp ?? _open
    const setOpen = React.useCallback(
      (value: boolean | ((value: boolean) => boolean)) => {
        const openState = typeof value === "function" ? value(open) : value
        if (setOpenProp) {
          setOpenProp(openState)
        } else {
          _setOpen(openState)
        }

        // This sets the cookie to keep the sidebar state.
        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`
      },
      [setOpenProp, open]
    )

    // Helper to toggle the sidebar.
    const toggleSidebar = React.useCallback(() => {
      return isMobile
        ? setOpenMobile((open) => !open)
        : setOpen((open) => !open)
    }, [isMobile, setOpen, setOpenMobile])

    // Adds a keyboard shortcut to toggle the sidebar.
    React.useEffect(() => {
      const handleKeyDown = (event: KeyboardEvent) => {
        if (
          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&
          (event.metaKey || event.ctrlKey)
        ) {
          event.preventDefault()
          toggleSidebar()
        }
      }

      window.addEventListener("keydown", handleKeyDown)
      return () => window.removeEventListener("keydown", handleKeyDown)
    }, [toggleSidebar])

    // We add a state so that we can do data-state="expanded" or "collapsed".
    // This makes it easier to style the sidebar with Tailwind classes.
    const state = open ? "expanded" : "collapsed"

    const contextValue = React.useMemo<SidebarContext>(
      () => ({
        state,
        open,
        setOpen,
        isMobile,
        openMobile,
        setOpenMobile,
        toggleSidebar,
      }),
      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]
    )

    return (
      <SidebarContext.Provider value={contextValue}>
        <TooltipProvider delayDuration={0}>
          <div
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH,
                "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
                ...style,
              } as React.CSSProperties
            }
            className={cn(
              "group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar",
              className
            )}
            ref={ref}
            {...props}
          >
            {children}
          </div>
        </TooltipProvider>
      </SidebarContext.Provider>
    )
  }
)
SidebarProvider.displayName = "SidebarProvider"

const Sidebar = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    side?: "left" | "right"
    variant?: "sidebar" | "floating" | "inset"
    collapsible?: "offcanvas" | "icon" | "none"
  }
>(
  (
    {
      side = "left",
      variant = "sidebar",
      collapsible = "offcanvas",
      className,
      children,
      ...props
    },
    ref
  ) => {
    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()

    if (collapsible === "none") {
      return (
        <div
          className={cn(
            "flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground",
            className
          )}
          ref={ref}
          {...props}
        >
          {children}
        </div>
      )
    }

    if (isMobile) {
      return (
        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
          <SheetContent
            data-sidebar="sidebar"
            data-mobile="true"
            className="w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden"
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH_MOBILE,
              } as React.CSSProperties
            }
            side={side}
          >
            <div className="flex h-full w-full flex-col">{children}</div>
          </SheetContent>
        </Sheet>
      )
    }

    return (
      <div
        ref={ref}
        className="group peer hidden md:block text-sidebar-foreground"
        data-state={state}
        data-collapsible={state === "collapsed" ? collapsible : ""}
        data-variant={variant}
        data-side={side}
      >
        {/* This is what handles the sidebar gap on desktop */}
        <div
          className={cn(
            "duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear",
            "group-data-[collapsible=offcanvas]:w-0",
            "group-data-[side=right]:rotate-180",
            variant === "floating" || variant === "inset"
              ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon]"
          )}
        />
        <div
          className={cn(
            "duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex",
            side === "left"
              ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
              : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
            // Adjust the padding for floating and inset variants.
            variant === "floating" || variant === "inset"
              ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l",
            className
          )}
          {...props}
        >
          <div
            data-sidebar="sidebar"
            className="flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow"
          >
            {children}
          </div>
        </div>
      </div>
    )
  }
)
Sidebar.displayName = "Sidebar"

const SidebarTrigger = React.forwardRef<
  React.ElementRef<typeof Button>,
  React.ComponentProps<typeof Button>
>(({ className, onClick, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <Button
      ref={ref}
      data-sidebar="trigger"
      variant="ghost"
      size="icon"
      className={cn("h-7 w-7", className)}
      onClick={(event) => {
        onClick?.(event)
        toggleSidebar()
      }}
      {...props}
    >
      <PanelLeft />
      <span className="sr-only">Toggle Sidebar</span>
    </Button>
  )
})
SidebarTrigger.displayName = "SidebarTrigger"

const SidebarRail = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button">
>(({ className, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <button
      ref={ref}
      data-sidebar="rail"
      aria-label="Toggle Sidebar"
      tabIndex={-1}
      onClick={toggleSidebar}
      title="Toggle Sidebar"
      className={cn(
        "absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex",
        "[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize",
        "[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
        "group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar",
        "[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
        "[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
        className
      )}
      {...props}
    />
  )
})
SidebarRail.displayName = "SidebarRail"

const SidebarInset = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"main">
>(({ className, ...props }, ref) => {
  return (
    <main
      ref={ref}
      className={cn(
        "relative flex min-h-svh flex-1 flex-col bg-background",
        "peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow",
        className
      )}
      {...props}
    />
  )
})
SidebarInset.displayName = "SidebarInset"

const SidebarInput = React.forwardRef<
  React.ElementRef<typeof Input>,
  React.ComponentProps<typeof Input>
>(({ className, ...props }, ref) => {
  return (
    <Input
      ref={ref}
      data-sidebar="input"
      className={cn(
        "h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring",
        className
      )}
      {...props}
    />
  )
})
SidebarInput.displayName = "SidebarInput"

const SidebarHeader = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="header"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarHeader.displayName = "SidebarHeader"

const SidebarFooter = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="footer"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarFooter.displayName = "SidebarFooter"

const SidebarSeparator = React.forwardRef<
  React.ElementRef<typeof Separator>,
  React.ComponentProps<typeof Separator>
>(({ className, ...props }, ref) => {
  return (
    <Separator
      ref={ref}
      data-sidebar="separator"
      className={cn("mx-2 w-auto bg-sidebar-border", className)}
      {...props}
    />
  )
})
SidebarSeparator.displayName = "SidebarSeparator"

const SidebarContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="content"
      className={cn(
        "flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarContent.displayName = "SidebarContent"

const SidebarGroup = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="group"
      className={cn("relative flex w-full min-w-0 flex-col p-2", className)}
      {...props}
    />
  )
})
SidebarGroup.displayName = "SidebarGroup"

const SidebarGroupLabel = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "div"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-label"
      className={cn(
        "duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        "group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupLabel.displayName = "SidebarGroupLabel"

const SidebarGroupAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-action"
      className={cn(
        "absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupAction.displayName = "SidebarGroupAction"

const SidebarGroupContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="group-content"
    className={cn("w-full text-sm", className)}
    {...props}
  />
))
SidebarGroupContent.displayName = "SidebarGroupContent"

const SidebarMenu = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu"
    className={cn("flex w-full min-w-0 flex-col gap-1", className)}
    {...props}
  />
))
SidebarMenu.displayName = "SidebarMenu"

const SidebarMenuItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    data-sidebar="menu-item"
    className={cn("group/menu-item relative", className)}
    {...props}
  />
))
SidebarMenuItem.displayName = "SidebarMenuItem"

const sidebarMenuButtonVariants = cva(
  "peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
        outline:
          "bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]",
      },
      size: {
        default: "h-8 text-sm",
        sm: "h-7 text-xs",
        lg: "h-12 text-sm group-data-[collapsible=icon]:!p-0",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const SidebarMenuButton = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    isActive?: boolean
    tooltip?: string | React.ComponentProps<typeof TooltipContent>
  } & VariantProps<typeof sidebarMenuButtonVariants>
>(
  (
    {
      asChild = false,
      isActive = false,
      variant = "default",
      size = "default",
      tooltip,
      className,
      ...props
    },
    ref
  ) => {
    const Comp = asChild ? Slot : "button"
    const { isMobile, state } = useSidebar()

    const button = (
      <Comp
        ref={ref}
        data-sidebar="menu-button"
        data-size={size}
        data-active={isActive}
        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
        {...props}
      />
    )

    if (!tooltip) {
      return button
    }

    if (typeof tooltip === "string") {
      tooltip = {
        children: tooltip,
      }
    }

    return (
      <Tooltip>
        <TooltipTrigger asChild>{button}</TooltipTrigger>
        <TooltipContent
          side="right"
          align="center"
          hidden={state !== "collapsed" || isMobile}
          {...tooltip}
        />
      </Tooltip>
    )
  }
)
SidebarMenuButton.displayName = "SidebarMenuButton"

const SidebarMenuAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    showOnHover?: boolean
  }
>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-action"
      className={cn(
        "absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        showOnHover &&
          "group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuAction.displayName = "SidebarMenuAction"

const SidebarMenuBadge = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="menu-badge"
    className={cn(
      "absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none",
      "peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",
      "peer-data-[size=sm]/menu-button:top-1",
      "peer-data-[size=default]/menu-button:top-1.5",
      "peer-data-[size=lg]/menu-button:top-2.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuBadge.displayName = "SidebarMenuBadge"

const SidebarMenuSkeleton = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    showIcon?: boolean
  }
>(({ className, showIcon = false, ...props }, ref) => {
  // Random width between 50 to 90%.
  const width = React.useMemo(() => {
    return `${Math.floor(Math.random() * 40) + 50}%`
  }, [])

  return (
    <div
      ref={ref}
      data-sidebar="menu-skeleton"
      className={cn("rounded-md h-8 flex gap-2 px-2 items-center", className)}
      {...props}
    >
      {showIcon && (
        <Skeleton
          className="size-4 rounded-md"
          data-sidebar="menu-skeleton-icon"
        />
      )}
      <Skeleton
        className="h-4 flex-1 max-w-[--skeleton-width]"
        data-sidebar="menu-skeleton-text"
        style={
          {
            "--skeleton-width": width,
          } as React.CSSProperties
        }
      />
    </div>
  )
})
SidebarMenuSkeleton.displayName = "SidebarMenuSkeleton"

const SidebarMenuSub = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu-sub"
    className={cn(
      "mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuSub.displayName = "SidebarMenuSub"

const SidebarMenuSubItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ ...props }, ref) => <li ref={ref} {...props} />)
SidebarMenuSubItem.displayName = "SidebarMenuSubItem"

const SidebarMenuSubButton = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentProps<"a"> & {
    asChild?: boolean
    size?: "sm" | "md"
    isActive?: boolean
  }
>(({ asChild = false, size = "md", isActive, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-sub-button"
      data-size={size}
      data-active={isActive}
      className={cn(
        "flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground",
        "data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",
        size === "sm" && "text-xs",
        size === "md" && "text-sm",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuSubButton.displayName = "SidebarMenuSubButton"

export {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupAction,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInput,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuBadge,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSkeleton,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  SidebarProvider,
  SidebarRail,
  SidebarSeparator,
  SidebarTrigger,
  useSidebar,
}



===== FILE: ./components/ui/skeleton.tsx =====
import { cn } from "@/lib/utils"

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-muted", className)}
      {...props}
    />
  )
}

export { Skeleton }



===== FILE: ./components/ui/slider.tsx =====
"use client"

import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "@/lib/utils"

const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
>(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex w-full touch-none select-none items-center",
      className
    )}
    {...props}
  >
    <SliderPrimitive.Track className="relative h-2 w-full grow overflow-hidden rounded-full bg-secondary">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb className="block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50" />
  </SliderPrimitive.Root>
))
Slider.displayName = SliderPrimitive.Root.displayName

export { Slider }



===== FILE: ./components/ui/sonner.tsx =====
"use client"

import { useTheme } from "next-themes"
import { Toaster as Sonner } from "sonner"

type ToasterProps = React.ComponentProps<typeof Sonner>

const Toaster = ({ ...props }: ToasterProps) => {
  const { theme = "system" } = useTheme()

  return (
    <Sonner
      theme={theme as ToasterProps["theme"]}
      className="toaster group"
      toastOptions={{
        classNames: {
          toast:
            "group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",
          description: "group-[.toast]:text-muted-foreground",
          actionButton:
            "group-[.toast]:bg-primary group-[.toast]:text-primary-foreground",
          cancelButton:
            "group-[.toast]:bg-muted group-[.toast]:text-muted-foreground",
        },
      }}
      {...props}
    />
  )
}

export { Toaster }



===== FILE: ./components/ui/switch.tsx =====
"use client"

import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }



===== FILE: ./components/ui/table.tsx =====
import * as React from "react"

import { cn } from "@/lib/utils"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}



===== FILE: ./components/ui/tabs.tsx =====
"use client"

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }



===== FILE: ./components/ui/textarea.tsx =====
import * as React from "react"

import { cn } from "@/lib/utils"

const Textarea = React.forwardRef<
  HTMLTextAreaElement,
  React.ComponentProps<"textarea">
>(({ className, ...props }, ref) => {
  return (
    <textarea
      className={cn(
        "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        className
      )}
      ref={ref}
      {...props}
    />
  )
})
Textarea.displayName = "Textarea"

export { Textarea }



===== FILE: ./components/ui/toaster.tsx =====
"use client"

import { useToast } from "@/hooks/use-toast"
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/components/ui/toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}



===== FILE: ./components/ui/toast.tsx =====
"use client"

import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold", className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}



===== FILE: ./components/ui/toggle-group.tsx =====
"use client"

import * as React from "react"
import * as ToggleGroupPrimitive from "@radix-ui/react-toggle-group"
import { type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"
import { toggleVariants } from "@/components/ui/toggle"

const ToggleGroupContext = React.createContext<
  VariantProps<typeof toggleVariants>
>({
  size: "default",
  variant: "default",
})

const ToggleGroup = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, children, ...props }, ref) => (
  <ToggleGroupPrimitive.Root
    ref={ref}
    className={cn("flex items-center justify-center gap-1", className)}
    {...props}
  >
    <ToggleGroupContext.Provider value={{ variant, size }}>
      {children}
    </ToggleGroupContext.Provider>
  </ToggleGroupPrimitive.Root>
))

ToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName

const ToggleGroupItem = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &
    VariantProps<typeof toggleVariants>
>(({ className, children, variant, size, ...props }, ref) => {
  const context = React.useContext(ToggleGroupContext)

  return (
    <ToggleGroupPrimitive.Item
      ref={ref}
      className={cn(
        toggleVariants({
          variant: context.variant || variant,
          size: context.size || size,
        }),
        className
      )}
      {...props}
    >
      {children}
    </ToggleGroupPrimitive.Item>
  )
})

ToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName

export { ToggleGroup, ToggleGroupItem }



===== FILE: ./components/ui/toggle.tsx =====
"use client"

import * as React from "react"
import * as TogglePrimitive from "@radix-ui/react-toggle"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const toggleVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2",
  {
    variants: {
      variant: {
        default: "bg-transparent",
        outline:
          "border border-input bg-transparent hover:bg-accent hover:text-accent-foreground",
      },
      size: {
        default: "h-10 px-3 min-w-10",
        sm: "h-9 px-2.5 min-w-9",
        lg: "h-11 px-5 min-w-11",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const Toggle = React.forwardRef<
  React.ElementRef<typeof TogglePrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, ...props }, ref) => (
  <TogglePrimitive.Root
    ref={ref}
    className={cn(toggleVariants({ variant, size, className }))}
    {...props}
  />
))

Toggle.displayName = TogglePrimitive.Root.displayName

export { Toggle, toggleVariants }



===== FILE: ./components/ui/tooltip.tsx =====
"use client"

import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }



===== FILE: ./components/ui/use-mobile.tsx =====
import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}



===== FILE: ./components/ui/use-toast.ts =====
"use client"

// Inspired by react-hot-toast library
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }



===== FILE: ./config_improved.py =====
# config_stable.py - Configuration stabilisée pour éviter les NaN
config = {
    # === CLASSES ÉTENDUES AVEC PERSONNES ===
    'num_classes': 28,
    
    # === PARAMÈTRES STABILISÉS ===
    'batch_size': 2,  # RÉDUIT pour plus de stabilité
    'learning_rate': 0.0005,  # BEAUCOUP PLUS BAS pour éviter les NaN
    'num_epochs': 30,
    'image_size': (320, 320),  # PLUS PETIT pour stabilité
    'use_mixed_precision': False,  # DÉSACTIVÉ - cause souvent des NaN
    'max_train_images': 4000,  # RÉDUIT pour démarrage plus rapide
    'max_val_images': 400,
    'warmup_epochs': 5,  # PLUS LONG warmup
    
    # === OPTIMISATIONS STABILISÉES ===
    'optimizer': 'sgd',  # SGD plus stable qu'AdamW au début
    'weight_decay': 1e-5,  # RÉDUIT
    'momentum': 0.9,
    'num_workers': 0,  # DÉSACTIVÉ pour éviter les problèmes
    'pin_memory': False,  # DÉSACTIVÉ pour stabilité
    'gradient_clipping': 0.5,  # PLUS AGRESSIF pour éviter explosion
    
    # === PARAMÈTRES DE DÉTECTION CONSERVATEURS ===
    'confidence_threshold': 0.3,
    'nms_threshold': 0.5,
    'max_detections': 50,
    
    # === LOSS FUNCTIONS STABILISÉES ===
    'focal_loss': False,  # DÉSACTIVÉ temporairement
    'focal_alpha': 0.25,
    'focal_gamma': 2.0,
    'iou_loss_weight': 1.0,  # RÉDUIT - était 2.0
    'class_loss_weight': 1.0,
    
    # === CHEMINS ===
    'coco_dir': 'c:/Users/ay855/Documents/detction_model/coco',
    'output_dir': 'output_stable_training',
    
    # === CLASSES (IDENTIQUES) ===
    'classes': [
        'person',       
        'backpack',      'suitcase',      'handbag',       'tie',
        'umbrella',      'hair drier',    'toothbrush',    'cell phone',
        'laptop',        'keyboard',      'mouse',         'remote',
        'tv',            'clock',         'microwave',     'bottle',
        'cup',           'bowl',          'knife',         'spoon',
        'fork',          'wine glass',    'refrigerator',  'scissors',
        'book',          'vase',          'chair',
    ],
    
    
    # === PONDÉRATION DÉSACTIVÉE TEMPORAIREMENT ===
    'class_weights': {},  # Vide pour éviter les complications
    
    # === NOMS EN FRANÇAIS ===
    'class_names_fr': {
        'person': 'Personne',
        'backpack': 'Sac à dos',
        'suitcase': 'Valise',
        'handbag': 'Sac à main',
        'tie': 'Cravate',
        'hair drier': 'Sèche-cheveux',
        'toothbrush': 'Brosse à dents',
        'cell phone': 'Téléphone',
        'laptop': 'Ordinateur portable',
        'keyboard': 'Clavier',
        'mouse': 'Souris',
        'remote': 'Télécommande',
        'tv': 'Télévision',
        'bottle': 'Bouteille',
        'cup': 'Tasse',
        'bowl': 'Bol',
        'knife': 'Couteau',
        'spoon': 'Cuillère',
        'fork': 'Fourchette',
        'wine glass': 'Verre',
        'scissors': 'Ciseaux',
        'book': 'Livre',
        'clock': 'Horloge',
        'umbrella': 'Parapluie',
        'vase': 'Vase',
        'chair': 'Chaise',
        'microwave': 'Micro-ondes',
        'refrigerator': 'Réfrigérateur'
    },
    
    # === PARAMÈTRES STABILISÉS ===
    'early_stopping_patience': 8,
    'validation_frequency': 3,  # Moins fréquent
    'ema_decay': 0.999,  # RÉDUIT pour plus de stabilité
    
    # === PARAMÈTRES POUR LA DÉTECTION DE PERSONNES ===
    'person_detection_params': {
        'min_person_size': 24,  # RÉDUIT
        'person_confidence_boost': 0.05,  # RÉDUIT
        'person_nms_threshold': 0.4,
    },
    
    # === DEBUGGING ===
    'debug_nan': True,  # Activer le debug des NaN
    'check_gradients': True,  # Vérifier les gradients
}


===== FILE: ./convert_to_torchscript.py =====
from ultralytics import YOLO
import sys

try:
    print('Loading model...')
    model = YOLO('../stable_model_epoch_30.pth')
    print('Exporting to TorchScript (default name)...')
    result = model.export(format='torchscript')
    print('Export result:', result)
    print('✅ TorchScript export attempted. Check for .torchscript or .pt files.')
except Exception as e:
    print('❌ Error during export:', e, file=sys.stderr)
    raise 


===== FILE: ./detection-service/convert_to_torchscript.py =====
from ultralytics import YOLO

# Load your trained model (update the path if needed)
model = YOLO('../stable_model_epoch_30.pth')  # or whichever epoch you want

# Export to TorchScript
model.export(format='torchscript')
print("✅ TorchScript model exported as 'stable_model_epoch_30.torchscript'") 


===== FILE: ./detection-service/download_model.py =====
#!/usr/bin/env python3
"""
Download a pre-trained YOLOv8 model for object detection
"""

from ultralytics import YOLO
import torch
import logging
from pathlib import Path

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def download_model():
    """Download and save a pre-trained YOLOv8 model"""
    try:
        logger.info("🚀 Downloading YOLOv8 model...")
        
        # Download the smallest YOLOv8 model
        model = YOLO('yolov8n.pt')
        
        # Save as torchscript format
        logger.info("💾 Converting and saving model...")
        model.export(format='torchscript')
        
        # Rename to our expected filename
        Path('yolov8n.torchscript').rename('stable_model_epoch_30.pth')
        
        logger.info("✅ Model downloaded and saved as 'stable_model_epoch_30.pth'")
        logger.info("\n📝 Model Info:")
        logger.info("- Type: YOLOv8n (nano)")
        logger.info("- Classes: 80 common objects")
        logger.info("- Size: ~6MB")
        logger.info("\n🎯 You can now run test_video.py!")
        
    except Exception as e:
        logger.error(f"❌ Error downloading model: {e}")
        raise

if __name__ == '__main__':
    download_model() 


===== FILE: ./detection-service/download_test_videos.py =====
#!/usr/bin/env python3
"""
Download test videos for lost object detection
"""

import os
import requests
from pathlib import Path
import gdown
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Create test_videos directory
TEST_VIDEOS_DIR = Path('test_videos')
TEST_VIDEOS_DIR.mkdir(exist_ok=True)

# Sample videos from public datasets
VIDEOS = {
    'abandoned_bag': {
        'url': 'https://drive.google.com/uc?id=1-2X3Y4Z5A6B7C8D9E0F1G2H3I4J5K6L7M',
        'description': 'Person leaves a bag and walks away'
    },
    'stationary_laptop': {
        'url': 'https://drive.google.com/uc?id=1-2X3Y4Z5A6B7C8D9E0F1G2H3I4J5K6L7M',
        'description': 'Laptop left on table with people walking by'
    },
    'busy_entrance': {
        'url': 'https://drive.google.com/uc?id=1-2X3Y4Z5A6B7C8D9E0F1G2H3I4J5K6L7M',
        'description': 'High traffic area with various objects'
    }
}

def download_video(url, filename):
    """Download a video from Google Drive"""
    try:
        output = TEST_VIDEOS_DIR / filename
        gdown.download(url, str(output), quiet=False)
        if output.exists():
            logger.info(f"✅ Downloaded: {filename}")
            return True
        else:
            logger.error(f"❌ Failed to download: {filename}")
            return False
    except Exception as e:
        logger.error(f"❌ Error downloading {filename}: {e}")
        return False

def main():
    logger.info("🎥 Downloading test videos...")
    
    # Create a README with video descriptions
    readme_path = TEST_VIDEOS_DIR / 'README.md'
    with open(readme_path, 'w') as f:
        f.write("# Test Videos for Lost Object Detection\n\n")
        f.write("These videos can be used to test the lost object detection system.\n\n")
        f.write("## Available Videos\n\n")
        
        for name, info in VIDEOS.items():
            f.write(f"### {name}\n")
            f.write(f"- Description: {info['description']}\n")
            f.write(f"- File: {name}.mp4\n\n")
    
    # Download each video
    for name, info in VIDEOS.items():
        filename = f"{name}.mp4"
        if not (TEST_VIDEOS_DIR / filename).exists():
            download_video(info['url'], filename)
    
    logger.info("\n📝 How to use these videos:")
    logger.info("1. Place your own test videos in the test_videos directory")
    logger.info("2. Run the detection test:")
    logger.info("   python test_video.py test_videos/your_video.mp4")
    logger.info("\n💡 Tips for creating your own test videos:")
    logger.info("- Record in good lighting")
    logger.info("- Include different scenarios (busy areas, quiet areas)")
    logger.info("- Test with different types of objects")
    logger.info("- Include people walking by to test person proximity detection")

if __name__ == '__main__':
    main() 


===== FILE: ./detection-service/object_detector.py =====
#!/usr/bin/env python3
"""
RECOVR Lost Object Detector
Detects objects that have been left unattended for too long
"""

import cv2
import torch
import torchvision
from torchvision.models.detection import fasterrcnn_resnet50_fpn
from torchvision.models.detection.faster_rcnn import FastRCNNPredictor
import numpy as np
from pathlib import Path
import logging
from datetime import datetime
import json
import requests
from collections import defaultdict
import time
import os
from PIL import Image
import io

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class ObjectDetector:
    def __init__(self, model_path, num_classes=29, device=None):
        self.device = device or ('cuda' if torch.cuda.is_available() else 'cpu')
        print(f"Using device: {self.device}")
        
        # Load TorchScript model
        try:
            self.model = torch.jit.load(model_path, map_location=self.device)
            self.model.eval()
            print(f"TorchScript model loaded successfully from {model_path}")
        except Exception as e:
            print(f"Error loading TorchScript model: {e}")
            raise
        
        # Initialize video capture
        self.cap = None
        
        # Class names (modify these based on your training)
        self.class_names = ['background'] + [f'class_{i}' for i in range(1, num_classes)]
        
    def start_video(self, video_path):
        """Start video capture from file or camera"""
        if self.cap is not None:
            self.cap.release()
            
        if isinstance(video_path, int):  # Camera index
            self.cap = cv2.VideoCapture(video_path)
        else:  # Video file
            self.cap = cv2.VideoCapture(video_path)
            
        if not self.cap.isOpened():
            raise ValueError(f"Could not open video source: {video_path}")
            
        return self.cap.get(cv2.CAP_PROP_FRAME_WIDTH), self.cap.get(cv2.CAP_PROP_FRAME_HEIGHT)
    
    def process_frame(self, frame):
        """Process a single frame and return detections (YOLOv8 TorchScript format)"""
        if frame is None:
            return []

        # Convert frame to RGB and resize to 640x640 (YOLOv8 default)
        frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        img_resized = cv2.resize(frame_rgb, (640, 640))
        img_tensor = torch.from_numpy(img_resized).permute(2, 0, 1).float() / 255.0
        img_tensor = img_tensor.unsqueeze(0).to(self.device)

        # Run inference
        with torch.no_grad():
            preds = self.model(img_tensor)[0]  # (num_detections, 85)
            preds = preds.cpu().numpy()

        detections = []
        confidence_threshold = 0.5
        # COCO class names for YOLOv8
        coco_classes = [
            'person', 'bicycle', 'car', 'motorcycle', 'airplane', 'bus', 'train', 'truck', 'boat', 'traffic light',
            'fire hydrant', 'stop sign', 'parking meter', 'bench', 'bird', 'cat', 'dog', 'horse', 'sheep', 'cow',
            'elephant', 'bear', 'zebra', 'giraffe', 'backpack', 'umbrella', 'handbag', 'tie', 'suitcase', 'frisbee',
            'skis', 'snowboard', 'sports ball', 'kite', 'baseball bat', 'baseball glove', 'skateboard', 'surfboard',
            'tennis racket', 'bottle', 'wine glass', 'cup', 'fork', 'knife', 'spoon', 'bowl', 'banana', 'apple',
            'sandwich', 'orange', 'broccoli', 'carrot', 'hot dog', 'pizza', 'donut', 'cake', 'chair', 'couch',
            'potted plant', 'bed', 'dining table', 'toilet', 'tv', 'laptop', 'mouse', 'remote', 'keyboard', 'cell phone',
            'microwave', 'oven', 'toaster', 'sink', 'refrigerator', 'book', 'clock', 'vase', 'scissors', 'teddy bear',
            'hair drier', 'toothbrush'
        ]
        for det in preds:
            # YOLOv8 output format: [x1, y1, x2, y2, conf, class_scores...]
            x1, y1, x2, y2, conf, *class_scores = det
            if conf < confidence_threshold:
                continue
            # Get class with highest score
            cls = np.argmax(class_scores)
            x1, y1, x2, y2, cls = map(int, [x1, y1, x2, y2, cls])
            class_name = coco_classes[cls] if 0 <= cls < len(coco_classes) else f'class_{cls}'
            detections.append({
                'bbox': [x1, y1, x2, y2],
                'score': float(conf),
                'label': int(cls),
                'class_name': class_name,
                'timestamp': datetime.now().isoformat()
            })
        return detections
    
    def process_video(self, video_path, output_path=None, save_to_db=True):
        """Process entire video and optionally save results"""
        try:
            width, height = map(int, self.start_video(video_path))
            print(f"Processing video: {video_path}")
            print(f"Resolution: {width}x{height}")
            
            frame_count = 0
            all_detections = []
            out = None
            
            while True:
                ret, frame = self.cap.read()
                if not ret:
                    break
                    
                frame_count += 1
                if frame_count % 30 == 0:
                    print(f"Processing frame {frame_count}")
                
                # Process frame
                detections = self.process_frame(frame)
                if detections:
                    all_detections.extend(detections)
                    print(f"Found {len(detections)} objects in frame {frame_count}")
                    
                    # Save to database if enabled
                    if save_to_db:
                        self._save_to_database(detections, frame)
                
                # Display frame with detections (optional)
                if output_path:
                    frame_with_boxes = self._draw_detections(frame.copy(), detections)
                    if frame_count == 1:
                        fourcc = cv2.VideoWriter_fourcc(*'mp4v')
                        out = cv2.VideoWriter(output_path, fourcc, 30.0, (width, height))
                    out.write(frame_with_boxes)
            
            if output_path and out is not None:
                out.release()
                
            self.cap.release()
            print(f"Processed {frame_count} frames. Found {len(all_detections)} objects.")
            return all_detections
            
        except Exception as e:
            print(f"Error processing video: {e}")
            if self.cap is not None:
                self.cap.release()
            if 'out' in locals() and out is not None:
                out.release()
            raise
    
    def _draw_detections(self, frame, detections):
        """Draw bounding boxes on frame"""
        for det in detections:
            x1, y1, x2, y2 = det['bbox']
            score = det['score']
            class_name = det['class_name']
            
            # Draw box
            cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 255, 0), 2)
            
            # Draw label
            label_text = f"{class_name}: {score:.2f}"
            cv2.putText(frame, label_text, (x1, y1-10), 
                       cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)
        
        return frame
    
    def _save_to_database(self, detections, frame):
        """Save detections to database via API"""
        api_url = "http://localhost:8080/api/items"

        for det in detections:
            # Prepare data for API (match ItemDto fields)
            data = {
                'name': f"Detected {det['class_name']}",
                'description': f"Automatically detected {det['class_name']} (confidence: {det['score']:.2f})",
                'type': 'LOST',  # or 'FOUND' if you want
                'category': 'MISCELLANEOUS',  # or map to a real category if possible
                'status': 'LOST',
                'location': "Camera Feed",
                'imageUrl': None,  # TODO: Implement image upload and set URL here
                'timestamp': det['timestamp']
            }

            headers = {'Content-Type': 'application/json'}

            try:
                response = requests.post(api_url, json=data, headers=headers)
                if response.status_code in (200, 201):
                    print(f"Saved detection to database: {data['name']}")
                else:
                    print(f"Failed to save detection: {response.status_code} - {response.text}")
            except Exception as e:
                print(f"Error saving to database: {e}")

if __name__ == "__main__":
    # Example usage
    model_path = "stable_model_epoch_30.pth"
    video_path = "test_videos/stock-footage-shanghai-china-february-passengers-boarding-high-speed-train-at-shanghai-station-on-a.webm"
    
    detector = ObjectDetector(model_path, num_classes=29)  # Using 29 classes to match the model
    detector.process_video(video_path, output_path="output.mp4") 


===== FILE: ./detection-service/record_test_video.py =====
#!/usr/bin/env python3
"""
Record test videos for lost object detection
"""

import cv2
import time
from pathlib import Path
import logging
from datetime import datetime

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def record_video(duration=30, output_dir='test_videos'):
    """Record a test video using webcam"""
    # Create output directory
    output_path = Path(output_dir)
    output_path.mkdir(exist_ok=True)
    
    # Initialize camera
    cap = cv2.VideoCapture(0)
    if not cap.isOpened():
        logger.error("❌ Could not open camera")
        return
        
    # Get camera properties
    width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
    height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
    fps = int(cap.get(cv2.CAP_PROP_FPS))
    
    # Create video writer
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    output_file = output_path / f"test_video_{timestamp}.mp4"
    fourcc = cv2.VideoWriter_fourcc(*'mp4v')
    out = cv2.VideoWriter(str(output_file), fourcc, fps, (width, height))
    
    logger.info("🎥 Recording started...")
    logger.info(f"Recording for {duration} seconds")
    logger.info("Press 'q' to stop recording early")
    
    start_time = time.time()
    frame_count = 0
    
    while cap.isOpened():
        ret, frame = cap.read()
        if not ret:
            break
            
        # Add timestamp and recording info
        elapsed = time.time() - start_time
        cv2.putText(frame, f"Recording: {elapsed:.1f}s", (10, 30),
                   cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)
        
        # Show frame
        cv2.imshow('Recording Test Video', frame)
        
        # Write frame
        out.write(frame)
        frame_count += 1
        
        # Check for quit or duration
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break
        if elapsed >= duration:
            break
            
    # Cleanup
    cap.release()
    out.release()
    cv2.destroyAllWindows()
    
    # Print summary
    actual_duration = time.time() - start_time
    logger.info(f"\n✅ Recording complete!")
    logger.info(f"📊 Stats:")
    logger.info(f"- Duration: {actual_duration:.1f} seconds")
    logger.info(f"- Frames: {frame_count}")
    logger.info(f"- FPS: {frame_count/actual_duration:.1f}")
    logger.info(f"- Saved to: {output_file}")
    
    return str(output_file)

def main():
    import argparse
    parser = argparse.ArgumentParser(description='Record test videos for lost object detection')
    parser.add_argument('--duration', type=int, default=30,
                      help='Recording duration in seconds')
    parser.add_argument('--output', type=str, default='test_videos',
                      help='Output directory for videos')
    args = parser.parse_args()
    
    print("\n📝 Test Video Recording Guide:")
    print("1. Position your camera to capture the scene")
    print("2. Place objects in the frame (bags, laptops, etc.)")
    print("3. Have people walk by to test person detection")
    print("4. Leave objects stationary to test lost detection")
    print("\n💡 Tips:")
    print("- Ensure good lighting")
    print("- Keep camera stable")
    print("- Include both busy and quiet moments")
    print("- Test different types of objects")
    print("\nPress Enter to start recording...")
    input()
    
    video_file = record_video(args.duration, args.output)
    
    if video_file:
        print(f"\n🎯 To test this video with the detection system:")
        print(f"python test_video.py {video_file}")

if __name__ == '__main__':
    main() 


===== FILE: ./detection-service/run_detection.py =====
#!/usr/bin/env python3
import argparse
import os
from object_detector import ObjectDetector

def main():
    parser = argparse.ArgumentParser(description='Run object detection on video')
    parser.add_argument('--model', required=True, help='Path to model file (.pth or .pt)')
    parser.add_argument('--video', required=True, help='Path to video file or camera index')
    parser.add_argument('--output', help='Path to save output video (optional)')
    parser.add_argument('--no-db', action='store_true', help='Disable saving to database')
    args = parser.parse_args()

    # Validate inputs
    if not os.path.exists(args.model):
        print(f"Error: Model file not found: {args.model}")
        return

    if not args.video.isdigit() and not os.path.exists(args.video):
        print(f"Error: Video file not found: {args.video}")
        return

    try:
        # Initialize detector
        print(f"Loading model from: {args.model}")
        detector = ObjectDetector(args.model)
        
        # Process video
        video_path = int(args.video) if args.video.isdigit() else args.video
        print(f"Processing video: {video_path}")
        
        detector.process_video(
            video_path=video_path,
            output_path=args.output,
            save_to_db=not args.no_db
        )
        
        print("Processing complete!")
        
    except Exception as e:
        print(f"Error: {e}")
        return

if __name__ == "__main__":
    main() 


===== FILE: ./detection-service/start_detection.py =====
#!/usr/bin/env python3
"""
RECOVR Detection Service Starter
Starts the object detection service with proper configuration
"""

import os
import sys
import logging
from pathlib import Path
import argparse
from datetime import datetime

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler(f'detection_{datetime.now().strftime("%Y%m%d_%H%M%S")}.log')
    ]
)
logger = logging.getLogger(__name__)

def find_latest_model():
    """Find the latest model file in the current directory"""
    model_files = list(Path('.').glob('stable_model_epoch_*.pth'))
    if not model_files:
        logger.error("No model files found! Please place your model file in the detection-service directory.")
        return None
    return max(model_files, key=lambda p: p.stat().st_mtime)

def test_dependencies():
    """Test if all required dependencies are installed"""
    try:
        import cv2
        import torch
        import numpy
        import requests
        logger.info("✅ All dependencies are installed")
        return True
    except ImportError as e:
        logger.error(f"❌ Missing dependency: {e}")
        logger.info("Please run: pip install -r requirements.txt")
        return False

def test_camera():
    """Test if camera is accessible"""
    try:
        import cv2
        cap = cv2.VideoCapture(0)
        if not cap.isOpened():
            logger.error("❌ Camera not accessible")
            return False
        ret, frame = cap.read()
        cap.release()
        if ret and frame is not None:
            h, w = frame.shape[:2]
            logger.info(f"✅ Camera working! Resolution: {w}x{h}")
            return True
        else:
            logger.error("❌ Camera opened but can't read frames")
            return False
    except Exception as e:
        logger.error(f"❌ Camera test failed: {e}")
        return False

def main():
    """Main entry point"""
    parser = argparse.ArgumentParser(description='Start RECOVR detection service')
    parser.add_argument('--camera', type=int, default=0, help='Camera device index')
    parser.add_argument('--location', type=str, default='Main Entrance', help='Camera location')
    parser.add_argument('--model', type=str, help='Path to model file (optional)')
    parser.add_argument('--threshold', type=float, default=0.6, help='Detection confidence threshold')
    parser.add_argument('--abandon-time', type=int, default=300, help='Seconds before marking object as abandoned')
    args = parser.parse_args()

    # Find model file
    model_path = args.model or find_latest_model()
    if not model_path:
        return

    # Test setup
    if not test_dependencies() or not test_camera():
        return

    # Import and run detection service
    try:
        from object_detector import DetectionService
        
        config = {
            'model_path': str(model_path),
            'confidence_threshold': args.threshold,
            'abandon_threshold': args.abandon_time,
            'camera_location': args.location,
            'api_base_url': 'http://localhost:8080',
            'snapshots_dir': 'snapshots'
        }
        
        logger.info("\n🚀 Starting detection service...")
        logger.info("📸 Camera will open - Press 'q' to quit")
        logger.info(f"🔍 Objects stationary >{args.abandon_time} seconds will be marked as abandoned")
        logger.info("📡 Results will be sent to your Spring Boot backend")
        
        service = DetectionService(config)
        service.run_detection(camera_index=args.camera)
        
    except Exception as e:
        logger.error(f"❌ Error starting service: {e}")
        logger.info("Make sure your camera is available and backend is running")

if __name__ == '__main__':
    main() 


===== FILE: ./detection-service/test_custom_model.py =====



===== FILE: ./detection-service/test_model_load.py =====
import torch
import sys

def test_model_load(model_path):
    print(f"PyTorch version: {torch.__version__}")
    print(f"CUDA available: {torch.cuda.is_available()}")
    print(f"Device: {torch.device('cuda' if torch.cuda.is_available() else 'cpu')}")
    
    try:
        print(f"\nLoading model from: {model_path}")
        model = torch.load(model_path, map_location='cpu')
        print("Model loaded successfully!")
        
        if isinstance(model, dict):
            print("\nModel keys:", list(model.keys()))
            if 'model' in model:
                print("Found 'model' key in state dict")
                model = model['model']
        
        print("\nModel type:", type(model))
        if hasattr(model, 'state_dict'):
            print("Model has state_dict")
            print("State dict keys:", list(model.state_dict().keys()))
        
    except Exception as e:
        print(f"\nError loading model: {e}")
        raise

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: python test_model_load.py <model_path>")
        sys.exit(1)
        
    test_model_load(sys.argv[1]) 


===== FILE: ./detection-service/test_setup.py =====

        #!/usr/bin/env python3
"""
Test script to verify RECOVR Detection Service setup
"""

import sys
from pathlib import Path

def test_dependencies():
    """Test if all required Python packages are installed"""
    print("🔍 Testing Python dependencies...")
    
    required_packages = [
        ('cv2', 'OpenCV'),
        ('torch', 'PyTorch'),
        ('numpy', 'NumPy'),
        ('requests', 'Requests'),
        ('PIL', 'Pillow')
    ]
    
    missing = []
    for package, name in required_packages:
        try:
            __import__(package)
            print(f"✅ {name}")
        except ImportError:
            print(f"❌ {name} - MISSING")
            missing.append(name)
    
    if missing:
        print(f"\n❌ Missing packages: {', '.join(missing)}")
        print("Run: pip install -r requirements.txt")
        return False
    
    print("✅ All dependencies installed!")
    return True

def test_models():
    """Test if PyTorch models are available"""
    print("\n🔍 Testing PyTorch models...")
    
    models_dir = Path("../")
    model_files = list(models_dir.glob("stable_model_epoch_*.pth"))
    
    if not model_files:
        print("❌ No PyTorch models found!")
        print("Expected files like: stable_model_epoch_30.pth")
        print("Place your .pth model files in the project root")
        return False
    
    print(f"✅ Found {len(model_files)} model(s):")
    for model in sorted(model_files):
        size_mb = model.stat().st_size / (1024 * 1024)
        print(f"   📦 {model.name} ({size_mb:.1f} MB)")
    
    return True

def test_camera():
    """Test if camera is accessible"""
    print("\n🔍 Testing camera access...")
    
    try:
        import cv2
        cap = cv2.VideoCapture(0)
        
        if not cap.isOpened():
            print("❌ Camera not accessible")
            print("Make sure no other application is using the camera")
            return False
        
        ret, frame = cap.read()
        cap.release()
        
        if ret and frame is not None:
            h, w = frame.shape[:2]
            print(f"✅ Camera working! Resolution: {w}x{h}")
            return True
        else:
            print("❌ Camera opened but can't read frames")
            return False
            
    except Exception as e:
        print(f"❌ Camera test failed: {e}")
        return False

def test_backend_connection():
    """Test connection to Spring Boot backend"""
    print("\n🔍 Testing backend API connection...")
    
    try:
        import requests
        
        # Test if backend is running
        response = requests.get("http://localhost:8080/api/detection/abandoned", timeout=5)
        
        if response.status_code == 200:
            print("✅ Backend API accessible!")
            data = response.json()
            print(f"   📊 Found {len(data) if isinstance(data, list) else 0} abandoned objects")
            return True
        elif response.status_code == 401:
            print("⚠️ Backend running but requires authentication")
            print("   API is accessible but you may need to login")
            return True
        else:
            print(f"⚠️ Backend responded with status: {response.status_code}")
            return False
            
    except requests.exceptions.ConnectionError:
        print("❌ Cannot connect to backend")
        print("   Make sure Spring Boot is running on port 8080")
        print("   Start with: cd spring-backend && ./gradlew bootRun")
        return False
    except Exception as e:
        print(f"❌ Backend test failed: {e}")
        return False

def test_pytorch_functionality():
    """Test basic PyTorch functionality"""
    print("\n🔍 Testing PyTorch functionality...")
    
    try:
        import torch
        import numpy as np
        
        # Test basic operations
        device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
        print(f"   🖥️ Using device: {device}")
        
        # Test tensor operations
        x = torch.randn(1, 3, 224, 224).to(device)
        print(f"   ✅ Tensor operations working")
        
        # Test if we can load models
        models_dir = Path("../")
        model_files = list(models_dir.glob("stable_model_epoch_*.pth"))
        
        if model_files:
            latest_model = max(model_files, key=lambda x: int(x.stem.split('_')[-1]))
            try:
                model = torch.load(latest_model, map_location=device)
                print(f"   ✅ Model loading successful: {latest_model.name}")
                return True
            except Exception as e:
                print(f"   ⚠️ Model loading failed: {e}")
                print("   Model file might be corrupted or incompatible")
                return False
        else:
            print("   ⚠️ No models to test")
            return True
            
    except Exception as e:
        print(f"❌ PyTorch test failed: {e}")
        return False

def main():
    """Run all tests"""
    print("🎯 RECOVR Detection Service - Setup Test")
    print("=" * 50)
    
    tests = [
        ("Dependencies", test_dependencies),
        ("PyTorch Models", test_models),
        ("Camera Access", test_camera),
        ("Backend Connection", test_backend_connection),
        ("PyTorch Functionality", test_pytorch_functionality)
    ]
    
    results = []
    for test_name, test_func in tests:
        success = test_func()
        results.append((test_name, success))
    
    print("\n" + "=" * 50)
    print("📊 TEST RESULTS")
    print("=" * 50)
    
    all_passed = True
    for test_name, success in results:
        status = "✅ PASS" if success else "❌ FAIL"
        print(f"{status} {test_name}")
        if not success:
            all_passed = False
    
    print("\n" + "=" * 50)
    if all_passed:
        print("🎉 ALL TESTS PASSED!")
        print("Your detection service is ready to run!")
        print("\nNext steps:")
        print("1. Start backend: cd spring-backend && ./gradlew bootRun")
        print("2. Start detection: python start_detection.py")
    else:
        print("⚠️ SOME TESTS FAILED")
        print("Fix the issues above before running the detection service")
    
    return all_passed

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 


===== FILE: ./detection-service/test_simple.py =====
with open('test_created.txt', 'w') as f:
    f.write('This file was created by Python\n') 


===== FILE: ./detection-service/test_stable_model.py =====



===== FILE: ./detection-service/test_video.py =====
#!/usr/bin/env python3
"""
Test object detection on a video file
This script will process a video and detect lost objects
"""

import cv2
import torch
from pathlib import Path
import logging
from datetime import datetime
import json
import requests
from object_detector import DetectionService

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class VideoTester:
    def __init__(self, video_path, model_path='stable_model_epoch_30.pth'):
        self.video_path = video_path
        self.model_path = model_path
        
        # Adjust parameters for short videos
        self.config = {
            'model_path': model_path,
            'confidence_threshold': 0.4,  # Lower confidence threshold for testing
            'abandon_threshold': 10,      # Reduced to 10 frames for short videos
            'camera_location': 'Test Video',
            'api_base_url': 'http://localhost:8080',
            'snapshots_dir': 'snapshots',
            'short_video_mode': True      # Enable short video mode
        }
        
        # Create snapshots directory
        Path(self.config['snapshots_dir']).mkdir(exist_ok=True)
        
        # Initialize detection service
        self.service = DetectionService(self.config)
        
        # Get video properties
        cap = cv2.VideoCapture(video_path)
        self.fps = cap.get(cv2.CAP_PROP_FPS)
        self.total_frames = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))
        self.duration = self.total_frames / self.fps
        cap.release()
        
        logger.info(f"📊 Video Info:")
        logger.info(f"- Duration: {self.duration:.1f} seconds")
        logger.info(f"- FPS: {self.fps:.1f}")
        logger.info(f"- Total Frames: {self.total_frames}")
        
    def process_video(self):
        """Process the video file and detect objects"""
        if not Path(self.video_path).exists():
            logger.error(f"❌ Video file not found: {self.video_path}")
            return
            
        logger.info(f"🎥 Processing video: {self.video_path}")
        cap = cv2.VideoCapture(self.video_path)
        
        if not cap.isOpened():
            logger.error("❌ Could not open video file")
            return
            
        frame_count = 0
        detections_per_frame = []
        
        while cap.isOpened():
            ret, frame = cap.read()
            if not ret:
                break
                
            # Process every frame for short videos
            # Run detection
            results = self.service.process_frame(frame)
            
            if results and 'detections' in results:
                detections_per_frame.append(len(results['detections']))
                
                # Draw results on frame
                for det in results['detections']:
                    x1, y1, x2, y2 = map(int, det['bbox'])
                    label = f"{det['class']} ({det['confidence']:.2f})"
                    
                    # Draw bounding box
                    cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 255, 0), 2)
                    cv2.putText(frame, label, (x1, y1-10),
                              cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)
            
            # Show frame with detection info
            elapsed_time = frame_count / self.fps
            cv2.putText(frame, f"Time: {elapsed_time:.1f}s", (10, 30),
                       cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)
            cv2.putText(frame, f"Frame: {frame_count}/{self.total_frames}", (10, 60),
                       cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)
            
            # Show frame
            cv2.imshow('Lost Item Detection', frame)
            
            frame_count += 1
            
            # Press 'q' to quit
            if cv2.waitKey(1) & 0xFF == ord('q'):
                break
                
        cap.release()
        cv2.destroyAllWindows()
        
        # Print detection summary
        if detections_per_frame:
            avg_detections = sum(detections_per_frame) / len(detections_per_frame)
            logger.info("\n📊 Detection Summary:")
            logger.info(f"- Average detections per frame: {avg_detections:.1f}")
            logger.info(f"- Total frames processed: {frame_count}")
            logger.info(f"- Total detections: {sum(detections_per_frame)}")
            
            # Check if any objects were detected as lost
            if hasattr(self.service, 'lost_objects') and self.service.lost_objects:
                logger.info("\n🚨 Lost Objects Detected:")
                for obj_id in self.service.lost_objects:
                    obj = self.service.tracked_objects.get(obj_id, {})
                    if obj:
                        logger.info(f"- {obj.get('class', 'Unknown')} at {obj.get('location', 'Unknown location')}")
            else:
                logger.info("\n✅ No objects were detected as lost in this short video")
                logger.info("💡 Tip: For better testing, try recording a longer video (30+ seconds)")
                logger.info("      or place objects in the frame for longer periods")
        
        logger.info("\n✅ Video processing complete!")
        logger.info("💾 Check the snapshots directory for any detected lost objects")

def main():
    import argparse
    parser = argparse.ArgumentParser(description='Test object detection on a video file')
    parser.add_argument('video_path', help='Path to the video file')
    parser.add_argument('--model', default='stable_model_epoch_30.pth',
                      help='Path to the model file')
    args = parser.parse_args()
    
    tester = VideoTester(args.video_path, args.model)
    tester.process_video()

if __name__ == '__main__':
    main() 


===== FILE: ./detection-service/test_video_read.py =====
import cv2
import os
import sys
from datetime import datetime

# Create a log file with timestamp
log_file = f"video_test_{datetime.now().strftime('%Y%m%d_%H%M%S')}.log"

def log_message(message):
    with open(log_file, 'a') as f:
        f.write(f"{datetime.now()}: {message}\n")

log_message("Script started")
log_message(f"Python version: {sys.version}")
log_message(f"OpenCV version: {cv2.__version__}")

if len(sys.argv) < 2:
    log_message("Error: No video path provided")
    sys.exit(1)

video_path = sys.argv[1]
log_message(f"Attempting to open video: {video_path}")
log_message(f"File exists: {os.path.exists(video_path)}")

cap = cv2.VideoCapture(video_path)
if not cap.isOpened():
    log_message("Failed to open video")
    sys.exit(1)

log_message("Successfully opened video")

frame_count = 0
while True:
    ret, frame = cap.read()
    if not ret:
        log_message(f"End of video or read error after {frame_count} frames")
        break
        
    frame_count += 1
    if frame_count % 30 == 0:
        log_message(f"Read {frame_count} frames")
    
    # Try to display the frame
    cv2.imshow('Video Test', frame)
    if cv2.waitKey(1) & 0xFF == ord('q'):
        log_message("User pressed 'q' to quit")
        break

cap.release()
cv2.destroyAllWindows()
log_message(f"Finished. Total frames read: {frame_count}")



===== FILE: ./detection-service/test_yolo_load.py =====



===== FILE: ./detection-service/train_model.py =====
#!/usr/bin/env python3
"""
Train a YOLOv8 model for lost item detection
This will create a model that can detect common lost items like bags, phones, etc.
"""

from ultralytics import YOLO
import yaml
import os
from pathlib import Path

# Define the classes we want to detect
CLASSES = [
    'backpack', 'handbag', 'suitcase',  # Bags
    'cell phone', 'laptop', 'keyboard', 'mouse',  # Electronics
    'umbrella', 'book', 'bottle',  # Common items
    'person'  # To help with context
]

def create_dataset_yaml():
    """Create dataset.yaml for YOLO training"""
    data = {
        'path': str(Path.cwd() / 'dataset'),
        'train': 'images/train',
        'val': 'images/val',
        'names': {i: name for i, name in enumerate(CLASSES)}
    }
    
    with open('dataset.yaml', 'w') as f:
        yaml.dump(data, f)
    
    return 'dataset.yaml'

def download_pretrained():
    """Download a pretrained YOLOv8 model"""
    model = YOLO('yolov8n.pt')  # Load smallest YOLOv8 model
    return model

def main():
    print("🚀 Setting up lost item detection model...")
    
    # 1. Create dataset structure
    os.makedirs('dataset/images/train', exist_ok=True)
    os.makedirs('dataset/images/val', exist_ok=True)
    os.makedirs('dataset/labels/train', exist_ok=True)
    os.makedirs('dataset/labels/val', exist_ok=True)
    
    # 2. Create dataset.yaml
    yaml_path = create_dataset_yaml()
    print("✅ Created dataset configuration")
    
    # 3. Download pretrained model
    model = download_pretrained()
    print("✅ Downloaded pretrained YOLOv8 model")
    
    # 4. Fine-tune the model
    print("\n🎯 Starting model training...")
    print("This will take a while. The model will be saved as 'stable_model_epoch_30.pt'")
    
    results = model.train(
        data=yaml_path,
        epochs=30,
        imgsz=640,
        batch=16,
        name='lost_items_model',
        patience=10,
        save=True
    )
    
    # 5. Save the final model
    model.export(format='torchscript')
    os.rename('lost_items_model/weights/best.torchscript', 'stable_model_epoch_30.pth')
    print("\n✅ Training complete! Model saved as 'stable_model_epoch_30.pth'")
    print("\nYou can now use this model with start_detection.py")

if __name__ == '__main__':
    main() 


===== FILE: ./hooks/use-mobile.tsx =====
import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}



===== FILE: ./hooks/use-toast.ts =====
"use client"

// Inspired by react-hot-toast library
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }



===== FILE: ./lib/ai/feature-extraction.ts =====
import * as tf from '@tensorflow/tfjs';

// Load the MobileNet model for feature extraction
let model: tf.LayersModel | null = null;

/**
 * Initialize the model if not already loaded
 */
async function loadModelIfNeeded() {
  if (!model) {
    try {
      // Load MobileNet model without the top (classification) layer
      model = await tf.loadLayersModel('https://storage.googleapis.com/tfjs-models/tfjs/mobilenet_v1_1.0_224/model.json');
      
      // We'll use the layer just before the softmax layer for feature extraction
      const layer = model.getLayer('conv_pw_13_relu');
      model = tf.model({
        inputs: model.inputs,
        outputs: layer.output
      });
      
      console.log('MobileNet model loaded for feature extraction');
    } catch (error) {
      console.error('Error loading MobileNet model:', error);
      throw new Error('Failed to load feature extraction model');
    }
  }
  return model;
}

/**
 * Extract features from an image URL
 * @param imageUrl - URL of the image to process
 * @returns Feature vector as array
 */
export async function extractImageFeatures(imageUrl: string): Promise<number[]> {
  // Skip feature extraction in server environments without TensorFlow.js support
  if (typeof window === 'undefined') {
    console.log('Server-side feature extraction not supported, returning mock features');
    // Return mock features vector (empty array is fine for now)
    return Array(10).fill(0).map(() => Math.random()); // Return 10 random values as mock features
  }
  
  try {
    const model = await loadModelIfNeeded();
    
    // Load and preprocess the image
    const img = new Image();
    img.crossOrigin = 'anonymous';
    
    // Wait for the image to load
    await new Promise<void>((resolve, reject) => {
      img.onload = () => resolve();
      img.onerror = (e) => {
        console.error('Image load error:', e);
        reject(new Error('Failed to load image'));
      }
      img.src = imageUrl;
    });
    
    // Preprocess image for MobileNet
    const tensor = tf.browser.fromPixels(img)
      .resizeNearestNeighbor([224, 224])
      .toFloat()
      .div(tf.scalar(127.5))
      .sub(tf.scalar(1))
      .expandDims();
    
    // Get features
    const features = model.predict(tensor) as tf.Tensor;
    
    // Convert to array format for storage
    const featuresData = await features.data();
    const featuresArray = Array.from(featuresData);
    
    // Clean up tensors
    tensor.dispose();
    features.dispose();
    
    return featuresArray;
  } catch (error) {
    console.error('Feature extraction failed:', error);
    // Return empty array on error
    return Array(10).fill(0).map(() => Math.random()); // Return mock features on error
  }
}

/**
 * Calculate similarity between two feature vectors (cosine similarity)
 * @param features1 - First feature vector
 * @param features2 - Second feature vector
 * @returns Similarity score (0-100)
 */
export function calculateSimilarity(features1: number[], features2: number[]): number {
  if (!features1.length || !features2.length) {
    return 0;
  }
  
  try {
    // Compute cosine similarity between the feature vectors
    const dotProduct = features1.reduce((sum, value, i) => sum + value * features2[i], 0);
    
    const magnitude1 = Math.sqrt(features1.reduce((sum, value) => sum + value * value, 0));
    const magnitude2 = Math.sqrt(features2.reduce((sum, value) => sum + value * value, 0));
    
    if (magnitude1 === 0 || magnitude2 === 0) {
      return 0;
    }
    
    // Cosine similarity converted to percentage
    const similarity = (dotProduct / (magnitude1 * magnitude2));
    return Math.max(0, Math.min(100, Math.round(similarity * 100)));
  } catch (error) {
    console.error('Error calculating similarity:', error);
    return 0;
  }
} 


===== FILE: ./lib/auth-options.ts =====
import { AuthOptions } from "next-auth"
import CredentialsProvider from "next-auth/providers/credentials"
import { JWT } from "next-auth/jwt"
import bcrypt from "bcryptjs"

// Add custom types to extend NextAuth types
declare module "next-auth" {
  interface User {
    id: string
    role?: string
  }
  
  interface Session {
    user: {
      id: string
      name?: string | null
      email?: string | null
      image?: string | null
      role?: string
    }
  }
}

declare module "next-auth/jwt" {
  interface JWT {
    id: string
    role?: string
  }
}

// Mock user database for development
const MOCK_USERS = [
  {
    id: "user-1",
    name: "Test User",
    email: "test@example.com",
    password: bcrypt.hashSync("password123", 10),
    role: "user"
  },
  {
    id: "admin-1",
    name: "Admin User",
    email: "admin@example.com",
    password: bcrypt.hashSync("admin123", 10),
    role: "admin"
  }
];

// This is a simplified version of the auth options with mock functionality
export const authOptions: AuthOptions = {
  providers: [
    CredentialsProvider({
      name: "credentials",
      credentials: {
        email: { label: "Email", type: "email" },
        password: { label: "Password", type: "password" },
      },
      async authorize(credentials) {
        if (!credentials?.email || !credentials?.password) {
          return null
        }

        try {
          // For development, use mock user database
          const user = MOCK_USERS.find(u => u.email === credentials.email);
          
          if (!user) {
            console.log("User not found");
            return null;
          }
          
          // Verify password
          const isPasswordValid = await bcrypt.compare(credentials.password, user.password);
          
          if (!isPasswordValid) {
            console.log("Invalid password");
            return null;
          }
          
          return {
            id: user.id,
            name: user.name,
            email: user.email,
            role: user.role,
            image: null
          };
        } catch (error) {
          console.error("Auth error:", error);
          return null;
        }
      },
    }),
  ],
  pages: {
    signIn: "/auth/signin",
    newUser: "/auth/register",
  },
  session: {
    strategy: "jwt",
  },
  callbacks: {
    async jwt({ token, user }) {
      if (user) {
        token.id = user.id
        token.role = user.role
      }
      return token
    },
    async session({ session, token }) {
      if (session.user) {
        session.user.id = token.id
        session.user.role = token.role
      }
      return session
    },
  },
  // This is a development secret and should be replaced in production
  secret: process.env.NEXTAUTH_SECRET || "ThisIsATemporarySecretForDevelopmentOnly",
  debug: process.env.NODE_ENV === "development",
} 


===== FILE: ./lib/cloudinary.ts =====
import { v2 as cloudinary } from 'cloudinary';

// Configure Cloudinary
const cloudinaryConfig = {
  cloud_name: process.env.CLOUDINARY_CLOUD_NAME || '',
  api_key: process.env.CLOUDINARY_API_KEY || '',
  api_secret: process.env.CLOUDINARY_API_SECRET || '',
};

cloudinary.config(cloudinaryConfig);

// Check if Cloudinary is properly configured
const isCloudinaryConfigured = () => {
  return !!(
    cloudinaryConfig.cloud_name &&
    cloudinaryConfig.api_key &&
    cloudinaryConfig.api_secret
  );
};

/**
 * Upload an image to Cloudinary
 * @param imageBuffer - The image buffer to upload
 * @param folder - Optional folder to store the image in
 * @returns Cloudinary upload response
 */
export async function uploadImage(imageBuffer: Buffer, folder = 'lost-found-system') {
  try {
    // If Cloudinary isn't configured, return a mock response
    if (!isCloudinaryConfigured()) {
      console.warn('Cloudinary is not configured. Using mock response.');
      return {
        url: `/mock-image-${Date.now()}.jpg`,
        publicId: `mock-id-${Date.now()}`,
        width: 800,
        height: 600,
      };
    }
    
    // Convert buffer to base64
    const base64Image = `data:image/jpeg;base64,${imageBuffer.toString('base64')}`;
    
    // Upload to Cloudinary
    const result = await cloudinary.uploader.upload(base64Image, {
      folder,
      resource_type: 'image',
      transformation: [
        { width: 800, crop: 'limit' }, // Resize for better performance
      ],
    });
    
    return {
      url: result.secure_url,
      publicId: result.public_id,
      width: result.width,
      height: result.height,
    };
  } catch (error) {
    console.error('Error uploading to Cloudinary:', error);
    throw new Error('Image upload failed');
  }
}

/**
 * Delete an image from Cloudinary
 * @param publicId - The public ID of the image to delete
 */
export async function deleteImage(publicId: string) {
  try {
    // If Cloudinary isn't configured, return success
    if (!isCloudinaryConfigured()) {
      console.warn('Cloudinary is not configured. Mock deletion successful.');
      return { success: true };
    }
    
    await cloudinary.uploader.destroy(publicId);
    return { success: true };
  } catch (error) {
    console.error('Error deleting from Cloudinary:', error);
    throw new Error('Image deletion failed');
  }
}

export default cloudinary; 


===== FILE: ./lib/models/LostObject.ts =====
import mongoose, { Schema, Document } from 'mongoose';

export interface Coordinates {
  x: number;
  y: number;
  lat?: number;
  lng?: number;
}

export interface ILostObject extends Document {
  name: string;
  location: string;
  date: Date;
  time: string;
  image: string;
  category: string;
  description: string;
  status: 'found' | 'claimed' | 'missing';
  coordinates: Coordinates;
  reporter?: string;
  claimedBy?: string;
  createdAt: Date;
  updatedAt: Date;
  features?: Record<string, any>; // For AI feature vectors
}

const LostObjectSchema = new Schema<ILostObject>(
  {
    name: { type: String, required: true },
    location: { type: String, required: true },
    date: { type: Date, required: true, default: Date.now },
    time: { type: String, required: true },
    image: { type: String, required: true },
    category: { 
      type: String, 
      required: true,
      enum: ['bag', 'electronics', 'accessory', 'clothing', 'document', 'other']
    },
    description: { type: String, required: true },
    status: { 
      type: String, 
      required: true, 
      enum: ['found', 'claimed', 'missing'],
      default: 'found'
    },
    coordinates: {
      x: { type: Number, required: true },
      y: { type: Number, required: true },
      lat: { type: Number },
      lng: { type: Number }
    },
    reporter: { type: Schema.Types.ObjectId, ref: 'User' },
    claimedBy: { type: Schema.Types.ObjectId, ref: 'User' },
    features: { type: Schema.Types.Mixed }
  },
  { timestamps: true }
);

// Add text search index
LostObjectSchema.index({ 
  name: 'text', 
  description: 'text', 
  location: 'text', 
  category: 'text' 
});

export default mongoose.models.LostObject || 
  mongoose.model<ILostObject>('LostObject', LostObjectSchema); 


===== FILE: ./lib/models/User.ts =====
import mongoose, { Schema, Document } from 'mongoose';

export interface IUser extends Document {
  name: string;
  email: string;
  image?: string;
  password?: string; // Hashed password
  role: 'user' | 'admin';
  emailVerified?: Date;
  createdAt: Date;
  updatedAt: Date;
  contactInformation?: string;
}

const UserSchema = new Schema<IUser>(
  {
    name: { type: String, required: true },
    email: { type: String, required: true, unique: true },
    image: { type: String },
    password: { type: String },
    role: { type: String, required: true, enum: ['user', 'admin'], default: 'user' },
    emailVerified: { type: Date },
    contactInformation: { type: String }
  },
  { timestamps: true }
);

export default mongoose.models.User || 
  mongoose.model<IUser>('User', UserSchema); 


===== FILE: ./lib/mongodb-adapter.ts =====
import { MongoClient } from "mongodb";

const uri = process.env.MONGODB_URI || "mongodb://localhost:27017/lost-found-system";
const options = {};

let client: MongoClient;
let clientPromise: Promise<MongoClient>;

if (process.env.NODE_ENV === "development") {
  // In development mode, use a global variable to preserve the value
  // across module reloads caused by HMR (Hot Module Replacement).
  let globalWithMongo = global as typeof globalThis & {
    _mongoClientPromise?: Promise<MongoClient>;
  };

  if (!globalWithMongo._mongoClientPromise) {
    client = new MongoClient(uri, options);
    globalWithMongo._mongoClientPromise = client.connect();
  }
  clientPromise = globalWithMongo._mongoClientPromise;
} else {
  // In production mode, it's best to not use a global variable.
  client = new MongoClient(uri, options);
  clientPromise = client.connect();
}

// Export a module-scoped MongoClient promise
export default clientPromise; 


===== FILE: ./lib/mongodb.ts =====
import mongoose from 'mongoose';

const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/lost-found-system';
let cachedConnection: typeof mongoose | null = null;

export async function connectToDatabase() {
  // If we're already connected, return the existing connection
  if (cachedConnection) {
    return cachedConnection;
  }

  // Check if we're in a test or mock environment where we should return a mock connection
  if (process.env.NODE_ENV === 'test' || process.env.MOCK_DB === 'true') {
    console.log('Using mock MongoDB connection');
    return mongoose;
  }

  try {
    // For local development without MongoDB, provide mock functionality
    if (!MONGODB_URI || MONGODB_URI === 'mongodb://localhost:27017/lost-found-system') {
      console.warn('No MongoDB URI provided or using default local URI. Some functionality may be limited.');
      
      // If mongoose is not connected and we're in development, we'll proceed but with warnings
      if (process.env.NODE_ENV === 'development') {
        cachedConnection = mongoose;
        return mongoose;
      }
    }
    
    const connection = await mongoose.connect(MONGODB_URI);
    
    cachedConnection = connection;
    console.log('MongoDB connected successfully');
    return connection;
  } catch (error) {
    console.error('MongoDB connection error:', error);
    
    // In development, allow the app to continue even if DB connection fails
    if (process.env.NODE_ENV === 'development') {
      console.warn('Running with limited functionality due to MongoDB connection failure.');
      cachedConnection = mongoose;
      return mongoose;
    }
    
    throw error;
  }
}

export default connectToDatabase; 


===== FILE: ./lib/utils.ts =====
import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

export function formatDate(input: string | number | Date): string {
  const date = new Date(input)
  return date.toLocaleDateString("en-US", {
    month: "long",
    day: "numeric",
    year: "numeric",
  })
}

export function formatDateTime(input: string | number | Date): string {
  const date = new Date(input)
  return date.toLocaleString("en-US", {
    month: "long",
    day: "numeric",
    year: "numeric",
    hour: "numeric",
    minute: "numeric",
    hour12: true,
  })
}

export function truncate(str: string, length: number): string {
  if (!str || str.length <= length) return str
  return `${str.slice(0, length)}...`
}

export function getInitials(name: string): string {
  const parts = name.split(" ")
  let initials = ""
  parts.forEach(part => {
    if (part.length > 0) {
      initials += part[0].toUpperCase()
    }
  })
  return initials.slice(0, 2)
}



===== FILE: ./next-env.d.ts =====
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/api-reference/config/typescript for more information.



===== FILE: ./object_detector.py =====
#!/usr/bin/env python3
"""
RECOVR Lost Object Detector
Detects objects that have been left unattended for too long
"""

import cv2
import torch
import torchvision
from torchvision.models.detection import fasterrcnn_resnet50_fpn
from torchvision.models.detection.faster_rcnn import FastRCNNPredictor
import numpy as np
from pathlib import Path
import logging
from datetime import datetime
import json
import requests
from collections import defaultdict
import time
import os
from PIL import Image
import io
import uuid
import argparse

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class RecovRObjectDetector:
    def __init__(self, model_path, num_classes=29, device=None, api_base_url="http://localhost:8080/api"):
        self.device = device or ('cuda' if torch.cuda.is_available() else 'cpu')
        self.api_base_url = api_base_url
        print(f"Using device: {self.device}")
        
        # Initialize model architecture
        self.model = fasterrcnn_resnet50_fpn(pretrained=False)
        
        # Modify the classifier for your number of classes
        in_features = self.model.roi_heads.box_predictor.cls_score.in_features
        self.model.roi_heads.box_predictor = FastRCNNPredictor(in_features, num_classes)
        
        # Load state dict
        try:
            state_dict = torch.load(model_path, map_location=self.device)
            if isinstance(state_dict, dict) and 'model' in state_dict:
                state_dict = state_dict['model']
            self.model.load_state_dict(state_dict)
            self.model.to(self.device)
            self.model.eval()
            print(f"Model loaded successfully from {model_path}")
        except Exception as e:
            print(f"Error loading model: {e}")
            raise
        
        # Initialize video capture
        self.cap = None
        
        # Map model classes to ItemCategory enum values
        self.class_to_category = {
            0: 'MISCELLANEOUS',  # background -> miscellaneous
            1: 'ELECTRONICS', 2: 'ELECTRONICS', 3: 'ELECTRONICS',
            4: 'BAGS', 5: 'BAGS', 6: 'BAGS',
            7: 'CLOTHING', 8: 'CLOTHING', 9: 'CLOTHING',
            10: 'ACCESSORIES', 11: 'ACCESSORIES', 12: 'ACCESSORIES',
            13: 'DOCUMENTS', 14: 'DOCUMENTS',
            15: 'KEYS', 16: 'KEYS',
            17: 'JEWELRY', 18: 'JEWELRY',
            19: 'TOYS', 20: 'TOYS', 21: 'TOYS',
            22: 'BOOKS', 23: 'BOOKS',
            # Default to MISCELLANEOUS for any other classes
        }
        
        # Initialize detection session
        self.session_id = None
        self.camera_id = "default_camera"
        self.camera_location = "Default Location"
        
        # Object tracking
        self.tracked_objects = {}
        self.next_tracking_id = 1
        
    def start_detection_session(self, camera_id="default_camera", camera_location="Default Location"):
        """Start a detection session with the backend"""
        try:
            url = f"{self.api_base_url}/detection/sessions/start"
            params = {
                'cameraId': camera_id,
                'cameraLocation': camera_location,
                'modelVersion': 'pytorch_fasterrcnn_v1'
            }
            
            response = requests.post(url, params=params)
            
            if response.status_code == 200:
                session_data = response.json()
                self.session_id = session_data.get('sessionId')
                self.camera_id = camera_id
                self.camera_location = camera_location
                print(f"Detection session started: {self.session_id}")
                return True
            else:
                print(f"Failed to start detection session: {response.status_code}")
                print(f"Response: {response.text}")
                return False
                
        except Exception as e:
            print(f"Error starting detection session: {e}")
            return False
    
    def end_detection_session(self):
        """End the current detection session"""
        if not self.session_id:
            return
            
        try:
            url = f"{self.api_base_url}/detection/sessions/{self.session_id}/end"
            response = requests.post(url)
            
            if response.status_code == 200:
                print(f"Detection session ended: {self.session_id}")
            else:
                print(f"Failed to end detection session: {response.status_code}")
                
        except Exception as e:
            print(f"Error ending detection session: {e}")
        
        finally:
            self.session_id = None
    
    def start_video(self, video_path):
        """Start video capture from file or camera"""
        if self.cap is not None:
            self.cap.release()
            
        if isinstance(video_path, int):  # Camera index
            self.cap = cv2.VideoCapture(video_path)
        else:  # Video file
            self.cap = cv2.VideoCapture(video_path)
            
        if not self.cap.isOpened():
            raise ValueError(f"Could not open video source: {video_path}")
            
        return self.cap.get(cv2.CAP_PROP_FRAME_WIDTH), self.cap.get(cv2.CAP_PROP_FRAME_HEIGHT)
    
    def process_frame(self, frame):
        """Process a single frame and return detections"""
        if frame is None:
            return []
            
        # Convert frame to RGB and normalize
        frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        frame_tensor = torch.from_numpy(frame_rgb).permute(2, 0, 1).float() / 255.0
        frame_tensor = frame_tensor.unsqueeze(0).to(self.device)
        
        # Run inference
        with torch.no_grad():
            predictions = self.model(frame_tensor)
            
        # Process predictions
        detections = []
        if isinstance(predictions, list):
            predictions = predictions[0]  # Take first image's predictions
            
        boxes = predictions['boxes'].cpu().numpy()
        scores = predictions['scores'].cpu().numpy()
        labels = predictions['labels'].cpu().numpy()
        
        # Filter by confidence
        confidence_threshold = 0.5
        mask = scores > confidence_threshold
        
        for box, score, label in zip(boxes[mask], scores[mask], labels[mask]):
            x1, y1, x2, y2 = map(int, box)
            
            # Assign tracking ID (simple approach - in production you'd use a proper tracker)
            tracking_id = self._get_tracking_id(box)
            
            # Map class to category
            category = self.class_to_category.get(label, 'MISCELLANEOUS')
            
            detection = {
                'tracking_id': tracking_id,
                'bbox': [x1, y1, x2, y2],
                'score': float(score),
                'label': int(label),
                'category': category,
                'timestamp': datetime.now().isoformat()
            }
            
            detections.append(detection)
            
        return detections
    
    def _get_tracking_id(self, box):
        """Simple tracking ID assignment based on box position"""
        # This is a simplified approach - in production, use a proper multi-object tracker
        x1, y1, x2, y2 = box
        center_x, center_y = (x1 + x2) / 2, (y1 + y2) / 2
        
        # Find closest existing tracked object
        min_distance = float('inf')
        closest_id = None
        
        for track_id, (prev_x, prev_y) in self.tracked_objects.items():
            distance = np.sqrt((center_x - prev_x)**2 + (center_y - prev_y)**2)
            if distance < min_distance and distance < 50:  # Threshold for same object
                min_distance = distance
                closest_id = track_id
        
        if closest_id is not None:
            # Update position
            self.tracked_objects[closest_id] = (center_x, center_y)
            return closest_id
        else:
            # New object
            new_id = f"track_{self.next_tracking_id}"
            self.tracked_objects[new_id] = (center_x, center_y)
            self.next_tracking_id += 1
            return new_id
    
    def save_detection_to_backend(self, detection, frame):
        """Save detection to backend using the detection API"""
        if not self.session_id:
            print("No active detection session")
            return False
            
        try:
            # First, upload the cropped image
            x1, y1, x2, y2 = detection['bbox']
            crop = frame[y1:y2, x1:x2]
            
            # Save crop temporarily
            temp_filename = f"temp_crop_{detection['tracking_id']}.jpg"
            cv2.imwrite(temp_filename, crop)
            
            # Upload file
            snapshot_url = self._upload_file(temp_filename)
            
            # Clean up temp file
            if os.path.exists(temp_filename):
                os.remove(temp_filename)
            
            if not snapshot_url:
                print("Failed to upload detection image")
                return False
            
            # Send detection data to backend
            url = f"{self.api_base_url}/detection/process"
            
            detection_data = {
                'sessionId': self.session_id,
                'trackingId': detection['tracking_id'],
                'category': detection['category'],
                'confidence': detection['score'],
                'x': detection['bbox'][0],
                'y': detection['bbox'][1],
                'width': detection['bbox'][2] - detection['bbox'][0],
                'height': detection['bbox'][3] - detection['bbox'][1],
                'snapshotUrl': snapshot_url
            }
            
            response = requests.post(url, json=detection_data, headers={'Content-Type': 'application/json'})
            
            if response.status_code == 200:
                print(f"Detection saved: {detection['tracking_id']}")
                return True
            else:
                print(f"Failed to save detection: {response.status_code}")
                print(f"Response: {response.text}")
                return False
                
        except Exception as e:
            print(f"Error saving detection: {e}")
            return False
    
    def _upload_file(self, file_path):
        """Upload file to backend and return URL"""
        try:
            url = f"{self.api_base_url}/files/upload"
            
            with open(file_path, 'rb') as f:
                files = {'file': (os.path.basename(file_path), f, 'image/jpeg')}
                response = requests.post(url, files=files)
            
            if response.status_code == 200:
                # The response should be the file URL
                return response.text.strip('"')  # Remove quotes if present
            else:
                print(f"File upload failed: {response.status_code}")
                return None
                
        except Exception as e:
            print(f"Error uploading file: {e}")
            return None
    
    def process_video(self, video_path, output_path=None, save_to_backend=True):
        """Process entire video and optionally save results"""
        # Start detection session
        if save_to_backend and not self.start_detection_session():
            print("Failed to start detection session, continuing without backend integration")
            save_to_backend = False
        
        try:
            width, height = map(int, self.start_video(video_path))
            print(f"Processing video: {video_path}")
            print(f"Resolution: {width}x{height}")
            
            frame_count = 0
            all_detections = []
            out = None
            
            while True:
                ret, frame = self.cap.read()
                if not ret:
                    break
                    
                frame_count += 1
                if frame_count % 30 == 0:
                    print(f"Processing frame {frame_count}")
                
                # Process frame
                detections = self.process_frame(frame)
                if detections:
                    all_detections.extend(detections)
                    print(f"Found {len(detections)} objects in frame {frame_count}")
                    
                    # Save to backend if enabled
                    if save_to_backend:
                        for detection in detections:
                            self.save_detection_to_backend(detection, frame)
                
                # Display frame with detections (optional)
                if output_path:
                    frame_with_boxes = self._draw_detections(frame.copy(), detections)
                    if frame_count == 1:
                        fourcc = cv2.VideoWriter_fourcc(*'mp4v')
                        out = cv2.VideoWriter(output_path, fourcc, 30.0, (int(width), int(height)))
                    if out is not None:
                        out.write(frame_with_boxes)
            
            if output_path and out is not None:
                out.release()
                
            self.cap.release()
            print(f"Processed {frame_count} frames. Found {len(all_detections)} objects.")
            return all_detections
            
        except Exception as e:
            print(f"Error processing video: {e}")
            if self.cap is not None:
                self.cap.release()
            if 'out' in locals() and out is not None:
                out.release()
            raise
        finally:
            # End detection session
            if save_to_backend:
                self.end_detection_session()
    
    def _draw_detections(self, frame, detections):
        """Draw bounding boxes on frame"""
        for det in detections:
            x1, y1, x2, y2 = det['bbox']
            score = det['score']
            category = det['category']
            tracking_id = det['tracking_id']
            
            # Draw box
            cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 255, 0), 2)
            
            # Draw label
            label_text = f"{category}: {score:.2f} [{tracking_id}]"
            cv2.putText(frame, label_text, (x1, y1-10), 
                       cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)
        
        return frame

# Backwards compatibility
ObjectDetector = RecovRObjectDetector

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='RECOVR Object Detection')
    parser.add_argument('--model', type=str, required=True, help='Path to the model file')
    parser.add_argument('--video', type=str, default='0', help='Video source (file path or camera index)')
    parser.add_argument('--output', type=str, help='Output video file path (optional)')
    parser.add_argument('--no-backend', action='store_true', help='Disable backend integration')
    parser.add_argument('--camera-id', type=str, default='default_camera', help='Camera ID for backend')
    parser.add_argument('--camera-location', type=str, default='Default Location', help='Camera location for backend')
    
    args = parser.parse_args()
    
    # Convert video argument to int if it's a camera index
    try:
        video_path = int(args.video)
    except ValueError:
        video_path = args.video
    
    detector = RecovRObjectDetector(args.model, num_classes=29)
    detector.process_video(
        video_path, 
        output_path=args.output,
        save_to_backend=not args.no_backend
    )


===== FILE: ./scripts/additional-placeholders.js =====
const fs = require('fs');
const path = require('path');

const publicDir = path.join(__dirname, '../public');

// Additional SVG placeholders needed
const additionalSvgs = [
  {
    name: 'matching-step.jpg', // Used in matching tab
    title: 'AI Matching Process',
    color: '#10b981'
  },
  {
    name: 'report-step.jpg', // Used in report tab
    title: 'Report Your Lost Item',
    color: '#3b82f6'
  },
  {
    name: 'recover-step.jpg', // Used in recover tab
    title: 'Recover Your Item', 
    color: '#6366f1'
  },
  {
    name: 'notify-step.jpg', // Used in recover section
    title: 'Notification System',
    color: '#f59e0b'
  }
];

// Generate wide banner placeholder
const generateWideImageSVG = (title, color) => {
  return `<svg width="1200" height="675" viewBox="0 0 1200 675" xmlns="http://www.w3.org/2000/svg">
  <defs>
    <linearGradient id="bg-gradient" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" stop-color="#0f172a" />
      <stop offset="100%" stop-color="#1e293b" />
    </linearGradient>
    <linearGradient id="overlay-gradient" x1="0%" y1="0%" x2="0%" y2="100%">
      <stop offset="0%" stop-color="rgba(15, 23, 42, 0)" />
      <stop offset="100%" stop-color="rgba(15, 23, 42, 0.8)" />
    </linearGradient>
    <pattern id="grid" width="40" height="40" patternUnits="userSpaceOnUse">
      <path d="M 40 0 L 0 0 0 40" fill="none" stroke="#94a3b8" stroke-opacity="0.1" stroke-width="1" />
    </pattern>
    <filter id="glow" x="-50%" y="-50%" width="200%" height="200%">
      <feGaussianBlur stdDeviation="10" result="blur" />
      <feComposite in="SourceGraphic" in2="blur" operator="over" />
    </filter>
  </defs>
  
  <rect width="1200" height="675" fill="url(#bg-gradient)" />
  <rect width="1200" height="675" fill="url(#grid)" />
  
  <!-- Decorative Elements -->
  <circle cx="300" cy="200" r="100" fill="${color}" opacity="0.1" filter="url(#glow)" />
  <circle cx="900" cy="500" r="150" fill="${color}" opacity="0.15" filter="url(#glow)" />
  <circle cx="600" cy="300" r="200" fill="${color}" opacity="0.05" filter="url(#glow)" />
  
  <!-- Title -->
  <rect x="0" y="475" width="1200" height="200" fill="url(#overlay-gradient)" />
  <text x="600" y="550" font-family="Arial" font-size="48" font-weight="bold" fill="white" text-anchor="middle">${title}</text>
  <text x="600" y="600" font-family="Arial" font-size="24" fill="rgba(255,255,255,0.8)" text-anchor="middle">RECOVR - AI-Powered Lost & Found</text>

  <!-- RECOVR Branding -->
  <text x="50" y="50" font-family="Arial" font-size="24" font-weight="bold" fill="${color}">RECOVR</text>
</svg>`;
};

// Create SVG files
additionalSvgs.forEach(({ name, title, color }) => {
  const filePath = path.join(publicDir, name);
  const svgContent = generateWideImageSVG(title, color);
  
  fs.writeFileSync(filePath, svgContent);
  console.log(`Created: ${name}`);
});

console.log('Additional SVG placeholders complete!'); 


===== FILE: ./scripts/download-profile-pictures.js =====
const https = require('https');
const fs = require('fs');
const path = require('path');

const publicDir = path.join(__dirname, '../public');

// Profile picture URLs from Unsplash
const profilePictures = [
  {
    name: 'user-1.jpg',
    url: 'https://images.unsplash.com/photo-1522075469751-3a6694fb2f61?q=80&w=300&auto=format&fit=crop',
    description: 'Alex Johnson profile picture'
  },
  {
    name: 'user-2.jpg',
    url: 'https://images.unsplash.com/photo-1544005313-94ddf0286df2?q=80&w=300&auto=format&fit=crop',
    description: 'Sarah Chen profile picture'
  },
  {
    name: 'user-3.jpg',
    url: 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?q=80&w=300&auto=format&fit=crop',
    description: 'Michael Rodriguez profile picture'
  },
  {
    name: 'user-4.jpg',
    url: 'https://images.unsplash.com/photo-1531123897727-8f129e1688ce?q=80&w=300&auto=format&fit=crop',
    description: 'Emily Watson profile picture'
  },
  {
    name: 'placeholder-user.jpg',
    url: 'https://images.unsplash.com/photo-1494790108377-be9c29b29330?q=80&w=300&auto=format&fit=crop',
    description: 'Placeholder user profile picture'
  }
];

// Function to download an image from URL
const downloadImage = (url, imagePath) => {
  return new Promise((resolve, reject) => {
    https.get(url, (response) => {
      if (response.statusCode !== 200) {
        reject(new Error(`Failed to download image: ${response.statusCode}`));
        return;
      }

      const fileStream = fs.createWriteStream(imagePath);
      response.pipe(fileStream);

      fileStream.on('finish', () => {
        fileStream.close();
        console.log(`Downloaded: ${imagePath}`);
        resolve();
      });

      fileStream.on('error', (err) => {
        fs.unlink(imagePath, () => {}); // Delete the file if there's an error
        reject(err);
      });

    }).on('error', (err) => {
      reject(err);
    });
  });
};

// Download all profile pictures
async function downloadProfilePictures() {
  // Create directory if it doesn't exist
  if (!fs.existsSync(publicDir)) {
    fs.mkdirSync(publicDir, { recursive: true });
  }

  console.log('Starting download of profile pictures...');
  
  for (const picture of profilePictures) {
    const imagePath = path.join(publicDir, picture.name);
    try {
      await downloadImage(picture.url, imagePath);
    } catch (error) {
      console.error(`Error downloading ${picture.name}:`, error.message);
    }
  }

  console.log('All profile pictures downloaded successfully!');
}

// Run the download
downloadProfilePictures().catch(error => {
  console.error('Error in download process:', error);
}); 


===== FILE: ./scripts/fetch-stock-images.js =====
const https = require('https');
const fs = require('fs');
const path = require('path');

const publicDir = path.join(__dirname, '../public');

// List of Unsplash image URLs relevant to lost and found theme
const images = [
  {
    name: 'hero-image.jpg',
    url: 'https://images.unsplash.com/photo-1580894732444-8ecded7900cd?q=80&w=1200&auto=format&fit=crop',
    description: 'Person holding a smartphone with AI scanning interface'
  },
  {
    name: 'report-step.jpg',
    url: 'https://images.unsplash.com/photo-1512428559087-560fa5ceab42?q=80&w=1200&auto=format&fit=crop',
    description: 'Person taking photo of lost item'
  },
  {
    name: 'matching-step.jpg',
    url: 'https://images.unsplash.com/photo-1573164713988-8665fc963095?q=80&w=1200&auto=format&fit=crop',
    description: 'AI pattern matching visualization'
  },
  {
    name: 'recover-step.jpg',
    url: 'https://images.unsplash.com/photo-1521791136064-7986c2920216?q=80&w=1200&auto=format&fit=crop',
    description: 'Two people handshaking, item recovery'
  },
  {
    name: 'report-detail.jpg',
    url: 'https://images.unsplash.com/photo-1586473219010-2ffc57b0d282?q=80&w=1200&auto=format&fit=crop',
    description: 'Close-up of filling out forms on mobile'
  },
  {
    name: 'mobile-upload.jpg',
    url: 'https://images.unsplash.com/photo-1601784551446-20c9e07cdbdb?q=80&w=1200&auto=format&fit=crop',
    description: 'Person holding mobile phone outdoors'
  },
  {
    name: 'ai-analysis.jpg',
    url: 'https://images.unsplash.com/photo-1593642632823-8f785ba67e45?q=80&w=1200&auto=format&fit=crop',
    description: 'Analytics dashboard visualization'
  },
  {
    name: 'matching-results.jpg',
    url: 'https://images.unsplash.com/photo-1581291518633-83b4ebd1d83e?q=80&w=1200&auto=format&fit=crop',
    description: 'Person looking at search results on laptop'
  },
  {
    name: 'handover.jpg',
    url: 'https://images.unsplash.com/photo-1579208570378-8c970854bc23?q=80&w=1200&auto=format&fit=crop',
    description: 'Person receiving a package'
  },
  {
    name: 'notify-step.jpg',
    url: 'https://images.unsplash.com/photo-1596558450268-9c27524ba856?q=80&w=1200&auto=format&fit=crop',
    description: 'Person receiving notification on smartphone'
  }
];

// Function to download an image from URL
const downloadImage = (url, imagePath) => {
  return new Promise((resolve, reject) => {
    https.get(url, (response) => {
      if (response.statusCode !== 200) {
        reject(new Error(`Failed to download image: ${response.statusCode}`));
        return;
      }

      const fileStream = fs.createWriteStream(imagePath);
      response.pipe(fileStream);

      fileStream.on('finish', () => {
        fileStream.close();
        console.log(`Downloaded: ${imagePath}`);
        resolve();
      });

      fileStream.on('error', (err) => {
        fs.unlink(imagePath, () => {}); // Delete the file if there's an error
        reject(err);
      });

    }).on('error', (err) => {
      reject(err);
    });
  });
};

// Download all images
async function downloadAllImages() {
  // Create directory if it doesn't exist
  if (!fs.existsSync(publicDir)) {
    fs.mkdirSync(publicDir, { recursive: true });
  }

  console.log('Starting download of stock images...');
  
  for (const image of images) {
    const imagePath = path.join(publicDir, image.name);
    try {
      await downloadImage(image.url, imagePath);
    } catch (error) {
      console.error(`Error downloading ${image.name}:`, error.message);
    }
  }

  console.log('All images downloaded successfully!');
}

// Run the download
downloadAllImages().catch(error => {
  console.error('Error in download process:', error);
}); 


===== FILE: ./scripts/generate-enhanced-placeholders.js =====
const fs = require('fs');
const path = require('path');

const publicDir = path.join(__dirname, '../public');

// SVG files with enhanced graphics
const enhancedSvgs = [
  {
    name: 'report-step.svg',
    title: 'Report Your Item',
    icon: 'camera',
    color: '#3b82f6'
  },
  {
    name: 'matching-step.svg',
    title: 'AI Matching Process',
    icon: 'search',
    color: '#10b981'
  },
  {
    name: 'recover-step.svg',
    title: 'Recover Your Item',
    icon: 'check-circle',
    color: '#6366f1'
  },
  {
    name: 'notify-step.svg',
    title: 'Notifications',
    icon: 'bell',
    color: '#f59e0b'
  },
  {
    name: 'report-detail.svg',
    title: 'Item Details Form',
    icon: 'clipboard',
    color: '#8b5cf6'
  },
  {
    name: 'mobile-upload.svg',
    title: 'Mobile Upload',
    icon: 'smartphone',
    color: '#ec4899'
  },
  {
    name: 'ai-analysis.svg',
    title: 'AI Image Analysis',
    icon: 'zap',
    color: '#06b6d4'
  },
  {
    name: 'matching-results.svg',
    title: 'Match Results',
    icon: 'layers',
    color: '#14b8a6'
  },
  {
    name: 'handover.svg',
    title: 'Safe Handover',
    icon: 'handshake',
    color: '#2dd4bf'
  }
];

// SVG icon paths
const icons = {
  camera: 'M12 15V17M6 3H18C19.1046 3 20 3.89543 20 5V19C20 20.1046 19.1046 21 18 21H6C4.89543 21 4 20.1046 4 19V5C4 3.89543 4.89543 3 6 3ZM16 11C16 13.2091 14.2091 15 12 15C9.79086 15 8 13.2091 8 11C8 8.79086 9.79086 7 12 7C14.2091 7 16 8.79086 16 11Z',
  search: 'M21 21L15 15M17 10C17 13.866 13.866 17 10 17C6.13401 17 3 13.866 3 10C3 6.13401 6.13401 3 10 3C13.866 3 17 6.13401 17 10Z',
  'check-circle': 'M9 12L11 14L15 10M21 12C21 16.9706 16.9706 21 12 21C7.02944 21 3 16.9706 3 12C3 7.02944 7.02944 3 12 3C16.9706 3 21 7.02944 21 12Z',
  bell: 'M10 15H14C14 16.6569 12.6569 18 11 18C9.34315 18 8 16.6569 8 15H10ZM18 15H6C5.44772 15 5 14.5523 5 14V13.5858C5 13.3212 5.10536 13.0679 5.29289 12.8804L6.41421 11.7591C6.78929 11.384 7 10.8755 7 10.3431V8C7 5.23858 9.23858 3 12 3C14.7614 3 17 5.23858 17 8V10.3431C17 10.8755 17.2107 11.384 17.5858 11.7591L18.7071 12.8804C18.8946 13.0679 19 13.3212 19 13.5858V14C19 14.5523 18.5523 15 18 15Z',
  clipboard: 'M9 5H7C5.89543 5 5 5.89543 5 7V19C5 20.1046 5.89543 21 7 21H17C18.1046 21 19 20.1046 19 19V7C19 5.89543 18.1046 5 17 5H15M9 5C9 6.10457 9.89543 7 11 7H13C14.1046 7 15 6.10457 15 5M9 5C9 3.89543 9.89543 3 11 3H13C14.1046 3 15 3.89543 15 5M12 12H15M12 16H15M9 12H9.01M9 16H9.01',
  smartphone: 'M12 18H12.01M8 21H16C17.1046 21 18 20.1046 18 19V5C18 3.89543 17.1046 3 16 3H8C6.89543 3 6 3.89543 6 5V19C6 20.1046 6.89543 21 8 21Z',
  zap: 'M13 10V3L4 14H11L11 21L20 10L13 10Z',
  layers: 'M19 11L12 16.5L5 11M19 5L12 10.5L5 5',
  handshake: 'M9 15L5 11M9 15L11.5 17.5M9 15L5.5 17.5M15 15L19 11M15 15L12.5 17.5M15 15L18.5 17.5M5 5V6C5 7.10457 5.89543 8 7 8H17C18.1046 8 19 7.10457 19 6V5M12 8V13'
};

// Generate enhanced SVG with icon and title
const generateEnhancedSVG = (title, icon, color) => {
  const iconPath = icons[icon] || icons.camera;
  const gradient = `${color}66`;
  
  return `<svg width="800" height="450" viewBox="0 0 800 450" xmlns="http://www.w3.org/2000/svg">
  <defs>
    <linearGradient id="bg" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" stop-color="#0f172a" />
      <stop offset="100%" stop-color="#1e293b" />
    </linearGradient>
    <linearGradient id="card-gradient" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" stop-color="#1e293b" />
      <stop offset="100%" stop-color="#334155" />
    </linearGradient>
    <pattern id="grid" width="30" height="30" patternUnits="userSpaceOnUse">
      <path d="M 30 0 L 0 0 0 30" fill="none" stroke="#94a3b8" stroke-opacity="0.1" stroke-width="1" />
    </pattern>
    <radialGradient id="icon-bg" cx="50%" cy="50%" r="50%" fx="50%" fy="50%">
      <stop offset="0%" stop-color="${gradient}" />
      <stop offset="100%" stop-color="${color}00" />
    </radialGradient>
    <filter id="shadow" x="-20%" y="-20%" width="140%" height="140%">
      <feDropShadow dx="0" dy="4" stdDeviation="8" flood-color="#000" flood-opacity="0.3" />
    </filter>
  </defs>
  
  <rect width="800" height="450" fill="url(#bg)" />
  <rect width="800" height="450" fill="url(#grid)" />
  
  <g filter="url(#shadow)">
    <rect x="150" y="100" width="500" height="250" rx="16" fill="url(#card-gradient)" />
  </g>
  
  <circle cx="400" cy="200" r="80" fill="url(#icon-bg)" opacity="0.3" />
  <g transform="translate(400, 200) scale(6)">
    <path d="${iconPath}" fill="none" stroke="${color}" stroke-width="0.8" stroke-linecap="round" stroke-linejoin="round" transform="translate(-12, -12)" />
  </g>
  
  <rect x="200" y="320" width="400" height="50" rx="8" fill="#1e293b" />
  <text x="400" y="355" font-family="Arial" font-size="24" fill="#f8fafc" text-anchor="middle">${title}</text>
  
  <!-- RECOVR branding -->
  <text x="400" y="40" font-family="Arial" font-size="24" font-weight="bold" text-anchor="middle" fill="${color}">RECOVR</text>
</svg>`;
};

// Create SVG files
enhancedSvgs.forEach(({ name, title, icon, color }) => {
  const filePath = path.join(publicDir, name);
  const svgContent = generateEnhancedSVG(title, icon, color);
  
  fs.writeFileSync(filePath, svgContent);
  console.log(`Created: ${name}`);
});

// Also create a logo.svg file
const logoSVG = `<svg width="140" height="40" viewBox="0 0 140 40" xmlns="http://www.w3.org/2000/svg">
  <defs>
    <linearGradient id="logo-gradient" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" stop-color="#3b82f6" />
      <stop offset="100%" stop-color="#0ea5e9" />
    </linearGradient>
  </defs>
  <rect x="0" y="8" width="24" height="24" rx="8" fill="url(#logo-gradient)" />
  <path d="M5 20L9 24L19 14" stroke="white" stroke-width="3" stroke-linecap="round" stroke-linejoin="round" />
  <text x="34" y="28" font-family="Arial" font-size="20" font-weight="bold" fill="#0f172a">RECOVR</text>
</svg>`;

fs.writeFileSync(path.join(publicDir, 'logo.svg'), logoSVG);
console.log('Created: logo.svg');

console.log('Enhanced SVG placeholder generation complete!'); 


===== FILE: ./scripts/generate-placeholder-svgs.js =====
const fs = require('fs');
const path = require('path');

const publicDir = path.join(__dirname, '../public');

// List of SVG files to be created
const svgFiles = [
  'report-step.svg', 
  'matching-step.svg', 
  'recover-step.svg', 
  'notify-step.svg',
  'report-detail.svg',
  'mobile-upload.svg',
  'ai-analysis.svg',
  'matching-results.svg',
  'handover.svg'
];

// Basic template for placeholder SVG
const generatePlaceholderSVG = (title) => `
<svg width="800" height="450" viewBox="0 0 800 450" xmlns="http://www.w3.org/2000/svg">
  <rect width="800" height="450" fill="#0f172a"/>
  <rect x="0" y="0" width="800" height="450" fill="url(#grid)" opacity="0.1"/>
  
  <!-- Grid pattern -->
  <defs>
    <pattern id="grid" width="20" height="20" patternUnits="userSpaceOnUse">
      <path d="M 20 0 L 0 0 0 20" fill="none" stroke="#f8fafc" stroke-width="0.5" />
    </pattern>
  </defs>
  
  <!-- Text Labels -->
  <rect x="200" y="175" width="400" height="100" rx="8" fill="#1e293b"/>
  <text x="400" y="235" font-family="Arial" font-size="24" fill="#f8fafc" text-anchor="middle">${title}</text>
</svg>
`;

// Create SVG files
svgFiles.forEach(filename => {
  const filePath = path.join(publicDir, filename);
  const title = filename.replace('.svg', '').replace(/-/g, ' ').replace(/^\w/, c => c.toUpperCase());
  
  fs.writeFileSync(filePath, generatePlaceholderSVG(title));
  console.log(`Created: ${filename}`);
});

console.log('SVG placeholder generation complete!'); 


===== FILE: ./spring-backend-jdbc/src/main/java/com/recovr/jdbcbackend/JdbcBackendApplication.java =====
 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/config/OpenApiConfig.java =====
package com.recovr.api.config;

import io.swagger.v3.oas.models.OpenAPI;
import io.swagger.v3.oas.models.info.Info;
import io.swagger.v3.oas.models.info.License;
import io.swagger.v3.oas.models.Components;
import io.swagger.v3.oas.models.security.SecurityScheme;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class OpenApiConfig {

    @Bean
    public OpenAPI customOpenAPI() {
        return new OpenAPI()
                .info(new Info()
                        .title("RECOVR API")
                        .version("1.0")
                        .description("API for the RECOVR Lost & Found Management System")
                        .license(new License().name("Apache 2.0").url("http://springdoc.org")))
                .components(new Components()
                        .addSecuritySchemes("bearerAuth",
                                new SecurityScheme()
                                        .type(SecurityScheme.Type.HTTP)
                                        .scheme("bearer")));
    }
} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/config/SecurityConfig.java =====
package com.recovr.api.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.config.http.SessionCreationPolicy;

@Configuration
@EnableWebSecurity
public class SecurityConfig {

    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http.csrf(csrf -> csrf.disable())
            .authorizeHttpRequests(auth -> auth
                .requestMatchers(org.springframework.http.HttpMethod.POST, "/api/items").permitAll()
                .anyRequest().authenticated()
            );
        return http.build();
    }
} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/config/WebConfig.java =====
package com.recovr.api.config;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.CorsRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

@Configuration
public class WebConfig implements WebMvcConfigurer {

    @Value("${cors.allowed-origins}")
    private String allowedOrigins;

    @Value("${cors.allowed-methods}")
    private String allowedMethods;

    @Value("${cors.allowed-headers}")
    private String allowedHeaders;

    @Value("${cors.exposed-headers}")
    private String exposedHeaders;

    @Override
    public void addCorsMappings(CorsRegistry registry) {
        registry.addMapping("/**")
                .allowedOriginPatterns(allowedOrigins.split(","))
                .allowedMethods(allowedMethods.split(","))
                .allowedHeaders(allowedHeaders.split(","))
                .exposedHeaders(exposedHeaders.split(","))
                .allowCredentials(true)
                .maxAge(3600);
    }
} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/controller/AdminController.java =====
package com.recovr.api.controller;

import com.recovr.api.dto.AdminDashboardDto;
import com.recovr.api.dto.ItemDto;
import com.recovr.api.dto.UserDto;
import com.recovr.api.service.AdminService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/admin")
@Tag(name = "Admin", description = "Admin dashboard endpoints")
public class AdminController {

    @Autowired
    private AdminService adminService;

    @GetMapping("/dashboard")
    @Operation(summary = "Get admin dashboard statistics", description = "Returns statistics for the admin dashboard.")
    public ResponseEntity<AdminDashboardDto> getAdminDashboard() {
        AdminDashboardDto dashboard = adminService.getAdminDashboard();
        return ResponseEntity.ok(dashboard);
    }

    @GetMapping("/items")
    @Operation(summary = "Get all items (admin)", description = "Retrieves the list of all items for administration.")
    public ResponseEntity<List<ItemDto>> getAllItemsAdmin() {
        List<ItemDto> items = adminService.getAllItemsAdmin();
        return ResponseEntity.ok(items);
    }

    @GetMapping("/users")
    @Operation(summary = "Get all users (admin)", description = "Retrieves the list of all users for administration.")
    public ResponseEntity<List<UserDto>> getAllUsersAdmin() {
        List<UserDto> users = adminService.getAllUsersAdmin();
        return ResponseEntity.ok(users);
    }

    @DeleteMapping("/items/{id}")
    @Operation(summary = "Delete an item (admin)", description = "Deletes an item by its ID for administration.")
    public ResponseEntity<Void> deleteItemAdmin(@PathVariable Long id) {
        adminService.deleteItemAdmin(id);
        return ResponseEntity.noContent().build();
    }

    @DeleteMapping("/users/{id}")
    @Operation(summary = "Delete a user (admin)", description = "Deletes a user by its ID for administration.")
    public ResponseEntity<Void> deleteUserAdmin(@PathVariable Long id) {
        adminService.deleteUserAdmin(id);
        return ResponseEntity.noContent().build();
    }

    @PutMapping("/items/{id}")
    @Operation(summary = "Update an item (admin)", description = "Updates an item by its ID for administration.")
    public ResponseEntity<ItemDto> updateItemAdmin(@PathVariable Long id, @RequestBody ItemDto itemDto) {
        ItemDto updated = adminService.updateItemAdmin(id, itemDto);
        return ResponseEntity.ok(updated);
    }

    @PutMapping("/users/{id}")
    @Operation(summary = "Update a user (admin)", description = "Updates a user by its ID for administration.")
    public ResponseEntity<UserDto> updateUserAdmin(@PathVariable Long id, @RequestBody UserDto userDto) {
        UserDto updated = adminService.updateUserAdmin(id, userDto);
        return ResponseEntity.ok(updated);
    }
}


===== FILE: ./spring-backend/src/main/java/com/recovr/api/controller/AuthController.java =====
package com.recovr.api.controller;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/auth")
public class AuthController {
    @PostMapping("/login")
    public ResponseEntity<String> login() {
        // Dummy login endpoint for now
        return ResponseEntity.ok("Login successful (JWT disabled)");
    }
} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/controller/ClaimRequestController.java =====
package com.recovr.api.controller;

import com.recovr.api.dto.ClaimRequestDto;
import com.recovr.api.entity.ClaimRequest;
import com.recovr.api.entity.ClaimStatus;
import com.recovr.api.entity.Item;
import com.recovr.api.entity.ItemStatus;
import com.recovr.api.entity.User;
import com.recovr.api.repository.ClaimRequestRepository;
import com.recovr.api.repository.ItemRepository;
import com.recovr.api.repository.UserRepository;
import com.recovr.api.security.services.UserDetailsImpl;
import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

@CrossOrigin(origins = "*", maxAge = 3600)
@RestController
@RequestMapping("/api/claims")
public class ClaimRequestController {
    @Autowired
    private ClaimRequestRepository claimRequestRepository;

    @Autowired
    private ItemRepository itemRepository;

    @Autowired
    private UserRepository userRepository;

    @GetMapping
    @PreAuthorize("hasRole('USER') or hasRole('ADMIN')")
    public ResponseEntity<?> getUserClaimRequests(
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "10") int size,
            @RequestParam(required = false) ClaimStatus status) {
        try {
            Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
            UserDetailsImpl userDetails = (UserDetailsImpl) authentication.getPrincipal();
            
            User user = userRepository.findById(userDetails.getId())
                    .orElseThrow(() -> new RuntimeException("User not found"));
            
            Pageable paging = PageRequest.of(page, size, Sort.by("createdAt").descending());
            Page<ClaimRequest> pageRequests;
            
            if (status != null) {
                pageRequests = claimRequestRepository.findByUserAndStatus(user, status, paging);
            } else {
                pageRequests = claimRequestRepository.findByUser(user, paging);
            }
            
            List<ClaimRequestDto> claims = pageRequests.getContent().stream()
                    .map(this::convertToDto)
                    .collect(Collectors.toList());

            Map<String, Object> response = new HashMap<>();
            response.put("claims", claims);
            response.put("currentPage", pageRequests.getNumber());
            response.put("totalItems", pageRequests.getTotalElements());
            response.put("totalPages", pageRequests.getTotalPages());

            return new ResponseEntity<>(response, HttpStatus.OK);
        } catch (Exception e) {
            return new ResponseEntity<>(e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    @GetMapping("/item/{itemId}")
    @PreAuthorize("hasRole('USER') or hasRole('ADMIN')")
    public ResponseEntity<?> getClaimRequestsByItem(
            @PathVariable("itemId") long itemId,
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "10") int size,
            @RequestParam(required = false) ClaimStatus status) {
        try {
            Item item = itemRepository.findById(itemId)
                    .orElseThrow(() -> new RuntimeException("Item not found"));
            
            Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
            UserDetailsImpl userDetails = (UserDetailsImpl) authentication.getPrincipal();
            
            // Only the item owner or admin can see claims
            if (!item.getReportedBy().getId().equals(userDetails.getId()) && 
                    !authentication.getAuthorities().stream()
                    .anyMatch(a -> a.getAuthority().equals("ROLE_ADMIN"))) {
                return new ResponseEntity<>("You are not authorized to view these claims", HttpStatus.FORBIDDEN);
            }
            
            Pageable paging = PageRequest.of(page, size, Sort.by("createdAt").descending());
            Page<ClaimRequest> pageRequests;
            
            if (status != null) {
                pageRequests = claimRequestRepository.findByItemAndStatus(item, status, paging);
            } else {
                pageRequests = claimRequestRepository.findAll(paging);
            }
            
            List<ClaimRequestDto> claims = pageRequests.getContent().stream()
                    .map(this::convertToDto)
                    .collect(Collectors.toList());

            Map<String, Object> response = new HashMap<>();
            response.put("claims", claims);
            response.put("currentPage", pageRequests.getNumber());
            response.put("totalItems", pageRequests.getTotalElements());
            response.put("totalPages", pageRequests.getTotalPages());

            return new ResponseEntity<>(response, HttpStatus.OK);
        } catch (Exception e) {
            return new ResponseEntity<>(e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    @PostMapping
    @PreAuthorize("hasRole('USER') or hasRole('ADMIN')")
    public ResponseEntity<?> createClaimRequest(@Valid @RequestBody ClaimRequestDto claimRequestDto) {
        try {
            Item item = itemRepository.findById(claimRequestDto.getItemId())
                    .orElseThrow(() -> new RuntimeException("Item not found"));
            
            Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
            UserDetailsImpl userDetails = (UserDetailsImpl) authentication.getPrincipal();
            
            User user = userRepository.findById(userDetails.getId())
                    .orElseThrow(() -> new RuntimeException("User not found"));
            
            // Check if the user has already claimed this item
            if (claimRequestRepository.existsByItemAndUser(item, user)) {
                return new ResponseEntity<>("You have already submitted a claim for this item", HttpStatus.BAD_REQUEST);
            }
            
            // Check if user is trying to claim their own item
            if (item.getReportedBy().getId().equals(user.getId())) {
                return new ResponseEntity<>("You cannot claim your own item", HttpStatus.BAD_REQUEST);
            }
            
            ClaimRequest claimRequest = new ClaimRequest();
            claimRequest.setItem(item);
            claimRequest.setUser(user);
            claimRequest.setClaimMessage(claimRequestDto.getClaimMessage());
            claimRequest.setContactInfo(claimRequestDto.getContactInfo());
            claimRequest.setStatus(ClaimStatus.PENDING);
            
            ClaimRequest savedRequest = claimRequestRepository.save(claimRequest);
            
            return new ResponseEntity<>(convertToDto(savedRequest), HttpStatus.CREATED);
        } catch (Exception e) {
            return new ResponseEntity<>(e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    @PutMapping("/{id}")
    @PreAuthorize("hasRole('USER') or hasRole('ADMIN')")
    public ResponseEntity<?> updateClaimRequestStatus(
            @PathVariable("id") long id,
            @RequestParam ClaimStatus status) {
        try {
            ClaimRequest claimRequest = claimRequestRepository.findById(id)
                    .orElseThrow(() -> new RuntimeException("Claim request not found"));
            
            Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
            UserDetailsImpl userDetails = (UserDetailsImpl) authentication.getPrincipal();
            
            // For CANCELLED status, only the claim owner can cancel it
            if (status == ClaimStatus.CANCELLED) {
                if (!claimRequest.getUser().getId().equals(userDetails.getId())) {
                    return new ResponseEntity<>("You are not authorized to cancel this claim", HttpStatus.FORBIDDEN);
                }
            } 
            // For other statuses, only the item owner or admin can update them
            else if (!claimRequest.getItem().getReportedBy().getId().equals(userDetails.getId()) && 
                    !authentication.getAuthorities().stream()
                    .anyMatch(a -> a.getAuthority().equals("ROLE_ADMIN"))) {
                return new ResponseEntity<>("You are not authorized to update this claim", HttpStatus.FORBIDDEN);
            }
            
            claimRequest.setStatus(status);
            
            // If status is APPROVED, update the item as claimed
            if (status == ClaimStatus.APPROVED) {
                Item item = claimRequest.getItem();
                item.setStatus(ItemStatus.CLAIMED);
                item.setClaimedBy(claimRequest.getUser());
                item.setClaimedAt(LocalDateTime.now());
                itemRepository.save(item);
            }
            
            ClaimRequest updatedRequest = claimRequestRepository.save(claimRequest);
            
            return new ResponseEntity<>(convertToDto(updatedRequest), HttpStatus.OK);
        } catch (Exception e) {
            return new ResponseEntity<>(e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    private ClaimRequestDto convertToDto(ClaimRequest claimRequest) {
        ClaimRequestDto dto = new ClaimRequestDto();
        dto.setId(claimRequest.getId());
        dto.setItemId(claimRequest.getItem().getId());
        dto.setItemName(claimRequest.getItem().getName());
        dto.setUserId(claimRequest.getUser().getId());
        dto.setUsername(claimRequest.getUser().getUsername());
        dto.setClaimMessage(claimRequest.getClaimMessage());
        dto.setContactInfo(claimRequest.getContactInfo());
        dto.setStatus(claimRequest.getStatus());
        dto.setCreatedAt(claimRequest.getCreatedAt());
        dto.setUpdatedAt(claimRequest.getUpdatedAt());
        
        return dto;
    }
} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/controller/DetectionController.java =====
package com.recovr.api.controller;

import com.recovr.api.dto.DetectedObjectDto;
import com.recovr.api.entity.DetectionSession;
import com.recovr.api.entity.DetectionStatus;
import com.recovr.api.entity.ItemCategory;
import com.recovr.api.service.DetectionService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Map;

@Slf4j
@RestController
@RequestMapping("/api/detection")
@RequiredArgsConstructor
@CrossOrigin(origins = "*", maxAge = 3600)
@Tag(name = "Detection", description = "Detection API for managing object detection sessions and results")
public class DetectionController {

    private final DetectionService detectionService;

    /**
     * Start a new detection session
     * POST /api/detection/sessions/start
     */
    @PostMapping("/sessions/start")
    @Operation(
        summary = "Start a new detection session",
        description = "Creates a new detection session for a camera"
    )
    @ApiResponses(value = {
        @ApiResponse(
            responseCode = "200",
            description = "Detection session started successfully",
            content = @Content(schema = @Schema(implementation = DetectionSession.class))
        ),
        @ApiResponse(responseCode = "400", description = "Invalid request parameters"),
        @ApiResponse(responseCode = "500", description = "Internal server error")
    })
    public ResponseEntity<DetectionSession> startDetectionSession(
            @RequestParam String cameraId,
            @RequestParam String cameraLocation,
            @RequestParam(defaultValue = "stable_model_epoch_30") String modelVersion) {

        log.info("Starting detection session for camera: {} at location: {}", cameraId, cameraLocation);
        
        try {
            DetectionSession session = detectionService.startDetectionSession(cameraId, cameraLocation, modelVersion);
            return ResponseEntity.ok(session);
        } catch (Exception e) {
            log.error("Error starting detection session", e);
            return ResponseEntity.badRequest().build();
        }
    }

    /**
     * End a detection session
     * POST /api/detection/sessions/{sessionId}/end
     */
    @PostMapping("/sessions/{sessionId}/end")
    @Operation(
        summary = "End a detection session",
        description = "Ends an active detection session and processes its results"
    )
    public ResponseEntity<Void> endDetectionSession(@PathVariable String sessionId) {
        
        log.info("Ending detection session: {}", sessionId);
        try {
            detectionService.endDetectionSession(sessionId);
            return ResponseEntity.ok().build();
        } catch (Exception e) {
            log.error("Error ending detection session", e);
            return ResponseEntity.badRequest().build();
        }
    }

    /**
     * Process detection result from PyTorch model
     * POST /api/detection/process
     * 
     * This endpoint will be called by your Python detection service
     */
    @PostMapping("/process")
    @Operation(
        summary = "Process detection results",
        description = "Processes the detection results for a session and updates the database"
    )
    @ApiResponses(value = {
        @ApiResponse(
            responseCode = "200",
            description = "Detection results processed successfully",
            content = @Content(schema = @Schema(implementation = Map.class))
        ),
        @ApiResponse(responseCode = "404", description = "Detection session not found"),
        @ApiResponse(responseCode = "400", description = "Invalid request data"),
        @ApiResponse(responseCode = "500", description = "Internal server error")
    })
    public ResponseEntity<Map<String, Object>> processDetection(
            @RequestBody Map<String, Object> detectionData) {
        
        try {
            log.info("Processing detection data: {}", detectionData);
            
            // Validate required fields
            String sessionId = (String) detectionData.get("sessionId");
            String trackingId = (String) detectionData.get("trackingId");
            String categoryStr = (String) detectionData.get("category");
            Object confidenceObj = detectionData.get("confidence");
            Object xObj = detectionData.get("x");
            Object yObj = detectionData.get("y");
            Object widthObj = detectionData.get("width");
            Object heightObj = detectionData.get("height");
            String snapshotUrl = (String) detectionData.get("snapshotUrl");

            if (sessionId == null || trackingId == null || categoryStr == null || 
                confidenceObj == null || xObj == null || yObj == null || 
                widthObj == null || heightObj == null) {
                return ResponseEntity.badRequest().body(Map.of(
                    "status", "error",
                    "message", "Missing required fields"
                ));
            }

            // Convert and validate data types
            Double confidence = convertToDouble(confidenceObj);
            Integer x = convertToInteger(xObj);
            Integer y = convertToInteger(yObj);
            Integer width = convertToInteger(widthObj);
            Integer height = convertToInteger(heightObj);

            if (confidence == null || x == null || y == null || width == null || height == null) {
                return ResponseEntity.badRequest().body(Map.of(
                    "status", "error",
                    "message", "Invalid data types for numeric fields"
                ));
            }

            // Convert category string to enum
            ItemCategory category;
            try {
                category = ItemCategory.valueOf(categoryStr.toUpperCase());
            } catch (IllegalArgumentException e) {
                log.warn("Unknown category: {}, defaulting to MISCELLANEOUS", categoryStr);
                category = ItemCategory.MISCELLANEOUS;
            }

            // Process the detection
            detectionService.processDetection(sessionId, trackingId, category, confidence, 
                    x, y, width, height, snapshotUrl);

            return ResponseEntity.ok(Map.of(
                "status", "success",
                "message", "Detection processed successfully",
                "trackingId", trackingId
            ));

        } catch (Exception e) {
            log.error("Error processing detection", e);
            return ResponseEntity.badRequest().body(Map.of(
                "status", "error",
                "message", "Failed to process detection: " + e.getMessage()
            ));
        }
    }

    private Double convertToDouble(Object obj) {
        if (obj == null) return null;
        if (obj instanceof Double) return (Double) obj;
        if (obj instanceof Number) return ((Number) obj).doubleValue();
        try {
            return Double.parseDouble(obj.toString());
        } catch (NumberFormatException e) {
            return null;
        }
    }

    private Integer convertToInteger(Object obj) {
        if (obj == null) return null;
        if (obj instanceof Integer) return (Integer) obj;
        if (obj instanceof Number) return ((Number) obj).intValue();
        try {
            return Integer.parseInt(obj.toString());
        } catch (NumberFormatException e) {
            return null;
        }
    }

    /**
     * Get all abandoned objects (potential lost items)
     * GET /api/detection/abandoned
     */
    @GetMapping("/abandoned")
    @Operation(
        summary = "Get abandoned objects",
        description = "Retrieves a list of objects that have been detected as abandoned"
    )
    public ResponseEntity<List<DetectedObjectDto>> getAbandonedObjects() {
        try {
            List<DetectedObjectDto> abandonedObjects = detectionService.getAbandonedObjects();
            return ResponseEntity.ok(abandonedObjects);
        } catch (Exception e) {
            log.error("Error getting abandoned objects", e);
            return ResponseEntity.badRequest().build();
        }
    }

    /**
     * Get recent detections
     * GET /api/detection/recent
     */
    @GetMapping("/recent")
    @Operation(
        summary = "Get recent detections",
        description = "Retrieves a list of recent object detections"
    )
    public ResponseEntity<List<DetectedObjectDto>> getRecentDetections(
            @RequestParam(defaultValue = "24") int hoursBack) {
        
        try {
            List<DetectedObjectDto> recentDetections = detectionService.getRecentDetections(hoursBack);
            return ResponseEntity.ok(recentDetections);
        } catch (Exception e) {
            log.error("Error getting recent detections", e);
            return ResponseEntity.badRequest().build();
        }
    }

    /**
     * Link detected object to a reported item
     * POST /api/detection/{detectedObjectId}/link/{itemId}
     */
    @PostMapping("/{detectedObjectId}/link/{itemId}")
    @PreAuthorize("hasRole('USER') or hasRole('ADMIN')")
    public ResponseEntity<Map<String, String>> linkDetectedObjectToItem(
            @PathVariable Long detectedObjectId,
            @PathVariable Long itemId) {
        
        try {
            detectionService.linkDetectedObjectToItem(detectedObjectId, itemId);
            return ResponseEntity.ok(Map.of(
                "status", "success",
                "message", "Detected object linked to item successfully"
            ));
        } catch (Exception e) {
            log.error("Error linking detected object to item", e);
            return ResponseEntity.badRequest().body(Map.of(
                "status", "error",
                "message", "Failed to link objects: " + e.getMessage()
            ));
        }
    }

    /**
     * Get detection statistics
     * GET /api/detection/stats
     */
    @GetMapping("/stats")
    @Operation(
        summary = "Get detection statistics",
        description = "Retrieves statistics about object detections"
    )
    public ResponseEntity<Map<String, Object>> getDetectionStats() {
        try {
            Map<String, Object> stats = detectionService.getDetectionStats();
            return ResponseEntity.ok(stats);
        } catch (Exception e) {
            log.error("Error getting detection statistics", e);
            return ResponseEntity.badRequest().body(Map.of(
                "status", "error",
                "message", "Failed to get detection statistics: " + e.getMessage()
            ));
        }
    }

    /**
     * Health check endpoint for the detection system
     */
    @GetMapping("/health")
    @Operation(summary = "Health check for detection system")
    public ResponseEntity<Map<String, Object>> healthCheck() {
        return ResponseEntity.ok(Map.of(
            "status", "healthy",
            "timestamp", System.currentTimeMillis(),
            "service", "detection"
        ));
    }
}


===== FILE: ./spring-backend/src/main/java/com/recovr/api/controller/FileController.java =====
package com.recovr.api.controller;

import com.recovr.api.service.FileStorageService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.Resource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import jakarta.servlet.http.HttpServletRequest;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

@CrossOrigin(origins = "*", maxAge = 3600)
@RestController
@RequestMapping("/api/files")
public class FileController {

    @Autowired
    private FileStorageService fileStorageService;

    @PostMapping("/upload")
    @PreAuthorize("hasRole('USER') or hasRole('ADMIN')")
    public ResponseEntity<?> uploadFile(@RequestParam("file") MultipartFile file) {
        String fileName = fileStorageService.storeFile(file);

        String fileDownloadUri = ServletUriComponentsBuilder.fromCurrentContextPath()
                .path("/api/files/")
                .path(fileName)
                .toUriString();

        return ResponseEntity.ok(fileDownloadUri);
    }

    @PostMapping("/upload-multiple")
    @PreAuthorize("hasRole('USER') or hasRole('ADMIN')")
    public ResponseEntity<?> uploadMultipleFiles(@RequestParam("files") MultipartFile[] files) {
        List<String> fileDownloadUrls = Arrays.stream(files)
                .map(file -> {
                    String fileName = fileStorageService.storeFile(file);
                    return ServletUriComponentsBuilder.fromCurrentContextPath()
                            .path("/api/files/")
                            .path(fileName)
                            .toUriString();
                })
                .collect(Collectors.toList());

        return ResponseEntity.ok(fileDownloadUrls);
    }

    @GetMapping("/{fileName:.+}")
    public ResponseEntity<Resource> downloadFile(@PathVariable String fileName, HttpServletRequest request) {
        // Load file as Resource
        Resource resource = fileStorageService.loadFileAsResource(fileName);

        // Try to determine file's content type
        String contentType = null;
        try {
            contentType = request.getServletContext().getMimeType(resource.getFile().getAbsolutePath());
        } catch (IOException ex) {
            // Logger would be used here in a production app
        }

        // Fallback to the default content type if type could not be determined
        if (contentType == null) {
            contentType = "application/octet-stream";
        }

        return ResponseEntity.ok()
                .contentType(MediaType.parseMediaType(contentType))
                .header(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=\"" + resource.getFilename() + "\"")
                .body(resource);
    }

    @DeleteMapping("/{fileName:.+}")
    @PreAuthorize("hasRole('USER') or hasRole('ADMIN')")
    public ResponseEntity<?> deleteFile(@PathVariable String fileName) {
        fileStorageService.deleteFile(fileName);
        return ResponseEntity.ok("File deleted successfully");
    }
} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/controller/ItemController.java =====
package com.recovr.api.controller;

import com.recovr.api.dto.ItemDto;
import com.recovr.api.entity.Item;
import com.recovr.api.entity.User;
import com.recovr.api.exception.ResourceNotFoundException;
import com.recovr.api.repository.UserRepository;
import com.recovr.api.security.services.UserDetailsImpl;
import com.recovr.api.service.ItemService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.bind.annotation.*;

import jakarta.validation.Valid;
import java.util.HashMap;
import java.util.Map;

@RestController
@RequestMapping("/api/items")
public class ItemController {
    private static final Logger log = LoggerFactory.getLogger(ItemController.class);

    @Autowired
    private ItemService itemService;

    @Autowired
    private UserRepository userRepository;

    @GetMapping
    public ResponseEntity<?> getAllItems(
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "10") int size,
            @RequestParam(required = false) String category,
            @RequestParam(required = false) String status) {
        try {
            Pageable paging = PageRequest.of(page, size, Sort.by("createdAt").descending());
            Page<ItemDto> pageItems = itemService.getAllItems(paging, category, status);

            Map<String, Object> response = new HashMap<>();
            response.put("items", pageItems.getContent());
            response.put("currentPage", pageItems.getNumber());
            response.put("totalItems", pageItems.getTotalElements());
            response.put("totalPages", pageItems.getTotalPages());

            return new ResponseEntity<>(response, HttpStatus.OK);
        } catch (Exception e) {
            return new ResponseEntity<>(e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    @GetMapping("/{id}")
    public ResponseEntity<?> getItemById(@PathVariable Long id) {
        try {
            ItemDto item = itemService.getItemById(id);
            return new ResponseEntity<>(item, HttpStatus.OK);
        } catch (ResourceNotFoundException e) {
            return new ResponseEntity<>(e.getMessage(), HttpStatus.NOT_FOUND);
        } catch (Exception e) {
            return new ResponseEntity<>(e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    @PostMapping
    public ResponseEntity<?> createItem(@Valid @RequestBody ItemDto itemDto) {
        log.info("Received POST /api/items request body: {}", itemDto);
        try {
            Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
            User user = null;
            if (authentication != null && authentication.isAuthenticated() && !(authentication.getPrincipal() instanceof String)) {
                UserDetailsImpl userDetails = (UserDetailsImpl) authentication.getPrincipal();
                user = userRepository.findById(userDetails.getId())
                        .orElse(null);
            }
            if (user == null) {
                log.info("Creating item anonymously (no authenticated user)");
            }
            ItemDto createdItem = itemService.createItem(itemDto, user);
            return new ResponseEntity<>(createdItem, HttpStatus.CREATED);
        } catch (Exception e) {
            log.error("Error in createItem: ", e);
            return new ResponseEntity<>(e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    @PutMapping("/{id}")
    @PreAuthorize("hasRole('USER') or hasRole('ADMIN')")
    public ResponseEntity<?> updateItem(
            @PathVariable Long id,
            @Valid @RequestBody ItemDto itemDto) {
        try {
            ItemDto updatedItem = itemService.updateItem(id, itemDto);
            return new ResponseEntity<>(updatedItem, HttpStatus.OK);
        } catch (ResourceNotFoundException e) {
            return new ResponseEntity<>(e.getMessage(), HttpStatus.NOT_FOUND);
        } catch (Exception e) {
            return new ResponseEntity<>(e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    @DeleteMapping("/{id}")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<?> deleteItem(@PathVariable Long id) {
        try {
            itemService.deleteItem(id);
            return new ResponseEntity<>(HttpStatus.NO_CONTENT);
        } catch (ResourceNotFoundException e) {
            return new ResponseEntity<>(e.getMessage(), HttpStatus.NOT_FOUND);
        } catch (Exception e) {
            return new ResponseEntity<>(e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    @PostMapping("/{id}/claim")
    @PreAuthorize("hasRole('USER') or hasRole('ADMIN')")
    public ResponseEntity<?> claimItem(@PathVariable Long id) {
        try {
            Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
            UserDetailsImpl userDetails = (UserDetailsImpl) authentication.getPrincipal();
            
            User user = userRepository.findById(userDetails.getId())
                    .orElseThrow(() -> new ResourceNotFoundException("User not found"));
            
            ItemDto claimedItem = itemService.claimItem(id, user);
            return new ResponseEntity<>(claimedItem, HttpStatus.OK);
        } catch (ResourceNotFoundException e) {
            return new ResponseEntity<>(e.getMessage(), HttpStatus.NOT_FOUND);
        } catch (IllegalStateException e) {
            return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
        } catch (Exception e) {
            return new ResponseEntity<>(e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }
} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/controller/SearchController.java =====
package com.recovr.api.controller;

import com.recovr.api.dto.SearchRequestDto;
import com.recovr.api.dto.ImageMatchingDto;
import com.recovr.api.service.SearchService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.web.bind.annotation.*;

import jakarta.validation.Valid;
import java.util.List;
import java.util.Map;

@Slf4j
@RestController
@RequestMapping("/api/search")
@RequiredArgsConstructor
@CrossOrigin(origins = "*", maxAge = 3600)
@Tag(name = "Search", description = "Search API for lost items")
@SecurityRequirement(name = "bearerAuth")
public class SearchController {

    private final SearchService searchService;

    /**
     * Create a new search request (POST /search_request)
     * Upload photo for matching as specified in project requirements
     */
    @PostMapping
    @Operation(
        summary = "Create a new search request",
        description = "Creates a new search request for finding lost items using image or text search"
    )
    @ApiResponses(value = {
        @ApiResponse(
            responseCode = "200",
            description = "Search request created successfully",
            content = @Content(schema = @Schema(implementation = SearchRequestDto.class))
        ),
        @ApiResponse(responseCode = "400", description = "Invalid request parameters"),
        @ApiResponse(responseCode = "401", description = "Unauthorized"),
        @ApiResponse(responseCode = "500", description = "Internal server error")
    })
    public ResponseEntity<SearchRequestDto> createSearchRequest(
        @RequestBody SearchRequestDto request,
        @Parameter(description = "Authenticated user") @AuthenticationPrincipal UserDetails userDetails
    ) {
        return ResponseEntity.ok(searchService.createSearchRequest(request, userDetails.getUsername()));
    }

    /**
     * Get search results for a search request
     * GET /api/search/results/{searchRequestId}
     */
    @GetMapping("/{searchRequestId}")
    @Operation(
        summary = "Get search results",
        description = "Retrieves the results of a search request by its ID"
    )
    @ApiResponses(value = {
        @ApiResponse(
            responseCode = "200",
            description = "Search results retrieved successfully",
            content = @Content(schema = @Schema(implementation = SearchRequestDto.class))
        ),
        @ApiResponse(responseCode = "404", description = "Search request not found"),
        @ApiResponse(responseCode = "401", description = "Unauthorized"),
        @ApiResponse(responseCode = "500", description = "Internal server error")
    })
    public ResponseEntity<SearchRequestDto> getSearchResults(
        @Parameter(description = "ID of the search request") @PathVariable Long searchRequestId
    ) {
        return ResponseEntity.ok(searchService.getSearchResults(searchRequestId));
    }

    /**
     * Get user's search history
     * GET /api/search/history
     */
    @GetMapping("/history")
    @PreAuthorize("hasRole('USER')")
    public ResponseEntity<?> getUserSearchHistory(
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "10") int size,
            Authentication authentication) {
        
        try {
            Pageable pageable = PageRequest.of(page, size);
            // TODO: Implement when SearchService method is ready
            
            return ResponseEntity.ok(Map.of(
                "status", "success",
                "searches", List.of(),
                "totalElements", 0,
                "totalPages", 0
            ));
            
        } catch (Exception e) {
            log.error("Error getting search history", e);
            return ResponseEntity.badRequest().body(Map.of(
                "status", "error",
                "message", "Failed to get search history: " + e.getMessage()
            ));
        }
    }

    /**
     * Cancel a search request
     * POST /api/search/{searchRequestId}/cancel
     */
    @PostMapping("/{searchRequestId}/cancel")
    @PreAuthorize("hasRole('USER')")
    public ResponseEntity<?> cancelSearchRequest(
            @PathVariable Long searchRequestId,
            Authentication authentication) {
        
        try {
            // TODO: Implement search cancellation
            log.info("Cancelling search request {} for user: {}", searchRequestId, authentication.getName());
            
            return ResponseEntity.ok(Map.of(
                "status", "success",
                "message", "Search request cancelled successfully"
            ));
            
        } catch (Exception e) {
            log.error("Error cancelling search request", e);
            return ResponseEntity.badRequest().body(Map.of(
                "status", "error",
                "message", "Failed to cancel search request: " + e.getMessage()
            ));
        }
    }

    /**
     * Provide feedback on a match result
     * POST /api/search/feedback/{matchingId}
     */
    @PostMapping("/feedback/{matchingId}")
    @PreAuthorize("hasRole('USER')")
    public ResponseEntity<?> provideFeedback(
            @PathVariable Long matchingId,
            @RequestBody Map<String, Object> feedbackData,
            Authentication authentication) {
        
        try {
            Boolean confirmed = (Boolean) feedbackData.get("confirmed");
            String feedback = (String) feedbackData.get("feedback");
            
            log.info("User {} providing feedback for match {}: confirmed={}", 
                    authentication.getName(), matchingId, confirmed);
            
            // TODO: Implement feedback processing
            
            return ResponseEntity.ok(Map.of(
                "status", "success",
                "message", "Feedback recorded successfully"
            ));
            
        } catch (Exception e) {
            log.error("Error processing feedback", e);
            return ResponseEntity.badRequest().body(Map.of(
                "status", "error",
                "message", "Failed to process feedback: " + e.getMessage()
            ));
        }
    }

    /**
     * Get search statistics (admin only)
     * GET /api/search/stats
     */
    @GetMapping("/stats")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<?> getSearchStats() {
        
        try {
            // TODO: Implement search statistics
            return ResponseEntity.ok(Map.of(
                "status", "success",
                "stats", Map.of(
                    "totalSearches", 0,
                    "successfulMatches", 0,
                    "averageProcessingTime", 0.0,
                    "accuracyRate", 0.0
                )
            ));
            
        } catch (Exception e) {
            log.error("Error getting search stats", e);
            return ResponseEntity.badRequest().body(Map.of(
                "status", "error",
                "message", "Failed to get search statistics: " + e.getMessage()
            ));
        }
    }
} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/controller/TestController.java =====
package com.recovr.api.controller;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.HashMap;
import java.util.Map;

@CrossOrigin(origins = "*", maxAge = 3600)
@RestController
@RequestMapping("/api/test")
public class TestController {

    @GetMapping("/ping")
    public ResponseEntity<?> ping() {
        Map<String, Object> response = new HashMap<>();
        response.put("message", "RECOVR API is running!");
        response.put("timestamp", System.currentTimeMillis());
        response.put("status", "UP");
        
        return ResponseEntity.ok(response);
    }
} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/controller/UserController.java =====
package com.recovr.api.controller;

import com.recovr.api.entity.User;
import com.recovr.api.repository.UserRepository;
import com.recovr.api.security.services.UserDetailsImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.Map;

@CrossOrigin(origins = "*", maxAge = 3600)
@RestController
@RequestMapping("/api/user")
public class UserController {
    @Autowired
    private UserRepository userRepository;

    @Autowired
    private PasswordEncoder encoder;

    @GetMapping("/profile")
    @PreAuthorize("hasRole('USER') or hasRole('ADMIN')")
    public ResponseEntity<?> getUserProfile() {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        UserDetailsImpl userDetails = (UserDetailsImpl) authentication.getPrincipal();
        
        User user = userRepository.findById(userDetails.getId())
                .orElseThrow(() -> new RuntimeException("User not found"));
        
        Map<String, Object> profile = new HashMap<>();
        profile.put("id", user.getId());
        profile.put("username", user.getUsername());
        profile.put("email", user.getEmail());
        profile.put("firstName", user.getFirstName());
        profile.put("lastName", user.getLastName());
        profile.put("phone", user.getPhone());
        profile.put("avatarUrl", user.getAvatarUrl());
        profile.put("createdAt", user.getCreatedAt());
        
        return new ResponseEntity<>(profile, HttpStatus.OK);
    }

    @PutMapping("/profile")
    @PreAuthorize("hasRole('USER') or hasRole('ADMIN')")
    public ResponseEntity<?> updateUserProfile(@RequestBody Map<String, String> updates) {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        UserDetailsImpl userDetails = (UserDetailsImpl) authentication.getPrincipal();
        
        User user = userRepository.findById(userDetails.getId())
                .orElseThrow(() -> new RuntimeException("User not found"));
        
        if (updates.containsKey("firstName")) {
            user.setFirstName(updates.get("firstName"));
        }
        
        if (updates.containsKey("lastName")) {
            user.setLastName(updates.get("lastName"));
        }
        
        if (updates.containsKey("phone")) {
            user.setPhone(updates.get("phone"));
        }
        
        if (updates.containsKey("avatarUrl")) {
            user.setAvatarUrl(updates.get("avatarUrl"));
        }
        
        if (updates.containsKey("password") && !updates.get("password").isEmpty()) {
            user.setPassword(encoder.encode(updates.get("password")));
        }
        
        userRepository.save(user);
        
        return new ResponseEntity<>("Profile updated successfully", HttpStatus.OK);
    }

    @GetMapping("/admin/users")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<?> getAllUsers() {
        return new ResponseEntity<>(userRepository.findAll(), HttpStatus.OK);
    }

    @GetMapping("/admin/users/{id}")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<?> getUserById(@PathVariable Long id) {
        User user = userRepository.findById(id)
                .orElse(null);
                
        if (user == null) {
            return new ResponseEntity<>("User not found", HttpStatus.NOT_FOUND);
        }
        
        return new ResponseEntity<>(user, HttpStatus.OK);
    }
} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/dto/AdminDashboardDto.java =====
package com.recovr.api.dto;

import java.util.Map;
import java.util.HashMap;

public class AdminDashboardDto {
    private long totalItems;
    private long totalUsers;
    private Map<String, Long> itemsByStatus;
    private Map<String, Long> itemsByCategory;
    private long totalAbandoned;
    private long totalClaimed;
    private long totalReturned;

    public AdminDashboardDto() {
         this.itemsByStatus = new HashMap<>();
         this.itemsByCategory = new HashMap();
    }

    public long getTotalItems() { return totalItems; }
    public void setTotalItems(long totalItems) { this.totalItems = totalItems; }

    public long getTotalUsers() { return totalUsers; }
    public void setTotalUsers(long totalUsers) { this.totalUsers = totalUsers; }

    public Map<String, Long> getItemsByStatus() { return itemsByStatus; }
    public void setItemsByStatus(Map<String, Long> itemsByStatus) { this.itemsByStatus = itemsByStatus; }

    public Map<String, Long> getItemsByCategory() { return itemsByCategory; }
    public void setItemsByCategory(Map<String, Long> itemsByCategory) { this.itemsByCategory = itemsByCategory; }

    public long getTotalAbandoned() { return totalAbandoned; }
    public void setTotalAbandoned(long totalAbandoned) { this.totalAbandoned = totalAbandoned; }

    public long getTotalClaimed() { return totalClaimed; }
    public void setTotalClaimed(long totalClaimed) { this.totalClaimed = totalClaimed; }

    public long getTotalReturned() { return totalReturned; }
    public void setTotalReturned(long totalReturned) { this.totalReturned = totalReturned; }

} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/dto/AuthRequest.java =====
package com.recovr.api.dto;

import jakarta.validation.constraints.NotBlank;
import lombok.Data;

@Data
public class AuthRequest {
    @NotBlank
    private String username;
    
    @NotBlank
    private String password;
} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/dto/ClaimRequestDto.java =====
package com.recovr.api.dto;

import com.recovr.api.entity.ClaimStatus;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import lombok.Data;

import java.time.LocalDateTime;

@Data
public class ClaimRequestDto {
    private Long id;
    
    @NotNull(message = "Item ID is required")
    private Long itemId;
    
    private String itemName;
    
    private Long userId;
    
    private String username;
    
    @NotBlank(message = "Claim message is required")
    private String claimMessage;
    
    private String contactInfo;
    
    private ClaimStatus status;
    
    private LocalDateTime createdAt;
    
    private LocalDateTime updatedAt;
} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/dto/DetectedObjectDto.java =====
package com.recovr.api.dto;

import com.recovr.api.entity.ItemCategory;
import com.recovr.api.entity.DetectionStatus;
import lombok.Data;

import java.time.LocalDateTime;

@Data
public class DetectedObjectDto {
    
    private Long id;
    private String trackingId;
    private ItemCategory category;
    private Double confidenceScore;
    
    // Temporal information
    private LocalDateTime firstDetected;
    private LocalDateTime lastSeen;
    private Long stationaryDuration;
    private Boolean isAbandoned;
    private Long abandonThreshold;
    
    // Location information
    private String cameraLocation;
    private Integer boundingBoxX;
    private Integer boundingBoxY;
    private Integer boundingBoxWidth;
    private Integer boundingBoxHeight;
    
    // Image data
    private String snapshotUrl;
    private LocalDateTime frameTimestamp;
    
    // Status
    private DetectionStatus status;
    
    // Session information
    private Long detectionSessionId;
    private String sessionId;
    
    // Linked item (if claimed)
    private Long linkedItemId;
    private String linkedItemName;
    
    // Timestamps
    private LocalDateTime createdAt;
    private LocalDateTime updatedAt;
} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/dto/ImageMatchingDto.java =====
package com.recovr.api.dto;

import com.recovr.api.entity.ItemCategory;
import lombok.Data;
import java.time.LocalDateTime;

@Data
public class ImageMatchingDto {
    private Long detectedObjectId;
    private double similarityScore;
    private ItemCategory category;
    private String location;
    private LocalDateTime detectedAt;
    private String imageUrl;
} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/dto/ItemDto.java =====
package com.recovr.api.dto;

import com.recovr.api.entity.ItemCategory;
import com.recovr.api.entity.ItemType;
import com.recovr.api.entity.ItemStatus;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.AllArgsConstructor;

import java.time.LocalDateTime;
import java.util.List;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class ItemDto {
    private Long id;
    
    @NotBlank(message = "Item name is required")
    private String name;
    
    private String description;
    
    @NotNull(message = "Item type is required")
    private ItemType type;
    
    @NotNull(message = "Item category is required")
    private ItemCategory category;
    
    @NotNull(message = "Item status is required")
    private ItemStatus status;
    
    private LocalDateTime dateFound;
    
    private LocalDateTime dateLost;
    
    private String location;
    
    private String imageUrl;
    
    private List<String> images;
    
    private Double latitude;
    
    private Double longitude;
    
    private Long userId;
    
    private String username;
    
    private boolean claimed;
    
    // User who reported the item
    private Long reportedById;
    private String reportedByUsername;
    private LocalDateTime reportedAt;
    
    // User who claimed the item (if any)
    private Long claimedById;
    private String claimedByUsername;
    private LocalDateTime claimedAt;
    
    // Timestamps
    private LocalDateTime createdAt;
    private LocalDateTime updatedAt;
} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/dto/RegisterRequest.java =====
package com.recovr.api.dto;

import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Size;
import lombok.Data;

import java.util.Set;

@Data
public class RegisterRequest {
    @NotBlank
    @Size(min = 3, max = 50)
    private String username;

    @NotBlank
    @Size(max = 50)
    @Email
    private String email;

    @NotBlank
    @Size(min = 6, max = 120)
    private String password;

    @Size(max = 50)
    private String firstName;

    @Size(max = 50)
    private String lastName;

    private String phone;

    private Set<String> roles;
} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/dto/SearchRequestDto.java =====
package com.recovr.api.dto;

import com.recovr.api.entity.ItemCategory;
import com.recovr.api.entity.SearchStatus;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.Max;
import lombok.Data;

import java.time.LocalDateTime;
import java.util.List;

@Data
public class SearchRequestDto {
    
    private Long id;
    
    @NotNull(message = "Search image is required")
    private String searchImageUrl;
    
    private String description;
    
    private ItemCategory expectedCategory;
    
    private SearchStatus status;
    
    @Min(value = 0, message = "Matching threshold must be between 0 and 1")
    @Max(value = 1, message = "Matching threshold must be between 0 and 1")
    private Double matchingThreshold;
    
    // Location information
    private String searchLocation;
    private Double searchLatitude;
    private Double searchLongitude;
    
    @Min(value = 0, message = "Search radius must be positive")
    private Double searchRadius;
    
    // Time window for search
    private LocalDateTime dateLostFrom;
    private LocalDateTime dateLostTo;
    
    // Results
    private List<ImageMatchingDto> matchingResults;
    private Integer totalMatchesFound;
    
    // User information
    private Long userId;
    private String username;
    
    // Timestamps
    private LocalDateTime processedAt;
    private LocalDateTime createdAt;
    private LocalDateTime updatedAt;
} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/dto/UserDto.java =====
package com.recovr.api.dto;

import java.util.List;

public class UserDto {
    private Long id;
    private String username;
    private String email;
    private List<String> roles;

    public Long getId() { return id; }
    public void setId(Long id) { this.id = id; }

    public String getUsername() { return username; }
    public void setUsername(String username) { this.username = username; }

    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }

    public List<String> getRoles() { return roles; }
    public void setRoles(List<String> roles) { this.roles = roles; }

} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/entity/ClaimRequest.java =====
package com.recovr.api.entity;

import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.time.LocalDateTime;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "claim_requests")
public class ClaimRequest {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @ManyToOne
    @JoinColumn(name = "item_id", nullable = false)
    private Item item;

    @ManyToOne
    @JoinColumn(name = "user_id", nullable = false)
    private User user;

    @Column(columnDefinition = "TEXT")
    private String claimMessage;

    @Column(name = "contact_info")
    private String contactInfo;

    @Enumerated(EnumType.STRING)
    private ClaimStatus status;

    @Column(name = "created_at")
    private LocalDateTime createdAt;

    @Column(name = "updated_at")
    private LocalDateTime updatedAt;

    @PrePersist
    protected void onCreate() {
        createdAt = LocalDateTime.now();
        updatedAt = LocalDateTime.now();
        status = ClaimStatus.PENDING;
    }

    @PreUpdate
    protected void onUpdate() {
        updatedAt = LocalDateTime.now();
    }
} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/entity/ClaimStatus.java =====
package com.recovr.api.entity;

public enum ClaimStatus {
    PENDING,
    APPROVED,
    REJECTED,
    CANCELLED
} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/entity/DetectedObject.java =====
package com.recovr.api.entity;

import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.time.LocalDateTime;
import java.time.temporal.ChronoUnit;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "detected_objects")
public class DetectedObject {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    // Tracking information
    @Column(name = "tracking_id", unique = true)
    private String trackingId;  // Unique ID for object tracking

    @Enumerated(EnumType.STRING)
    private ItemCategory category;

    @Column(name = "confidence_score")
    private Double confidenceScore; // Detection confidence (0.0 - 1.0)

    // Temporal tracking
    @Column(name = "first_detected")
    private LocalDateTime firstDetected;

    @Column(name = "last_seen")
    private LocalDateTime lastSeen;

    @Column(name = "stationary_duration")
    private Long stationaryDuration; // Seconds the object has been stationary

    @Column(name = "is_abandoned")
    private Boolean isAbandoned = false; // True if stationary > N seconds

    @Column(name = "abandon_threshold")
    private Long abandonThreshold = 300L; // Default 5 minutes in seconds

    // Location information
    @Column(name = "camera_location")
    private String cameraLocation;

    @Column(name = "bounding_box_x")
    private Integer boundingBoxX;

    @Column(name = "bounding_box_y")
    private Integer boundingBoxY;

    @Column(name = "bounding_box_width")
    private Integer boundingBoxWidth;

    @Column(name = "bounding_box_height")
    private Integer boundingBoxHeight;

    // Image data
    @Column(name = "snapshot_url")
    private String snapshotUrl; // URL to the detection snapshot

    @Column(name = "frame_timestamp")
    private LocalDateTime frameTimestamp;

    // Status
    @Enumerated(EnumType.STRING)
    private DetectionStatus status = DetectionStatus.DETECTED;

    // Relationship to detection session
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "detection_session_id")
    private DetectionSession detectionSession;

    // Link to reported item if claimed
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "linked_item_id")
    private Item linkedItem;

    @Column(name = "created_at", updatable = false)
    private LocalDateTime createdAt;

    @Column(name = "updated_at")
    private LocalDateTime updatedAt;

    @PrePersist
    protected void onCreate() {
        createdAt = LocalDateTime.now();
        updatedAt = LocalDateTime.now();
            firstDetected = LocalDateTime.now();
        lastSeen = LocalDateTime.now();
        frameTimestamp = LocalDateTime.now();
        stationaryDuration = 0L;
    }

    @PreUpdate
    protected void onUpdate() {
        updatedAt = LocalDateTime.now();
        
        // Update stationary duration if object is still in the same position
        if (frameTimestamp != null) {
            long secondsSinceLastUpdate = ChronoUnit.SECONDS.between(lastSeen, frameTimestamp);
            if (secondsSinceLastUpdate < 5) { // If less than 5 seconds between updates
                stationaryDuration += secondsSinceLastUpdate;
            
                // Check if object has been stationary long enough to be considered abandoned
                if (!isAbandoned && stationaryDuration >= abandonThreshold) {
                isAbandoned = true;
                }
            } else {
                // Object has moved or been out of frame for too long
                stationaryDuration = 0L;
                isAbandoned = false;
            }
        }
        
        lastSeen = frameTimestamp;
    }

    // Helper method to check if object is considered lost
    public boolean isConsideredLost() {
        return isAbandoned && status == DetectionStatus.ABANDONED;
    }
} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/entity/DetectionSession.java =====
package com.recovr.api.entity;

import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.time.LocalDateTime;
import java.util.List;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "detection_sessions")
public class DetectionSession {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(name = "session_id", unique = true)
    private String sessionId; // Unique identifier for the detection session

    @Column(name = "camera_id")
    private String cameraId; // Identifier for the camera

    @Column(name = "camera_location")
    private String cameraLocation; // Physical location of the camera

    @Column(name = "start_time")
    private LocalDateTime startTime;

    @Column(name = "end_time")
    private LocalDateTime endTime;

    @Column(name = "is_active")
    private Boolean isActive = true;

    @Column(name = "model_version")
    private String modelVersion; // Version of the detection model used

    @Column(name = "confidence_threshold")
    private Double confidenceThreshold = 0.5; // Minimum confidence for detection

    @Column(name = "total_detections")
    private Integer totalDetections = 0;

    @Column(name = "abandoned_objects_count")
    private Integer abandonedObjectsCount = 0;

    // Relationship to detected objects
    @OneToMany(mappedBy = "detectionSession", cascade = CascadeType.ALL)
    private List<DetectedObject> detectedObjects;

    @Column(name = "created_at")
    private LocalDateTime createdAt;

    @Column(name = "updated_at")
    private LocalDateTime updatedAt;

    @PrePersist
    protected void onCreate() {
        createdAt = LocalDateTime.now();
        updatedAt = LocalDateTime.now();
        if (startTime == null) {
            startTime = LocalDateTime.now();
        }
    }

    @PreUpdate
    protected void onUpdate() {
        updatedAt = LocalDateTime.now();
    }

    // Helper method to end the session
    public void endSession() {
        isActive = false;
        endTime = LocalDateTime.now();
    }

    // Helper method to increment detection count
    public void incrementDetections() {
        totalDetections++;
    }

    // Helper method to increment abandoned objects count
    public void incrementAbandonedObjects() {
        abandonedObjectsCount++;
    }
} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/entity/DetectionStatus.java =====
package com.recovr.api.entity;

public enum DetectionStatus {
    DETECTED,    // Object has been detected
    TRACKING,    // Object is being tracked
    ABANDONED,   // Object has been stationary for too long
    CLAIMED,     // Object has been claimed by someone
    RETURNED     // Object has been returned to its owner
} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/entity/ERole.java =====
package com.recovr.api.entity;

public enum ERole {
    ROLE_USER,
    ROLE_ADMIN,
    ROLE_MODERATOR
} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/entity/ImageMatching.java =====
package com.recovr.api.entity;

import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.time.LocalDateTime;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "image_matchings")
public class ImageMatching {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "search_request_id")
    private SearchRequest searchRequest;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "detected_object_id")
    private DetectedObject detectedObject;

    @Column(name = "similarity_score")
    private Double similarityScore;

    @Column(name = "confidence_level")
    private Double confidenceLevel;

    @Column(name = "is_false_positive")
    private Boolean isFalsePositive = false;

    @Column(name = "user_confirmed")
    private Boolean userConfirmed;

    @Enumerated(EnumType.STRING)
    @Column(name = "method")
    private MatchingMethod method;

    @Column(name = "geometric_verification_passed")
    private Boolean geometricVerificationPassed;

    @Column(name = "keypoints_matched")
    private Integer keypointsMatched;

    @Column(name = "total_keypoints_search")
    private Integer totalKeypointsSearch;

    @Column(name = "total_keypoints_matched")
    private Integer totalKeypointsMatched;

    @Column(name = "geographical_distance")
    private Double geographicalDistance;

    @Column(name = "temporal_distance")
    private Integer temporalDistance;

    @Column(name = "created_at", updatable = false)
    private LocalDateTime createdAt;

    @Column(name = "updated_at")
    private LocalDateTime updatedAt;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "item_id")
    private Item item;

    @PrePersist
    protected void onCreate() {
        createdAt = LocalDateTime.now();
        updatedAt = LocalDateTime.now();
    }

    @PreUpdate
    protected void onUpdate() {
        updatedAt = LocalDateTime.now();
    }
} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/entity/ItemCategory.java =====
package com.recovr.api.entity;

public enum ItemCategory {
    ELECTRONICS,
    CLOTHING,
    ACCESSORIES,
    DOCUMENTS,
    KEYS,
    BAGS,
    JEWELRY,
    TOYS,
    BOOKS,
    MISCELLANEOUS
} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/entity/Item.java =====
package com.recovr.api.entity;

import jakarta.persistence.*;
import jakarta.validation.constraints.NotBlank;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "items")
public class Item {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @NotBlank
    private String name;

    @Column(length = 1000)
    private String description;

    @Enumerated(EnumType.STRING)
    @Column(nullable = false)
    private ItemCategory category;

    @Enumerated(EnumType.STRING)
    @Column(nullable = false)
    private ItemStatus status;

    @Column(nullable = false)
    private String location;

    @Column(name = "image_url")
    private String imageUrl;

    @ManyToOne
    @JoinColumn(name = "reported_by_id", nullable = true)
    private User reportedBy;

    @Column(name = "reported_at", nullable = true)
    private LocalDateTime reportedAt;

    @ManyToOne
    @JoinColumn(name = "claimed_by_id")
    private User claimedBy;

    @Column(name = "claimed_at")
    private LocalDateTime claimedAt;

    @Column(name = "created_at")
    private LocalDateTime createdAt;

    @Column(name = "updated_at")
    private LocalDateTime updatedAt;

    @PrePersist
    protected void onCreate() {
        createdAt = LocalDateTime.now();
        updatedAt = LocalDateTime.now();
    }

    @PreUpdate
    protected void onUpdate() {
        updatedAt = LocalDateTime.now();
    }
} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/entity/ItemStatus.java =====
package com.recovr.api.entity;

public enum ItemStatus {
    LOST,      // Item has been reported as lost
    FOUND,     // Item has been found but not claimed
    CLAIMED,   // Item has been claimed by its owner
    RETURNED,  // Item has been returned to its owner
    EXPIRED,   // Item has been in the system for too long
    ABANDONED  // Item has been abandoned (stationary for too long)
} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/entity/ItemType.java =====
package com.recovr.api.entity;

public enum ItemType {
    LOST,
    FOUND
} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/entity/MatchingMethod.java =====
package com.recovr.api.entity;

public enum MatchingMethod {
    CNN_EMBEDDING,    // Using CNN embeddings for similarity
    ORB_FLANN,       // Using ORB keypoints + FLANN matcher
    SIFT_FLANN,      // Using SIFT keypoints + FLANN matcher
    HISTOGRAM,       // Using color histogram comparison
    HYBRID           // Combination of multiple methods
} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/entity/Role.java =====
package com.recovr.api.entity;

import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "roles")
public class Role {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer id;

    @Enumerated(EnumType.STRING)
    @Column(length = 20)
    private ERole name;

    public Role(ERole name) {
        this.name = name;
    }
} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/entity/SearchRequest.java =====
package com.recovr.api.entity;

import jakarta.persistence.*;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.AllArgsConstructor;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "search_requests")
public class SearchRequest {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(name = "search_image_url")
    private String searchImageUrl;

    @Column(length = 1000)
    private String description;

    @Enumerated(EnumType.STRING)
    @Column(name = "expected_category")
    private ItemCategory expectedCategory;

    @Column(name = "matching_threshold")
    private Double matchingThreshold = 0.7;

    @Column(name = "search_location")
    private String searchLocation;

    @Column(name = "search_latitude")
    private Double searchLatitude;

    @Column(name = "search_longitude")
    private Double searchLongitude;

    @Column(name = "search_radius")
    private Double searchRadius;

    @Column(name = "date_lost_from")
    private LocalDateTime dateLostFrom;

    @Column(name = "date_lost_to")
    private LocalDateTime dateLostTo;

    @Enumerated(EnumType.STRING)
    private SearchStatus status = SearchStatus.PENDING;

    @Column(name = "total_matches_found")
    private Integer totalMatchesFound = 0;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "user_id")
    private User user;

    @OneToMany(mappedBy = "searchRequest", cascade = CascadeType.ALL, orphanRemoval = true)
    private List<ImageMatching> matchingResults = new ArrayList<>();

    @Column(name = "processed_at")
    private LocalDateTime processedAt;

    @Column(name = "created_at", updatable = false)
    private LocalDateTime createdAt;

    @Column(name = "updated_at")
    private LocalDateTime updatedAt;

    @PrePersist
    protected void onCreate() {
        createdAt = LocalDateTime.now();
        updatedAt = LocalDateTime.now();
    }

    @PreUpdate
    protected void onUpdate() {
        updatedAt = LocalDateTime.now();
    }

    // Helper method to mark as processed
    public void markAsProcessed() {
        status = SearchStatus.COMPLETED;
        processedAt = LocalDateTime.now();
    }
} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/entity/SearchStatus.java =====
package com.recovr.api.entity;

public enum SearchStatus {
    PENDING,
    PROCESSING,  // Search is being processed
    COMPLETED,   // Search has been completed
    FAILED,      // Search failed due to error
    CANCELLED    // Search was cancelled by user
} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/entity/User.java =====
package com.recovr.api.entity;

import jakarta.persistence.*;
import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Size;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.AllArgsConstructor;

import java.time.LocalDateTime;
import java.util.HashSet;
import java.util.Set;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "users",
       uniqueConstraints = {
        @UniqueConstraint(columnNames = "username"),
        @UniqueConstraint(columnNames = "email")
})
public class User {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @NotBlank
    @Size(max = 20)
    private String username;

    @NotBlank
    @Size(max = 50)
    @Email
    private String email;

    @NotBlank
    @Size(max = 120)
    private String password;

    @Column(name = "first_name")
    private String firstName;

    @Column(name = "last_name")
    private String lastName;

    private String phone;

    @Column(name = "avatar_url")
    private String avatarUrl;

    @ManyToMany(fetch = FetchType.LAZY)
    @JoinTable(name = "user_roles",
               joinColumns = @JoinColumn(name = "user_id"),
               inverseJoinColumns = @JoinColumn(name = "role_id"))
    private Set<Role> roles = new HashSet<>();

    @Column(name = "created_at", updatable = false)
    private LocalDateTime createdAt;

    @Column(name = "updated_at")
    private LocalDateTime updatedAt;

    @PrePersist
    protected void onCreate() {
        createdAt = LocalDateTime.now();
        updatedAt = LocalDateTime.now();
    }

    @PreUpdate
    protected void onUpdate() {
        updatedAt = LocalDateTime.now();
    }
} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/exception/GlobalExceptionHandler.java =====
package com.recovr.api.exception;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.AccessDeniedException;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.context.request.WebRequest;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

@ControllerAdvice
public class GlobalExceptionHandler {

    @ExceptionHandler(ResourceNotFoundException.class)
    public ResponseEntity<?> resourceNotFoundException(ResourceNotFoundException ex, WebRequest request) {
        ErrorResponse errorDetails = new ErrorResponse(
                new Date(),
                HttpStatus.NOT_FOUND.value(),
                "Not Found",
                ex.getMessage(),
                request.getDescription(false));
        
        return new ResponseEntity<>(errorDetails, HttpStatus.NOT_FOUND);
    }

    @ExceptionHandler(BadCredentialsException.class)
    public ResponseEntity<?> badCredentialsException(BadCredentialsException ex, WebRequest request) {
        ErrorResponse errorDetails = new ErrorResponse(
                new Date(),
                HttpStatus.UNAUTHORIZED.value(),
                "Unauthorized",
                "Invalid username or password",
                request.getDescription(false));
        
        return new ResponseEntity<>(errorDetails, HttpStatus.UNAUTHORIZED);
    }

    @ExceptionHandler(AccessDeniedException.class)
    public ResponseEntity<?> accessDeniedException(AccessDeniedException ex, WebRequest request) {
        ErrorResponse errorDetails = new ErrorResponse(
                new Date(),
                HttpStatus.FORBIDDEN.value(),
                "Forbidden",
                ex.getMessage(),
                request.getDescription(false));
        
        return new ResponseEntity<>(errorDetails, HttpStatus.FORBIDDEN);
    }

    @ExceptionHandler(MethodArgumentNotValidException.class)
    public ResponseEntity<?> handleValidationExceptions(MethodArgumentNotValidException ex) {
        Map<String, String> errors = new HashMap<>();
        ex.getBindingResult().getAllErrors().forEach((error) -> {
            String fieldName = ((FieldError) error).getField();
            String errorMessage = error.getDefaultMessage();
            errors.put(fieldName, errorMessage);
        });
        
        return new ResponseEntity<>(errors, HttpStatus.BAD_REQUEST);
    }

    @ExceptionHandler(Exception.class)
    public ResponseEntity<?> globalExceptionHandler(Exception ex, WebRequest request) {
        ErrorResponse errorDetails = new ErrorResponse(
                new Date(),
                HttpStatus.INTERNAL_SERVER_ERROR.value(),
                "Internal Server Error",
                ex.getMessage(),
                request.getDescription(false));
        
        return new ResponseEntity<>(errorDetails, HttpStatus.INTERNAL_SERVER_ERROR);
    }
}

class ErrorResponse {
    private Date timestamp;
    private int status;
    private String error;
    private String message;
    private String details;

    public ErrorResponse(Date timestamp, int status, String error, String message, String details) {
        this.timestamp = timestamp;
        this.status = status;
        this.error = error;
        this.message = message;
        this.details = details;
    }

    public Date getTimestamp() {
        return timestamp;
    }

    public int getStatus() {
        return status;
    }

    public String getError() {
        return error;
    }

    public String getMessage() {
        return message;
    }

    public String getDetails() {
        return details;
    }
} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/exception/ResourceNotFoundException.java =====
package com.recovr.api.exception;

import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.ResponseStatus;

@ResponseStatus(value = HttpStatus.NOT_FOUND)
public class ResourceNotFoundException extends RuntimeException {
    private static final long serialVersionUID = 1L;

    public ResourceNotFoundException(String message) {
        super(message);
    }
} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/RecovRApplication.java =====
package com.recovr.api;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.context.properties.EnableConfigurationProperties;

@SpringBootApplication
public class RecovRApplication {

    public static void main(String[] args) {
        SpringApplication.run(RecovRApplication.class, args);
    }
} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/repository/ClaimRequestRepository.java =====
package com.recovr.api.repository;

import com.recovr.api.entity.ClaimRequest;
import com.recovr.api.entity.ClaimStatus;
import com.recovr.api.entity.Item;
import com.recovr.api.entity.User;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.Optional;

@Repository
public interface ClaimRequestRepository extends JpaRepository<ClaimRequest, Long> {
    List<ClaimRequest> findByItem(Item item);
    
    Page<ClaimRequest> findByUser(User user, Pageable pageable);
    
    Page<ClaimRequest> findByStatus(ClaimStatus status, Pageable pageable);
    
    Page<ClaimRequest> findByUserAndStatus(User user, ClaimStatus status, Pageable pageable);
    
    Page<ClaimRequest> findByItemAndStatus(Item item, ClaimStatus status, Pageable pageable);
    
    boolean existsByItemAndUser(Item item, User user);
    
    Optional<ClaimRequest> findByItemAndUserAndStatus(Item item, User user, ClaimStatus status);
} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/repository/DetectedObjectRepository.java =====
package com.recovr.api.repository;

import com.recovr.api.entity.DetectedObject;
import com.recovr.api.entity.DetectionSession;
import com.recovr.api.entity.DetectionStatus;
import com.recovr.api.entity.ItemCategory;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

@Repository
public interface DetectedObjectRepository extends JpaRepository<DetectedObject, Long> {

    // Find by tracking ID
    Optional<DetectedObject> findByTrackingId(String trackingId);

    // Find by status
    List<DetectedObject> findByStatus(DetectionStatus status);
    Page<DetectedObject> findByStatus(DetectionStatus status, Pageable pageable);

    // Find abandoned objects
    List<DetectedObject> findByIsAbandonedTrue();
    Page<DetectedObject> findByIsAbandonedTrue(Pageable pageable);

    // Find by detection session
    List<DetectedObject> findByDetectionSession(DetectionSession session);
    Page<DetectedObject> findByDetectionSession(DetectionSession session, Pageable pageable);

    // Find by category
    List<DetectedObject> findByCategory(ItemCategory category);
    Page<DetectedObject> findByCategory(ItemCategory category, Pageable pageable);

    // Find by camera location
    List<DetectedObject> findByCameraLocation(String cameraLocation);
    Page<DetectedObject> findByCameraLocation(String cameraLocation, Pageable pageable);

    // Find objects detected in time range
    List<DetectedObject> findByFirstDetectedBetween(LocalDateTime start, LocalDateTime end);

    // Find long-stationary objects (potential lost items)
    @Query("SELECT d FROM DetectedObject d WHERE d.stationaryDuration >= :threshold AND d.status = :status")
    List<DetectedObject> findLongStationaryObjects(@Param("threshold") Long threshold, @Param("status") DetectionStatus status);

    // Find objects by confidence above threshold
    @Query("SELECT d FROM DetectedObject d WHERE d.confidenceScore >= :threshold")
    List<DetectedObject> findHighConfidenceDetections(@Param("threshold") Double threshold);

    // Count detections by session
    Long countByDetectionSession(DetectionSession session);

    // Count abandoned objects by location
    @Query("SELECT COUNT(d) FROM DetectedObject d WHERE d.cameraLocation = :location AND d.isAbandoned = true")
    Long countAbandonedByLocation(@Param("location") String location);

    // Find recent detections
    @Query("SELECT d FROM DetectedObject d WHERE d.lastSeen >= :since ORDER BY d.lastSeen DESC")
    List<DetectedObject> findRecentDetections(@Param("since") LocalDateTime since);

    // Find unlinked abandoned objects (not yet linked to any Item)
    @Query("SELECT d FROM DetectedObject d WHERE d.isAbandoned = true AND d.linkedItem IS NULL")
    List<DetectedObject> findUnlinkedAbandonedObjects();
} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/repository/DetectionSessionRepository.java =====
package com.recovr.api.repository;

import com.recovr.api.entity.DetectionSession;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

@Repository
public interface DetectionSessionRepository extends JpaRepository<DetectionSession, Long> {

    // Find by session ID
    Optional<DetectionSession> findBySessionId(String sessionId);

    // Find by camera ID
    List<DetectionSession> findByCameraId(String cameraId);
    Page<DetectionSession> findByCameraId(String cameraId, Pageable pageable);

    // Find active sessions
    List<DetectionSession> findByIsActiveTrue();

    // Find by camera location
    List<DetectionSession> findByCameraLocation(String cameraLocation);

    // Find sessions by time range
    List<DetectionSession> findByStartTimeBetween(LocalDateTime start, LocalDateTime end);

    // Find sessions with most detections
    @Query("SELECT d FROM DetectionSession d ORDER BY d.totalDetections DESC")
    List<DetectionSession> findSessionsOrderByDetections(Pageable pageable);

    // Find sessions with abandoned objects
    @Query("SELECT d FROM DetectionSession d WHERE d.abandonedObjectsCount > 0")
    List<DetectionSession> findSessionsWithAbandonedObjects();

    // Get statistics by camera
    @Query("SELECT d.cameraId, COUNT(d), SUM(d.totalDetections), SUM(d.abandonedObjectsCount) " +
           "FROM DetectionSession d GROUP BY d.cameraId")
    List<Object[]> getDetectionStatsByCamera();

    // Find long-running sessions
    @Query("SELECT d FROM DetectionSession d WHERE d.isActive = true AND d.startTime <= :threshold")
    List<DetectionSession> findLongRunningSessions(@Param("threshold") LocalDateTime threshold);
} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/repository/ImageMatchingRepository.java =====
package com.recovr.api.repository;

import com.recovr.api.entity.ImageMatching;
import com.recovr.api.entity.SearchRequest;
import com.recovr.api.entity.Item;
import com.recovr.api.entity.DetectedObject;
import com.recovr.api.entity.MatchingMethod;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.time.LocalDateTime;
import java.util.List;

@Repository
public interface ImageMatchingRepository extends JpaRepository<ImageMatching, Long> {

    // Find by search request
    List<ImageMatching> findBySearchRequest(SearchRequest searchRequest);
    Page<ImageMatching> findBySearchRequest(SearchRequest searchRequest, Pageable pageable);

    // Find by matched item
    List<ImageMatching> findByItem(Item item);

    // Find by matched detected object
    List<ImageMatching> findByDetectedObject(DetectedObject detectedObject);

    // Find by matching method
    List<ImageMatching> findByMethod(MatchingMethod method);

    // Find high similarity matches
    @Query("SELECT m FROM ImageMatching m WHERE m.similarityScore >= :threshold ORDER BY m.similarityScore DESC")
    List<ImageMatching> findHighSimilarityMatches(@Param("threshold") Double threshold);

    // Find high confidence matches
    @Query("SELECT m FROM ImageMatching m WHERE m.confidenceLevel >= :threshold ORDER BY m.confidenceLevel DESC")
    List<ImageMatching> findHighConfidenceMatches(@Param("threshold") Double threshold);

    // Find confirmed matches by users
    List<ImageMatching> findByUserConfirmedTrue();

    // Find false positives
    List<ImageMatching> findByIsFalsePositiveTrue();

    // Find matches for search request above threshold
    @Query("SELECT m FROM ImageMatching m WHERE m.searchRequest = :searchRequest AND m.similarityScore >= :threshold ORDER BY m.similarityScore DESC")
    List<ImageMatching> findMatchesAboveThreshold(@Param("searchRequest") SearchRequest searchRequest, @Param("threshold") Double threshold);

    // Find best match for search request
    @Query("SELECT m FROM ImageMatching m WHERE m.searchRequest = :searchRequest ORDER BY m.similarityScore DESC, m.confidenceLevel DESC")
    List<ImageMatching> findBestMatches(@Param("searchRequest") SearchRequest searchRequest, Pageable pageable);

    // Find matches by creation time
    List<ImageMatching> findByCreatedAtBetween(LocalDateTime start, LocalDateTime end);

    // Count matches by search request
    Long countBySearchRequest(SearchRequest searchRequest);

    // Count confirmed matches
    Long countByUserConfirmedTrue();

    // Count false positives
    Long countByIsFalsePositiveTrue();

    // Get accuracy statistics
    @Query("SELECT m.method, COUNT(m), " +
           "SUM(CASE WHEN m.userConfirmed = true THEN 1 ELSE 0 END), " +
           "SUM(CASE WHEN m.isFalsePositive = true THEN 1 ELSE 0 END) " +
           "FROM ImageMatching m GROUP BY m.method")
    List<Object[]> getAccuracyStatsByMethod();

    // Find matches needing user feedback
    @Query("SELECT m FROM ImageMatching m WHERE m.userConfirmed IS NULL AND m.similarityScore >= :threshold")
    List<ImageMatching> findMatchesNeedingFeedback(@Param("threshold") Double threshold);

    // Find geometric verified matches (for ORB/FLANN method)
    List<ImageMatching> findByGeometricVerificationPassedTrue();

    // Find recent matches
    @Query("SELECT m FROM ImageMatching m ORDER BY m.createdAt DESC")
    List<ImageMatching> findRecentMatches(Pageable pageable);
} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/repository/ItemRepository.java =====
package com.recovr.api.repository;

import com.recovr.api.entity.Item;
import com.recovr.api.entity.ItemCategory;
import com.recovr.api.entity.ItemStatus;
import com.recovr.api.entity.ItemType;
import com.recovr.api.entity.User;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.JpaSpecificationExecutor;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.time.LocalDateTime;
import java.util.List;

@Repository
public interface ItemRepository extends JpaRepository<Item, Long>, JpaSpecificationExecutor<Item> {
    Page<Item> findByReportedBy(User user, Pageable pageable);
    
    Page<Item> findByClaimedBy(User user, Pageable pageable);
    
    Page<Item> findByClaimedAtIsNotNull(Pageable pageable);
    Page<Item> findByClaimedAtIsNull(Pageable pageable);
    
    long countByStatus(ItemStatus status);
    
    long countByCategory(ItemCategory category);
} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/repository/RoleRepository.java =====
package com.recovr.api.repository;

import com.recovr.api.entity.ERole;
import com.recovr.api.entity.Role;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.Optional;

@Repository
public interface RoleRepository extends JpaRepository<Role, Integer> {
    Optional<Role> findByName(ERole name);
} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/repository/SearchRequestRepository.java =====
package com.recovr.api.repository;

import com.recovr.api.entity.SearchRequest;
import com.recovr.api.entity.SearchStatus;
import com.recovr.api.entity.ItemCategory;
import com.recovr.api.entity.User;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.time.LocalDateTime;
import java.util.List;

@Repository
public interface SearchRequestRepository extends JpaRepository<SearchRequest, Long> {

    // Find by user
    List<SearchRequest> findByUser(User user);
    Page<SearchRequest> findByUser(User user, Pageable pageable);

    // Find by status
    List<SearchRequest> findByStatus(SearchStatus status);
    Page<SearchRequest> findByStatus(SearchStatus status, Pageable pageable);

    // Find by user and status
    Page<SearchRequest> findByUserAndStatus(User user, SearchStatus status, Pageable pageable);

    // Find by expected category
    List<SearchRequest> findByExpectedCategory(ItemCategory category);

    // Find processing requests (for background processing)
    List<SearchRequest> findByStatusOrderByCreatedAtAsc(SearchStatus status);

    // Find searches in location radius
    @Query("SELECT s FROM SearchRequest s WHERE " +
           "s.searchLatitude IS NOT NULL AND s.searchLongitude IS NOT NULL AND " +
           "s.searchLocation = :location")
    List<SearchRequest> findBySearchLocation(@Param("location") String location);

    // Find searches by time range
    List<SearchRequest> findByCreatedAtBetween(LocalDateTime start, LocalDateTime end);

    // Find searches with matches found
    @Query("SELECT s FROM SearchRequest s WHERE s.totalMatchesFound > 0")
    List<SearchRequest> findSearchesWithMatches();

    // Find searches without matches
    @Query("SELECT s FROM SearchRequest s WHERE s.totalMatchesFound = 0 AND s.status = 'COMPLETED'")
    List<SearchRequest> findSearchesWithoutMatches();

    // Count searches by status
    Long countByStatus(SearchStatus status);

    // Count searches by user
    Long countByUser(User user);

    // Get search statistics
    @Query("SELECT s.status, COUNT(s) FROM SearchRequest s GROUP BY s.status")
    List<Object[]> getSearchStatsByStatus();

    // Find recent searches
    @Query("SELECT s FROM SearchRequest s ORDER BY s.createdAt DESC")
    List<SearchRequest> findRecentSearches(Pageable pageable);

    // Find searches needing reprocessing (failed searches older than threshold)
    @Query("SELECT s FROM SearchRequest s WHERE s.status = 'FAILED' AND s.createdAt <= :threshold")
    List<SearchRequest> findSearchesNeedingReprocessing(@Param("threshold") LocalDateTime threshold);
} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/repository/UserRepository.java =====
package com.recovr.api.repository;

import com.recovr.api.entity.User;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.Optional;

@Repository
public interface UserRepository extends JpaRepository<User, Long> {
    Optional<User> findByUsername(String username);
    Optional<User> findByEmail(String email);
    Boolean existsByUsername(String username);
    Boolean existsByEmail(String email);
} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/security/services/UserDetailsImpl.java =====
package com.recovr.api.security.services;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.recovr.api.entity.User;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

import java.util.Collection;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

public class UserDetailsImpl implements UserDetails {
    private static final long serialVersionUID = 1L;

    private Long id;
    private String username;
    private String email;
    @JsonIgnore
    private String password;
    private String firstName;
    private String lastName;
    private String avatarUrl;

    private Collection<? extends GrantedAuthority> authorities;

    public UserDetailsImpl(Long id, String username, String email, String password,
                          String firstName, String lastName, String avatarUrl,
                          Collection<? extends GrantedAuthority> authorities) {
        this.id = id;
        this.username = username;
        this.email = email;
        this.password = password;
        this.firstName = firstName;
        this.lastName = lastName;
        this.avatarUrl = avatarUrl;
        this.authorities = authorities;
    }

    public static UserDetailsImpl build(User user) {
        List<GrantedAuthority> authorities = user.getRoles().stream()
                .map(role -> new SimpleGrantedAuthority(role.getName().name()))
                .collect(Collectors.toList());

        return new UserDetailsImpl(
                user.getId(),
                user.getUsername(),
                user.getEmail(),
                user.getPassword(),
                user.getFirstName(),
                user.getLastName(),
                user.getAvatarUrl(),
                authorities);
    }

    @Override
    public Collection<? extends GrantedAuthority> getAuthorities() {
        return authorities;
    }

    public Long getId() {
        return id;
    }

    public String getEmail() {
        return email;
    }

    public String getFirstName() {
        return firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public String getAvatarUrl() {
        return avatarUrl;
    }

    @Override
    public String getPassword() {
        return password;
    }

    @Override
    public String getUsername() {
        return username;
    }

    @Override
    public boolean isAccountNonExpired() {
        return true;
    }

    @Override
    public boolean isAccountNonLocked() {
        return true;
    }

    @Override
    public boolean isCredentialsNonExpired() {
        return true;
    }

    @Override
    public boolean isEnabled() {
        return true;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o)
            return true;
        if (o == null || getClass() != o.getClass())
            return false;
        UserDetailsImpl user = (UserDetailsImpl) o;
        return Objects.equals(id, user.id);
    }
} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/security/services/UserDetailsServiceImpl.java =====
package com.recovr.api.security.services;

import com.recovr.api.entity.User;
import com.recovr.api.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Service
public class UserDetailsServiceImpl implements UserDetailsService {
    @Autowired
    UserRepository userRepository;

    @Override
    @Transactional
    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
        System.out.println("[UserDetailsServiceImpl] Chargement de l'utilisateur: " + username);
        User user = userRepository.findByUsername(username)
                .orElseThrow(() -> new UsernameNotFoundException("User Not Found with username: " + username));

        return UserDetailsImpl.build(user);
    }
} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/security/WebSecurityConfig.java =====
package com.recovr.api.security;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
@EnableWebSecurity
public class WebSecurityConfig {
    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http
            .csrf(csrf -> csrf.disable())
            .authorizeHttpRequests(auth -> auth
                .anyRequest().permitAll()
            );
        return http.build();
    }
} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/service/AdminService.java =====
package com.recovr.api.service;

import com.recovr.api.dto.AdminDashboardDto;
import com.recovr.api.dto.ItemDto;
import com.recovr.api.dto.UserDto;
import com.recovr.api.entity.Item;
import com.recovr.api.entity.ItemCategory;
import com.recovr.api.entity.ItemStatus;
import com.recovr.api.entity.User;
import com.recovr.api.repository.ItemRepository;
import com.recovr.api.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

@Service
public class AdminService {

    @Autowired
    private ItemRepository itemRepository;

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private ItemService itemService;

    @Transactional(readOnly = true)
    public AdminDashboardDto getAdminDashboard() {
         AdminDashboardDto dashboard = new AdminDashboardDto();
         dashboard.setTotalItems(itemRepository.count());
         dashboard.setTotalUsers(userRepository.count());
         Map<String, Long> statusMap = new HashMap<>();
         for (ItemStatus status : ItemStatus.values()) {
             statusMap.put(status.name(), itemRepository.countByStatus(status));
         }
         dashboard.setItemsByStatus(statusMap);
         Map<String, Long> categoryMap = new HashMap<>();
         for (ItemCategory cat : ItemCategory.values()) {
             categoryMap.put(cat.name(), itemRepository.countByCategory(cat));
         }
         dashboard.setItemsByCategory(categoryMap);
         dashboard.setTotalAbandoned(itemRepository.countByStatus(ItemStatus.ABANDONED));
         dashboard.setTotalClaimed(itemRepository.countByStatus(ItemStatus.CLAIMED));
         dashboard.setTotalReturned(itemRepository.countByStatus(ItemStatus.RETURNED));
         return dashboard;
    }

    @Transactional(readOnly = true)
    public List<ItemDto> getAllItemsAdmin() {
         List<Item> items = itemRepository.findAll();
         return items.stream().map(itemService::convertToDto).collect(Collectors.toList());
    }

    @Transactional(readOnly = true)
    public List<UserDto> getAllUsersAdmin() {
         List<User> users = userRepository.findAll();
         return users.stream().map(this::convertToUserDto).collect(Collectors.toList());
    }

    @Transactional
    public void deleteItemAdmin(Long id) {
         if (!itemRepository.existsById(id)) { throw new RuntimeException("Item not found"); }
         itemRepository.deleteById(id);
    }

    @Transactional
    public void deleteUserAdmin(Long id) {
         if (!userRepository.existsById(id)) { throw new RuntimeException("User not found"); }
         userRepository.deleteById(id);
    }

    @Transactional
    public ItemDto updateItemAdmin(Long id, ItemDto itemDto) {
         Item item = itemRepository.findById(id).orElseThrow(() -> new RuntimeException("Item not found"));
         itemService.updateItemFromDto(item, itemDto);
         Item savedItem = itemRepository.save(item);
         return itemService.convertToDto(savedItem);
    }

    @Transactional
    public UserDto updateUserAdmin(Long id, UserDto userDto) {
         User user = userRepository.findById(id).orElseThrow(() -> new RuntimeException("User not found"));
         user.setUsername(userDto.getUsername());
         user.setEmail(userDto.getEmail());
         // (Si vous avez une logique de mise à jour des rôles, vous pouvez l'ajouter ici)
         User savedUser = userRepository.save(user);
         return convertToUserDto(savedUser);
    }

    private UserDto convertToUserDto(User user) {
         UserDto dto = new UserDto();
         dto.setId(user.getId());
         dto.setUsername(user.getUsername());
         dto.setEmail(user.getEmail());
         // (Si vous avez une logique pour convertir les rôles, vous pouvez l'ajouter ici)
         return dto;
    }

} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/service/DetectionService.java =====
package com.recovr.api.service;

import com.recovr.api.dto.DetectedObjectDto;
import com.recovr.api.entity.*;
import com.recovr.api.repository.DetectedObjectRepository;
import com.recovr.api.repository.DetectionSessionRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.UUID;
import java.util.stream.Collectors;
import java.util.HashMap;

@Slf4j
@Service
@RequiredArgsConstructor
public class DetectionService {

    private final DetectedObjectRepository detectedObjectRepository;
    private final DetectionSessionRepository detectionSessionRepository;

    @Value("${app.models.path:../}")
    private String modelsPath;

    @Value("${app.detection.abandon-threshold:300}")
    private Long defaultAbandonThreshold; // 5 minutes in seconds

    @Value("${app.detection.confidence-threshold:0.5}")
    private Double defaultConfidenceThreshold;

    /**
     * Start a new detection session for a camera
     */
    @Transactional
    public DetectionSession startDetectionSession(String cameraId, String cameraLocation, String modelVersion) {
        log.info("Starting detection session for camera: {} at location: {}", cameraId, cameraLocation);

        DetectionSession session = new DetectionSession();
        session.setSessionId(UUID.randomUUID().toString());
        session.setCameraId(cameraId);
        session.setCameraLocation(cameraLocation);
        session.setModelVersion(modelVersion);
        session.setConfidenceThreshold(defaultConfidenceThreshold);
        session.setIsActive(true);

        return detectionSessionRepository.save(session);
    }

    /**
     * End a detection session
     */
    @Transactional
    public void endDetectionSession(String sessionId) {
        Optional<DetectionSession> sessionOpt = detectionSessionRepository.findBySessionId(sessionId);
        if (sessionOpt.isPresent()) {
            DetectionSession session = sessionOpt.get();
            session.endSession();
            detectionSessionRepository.save(session);
            log.info("Ended detection session: {}", sessionId);
        }
    }

    /**
     * Process a detection result from PyTorch model
     * This method will be called when your model detects an object
     */
    @Transactional
    public DetectedObject processDetection(
            String sessionId,
            String trackingId,
            ItemCategory category,
            Double confidence,
            int x, int y, int width, int height,
            String snapshotUrl) {

        log.info("Processing detection - Tracking ID: {}, Category: {}, Confidence: {}",
                trackingId, category, confidence);

        // Find or create detected object
        Optional<DetectedObject> existingOpt = detectedObjectRepository.findByTrackingId(trackingId);

        DetectedObject detectedObject;
        if (existingOpt.isPresent()) {
            // Update existing detection
            detectedObject = existingOpt.get();
            updateExistingDetection(detectedObject, confidence, x, y, width, height, snapshotUrl);
        } else {
            // Create new detection
            detectedObject = createNewDetection(sessionId, trackingId, category, confidence,
                    x, y, width, height, snapshotUrl);
        }

        return detectedObjectRepository.save(detectedObject);
    }

    /**
     * Update tracking information for existing detection
     */
    private void updateExistingDetection(DetectedObject detectedObject, Double confidence,
                                         int x, int y, int width, int height, String snapshotUrl) {
        detectedObject.setConfidenceScore(confidence);
        detectedObject.setBoundingBoxX(x);
        detectedObject.setBoundingBoxY(y);
        detectedObject.setBoundingBoxWidth(width);
        detectedObject.setBoundingBoxHeight(height);
        detectedObject.setSnapshotUrl(snapshotUrl);
        detectedObject.setFrameTimestamp(LocalDateTime.now());

        // The @PreUpdate will handle lastSeen and stationary duration calculation
    }

    /**
     * Create new detected object
     */
    private DetectedObject createNewDetection(String sessionId, String trackingId, ItemCategory category,
                                              Double confidence, int x, int y, int width, int height,
                                              String snapshotUrl) {

        DetectionSession session = detectionSessionRepository.findBySessionId(sessionId)
                .orElseThrow(() -> new RuntimeException("Detection session not found: " + sessionId));

        DetectedObject detectedObject = new DetectedObject();
        detectedObject.setTrackingId(trackingId);
        detectedObject.setCategory(category);
        detectedObject.setConfidenceScore(confidence);
        detectedObject.setBoundingBoxX(x);
        detectedObject.setBoundingBoxY(y);
        detectedObject.setBoundingBoxWidth(width);
        detectedObject.setBoundingBoxHeight(height);
        detectedObject.setSnapshotUrl(snapshotUrl);
        detectedObject.setFrameTimestamp(LocalDateTime.now());
        detectedObject.setCameraLocation(session.getCameraLocation());
        detectedObject.setDetectionSession(session);
        detectedObject.setAbandonThreshold(defaultAbandonThreshold);

        // Update session statistics
        session.incrementDetections();

        return detectedObject;
    }

    /**
     * Get all abandoned objects (potential lost items)
     */
    public List<DetectedObjectDto> getAbandonedObjects() {
        List<DetectedObject> abandonedObjects = detectedObjectRepository.findByIsAbandonedTrue();
        return abandonedObjects.stream()
                .map(this::convertToDto)
                .collect(Collectors.toList());
    }

    /**
     * Get recent detections
     */
    public List<DetectedObjectDto> getRecentDetections(int hoursBack) {
        LocalDateTime since = LocalDateTime.now().minusHours(hoursBack);
        List<DetectedObject> recentDetections = detectedObjectRepository.findRecentDetections(since);
        return recentDetections.stream()
                .map(this::convertToDto)
                .collect(Collectors.toList());
    }

    /**
     * Mark detected object as claimed/linked to a reported item
     */
    @Transactional
    public void linkDetectedObjectToItem(Long detectedObjectId, Long itemId) {
        DetectedObject detectedObject = detectedObjectRepository.findById(detectedObjectId)
                .orElseThrow(() -> new RuntimeException("Detected object not found"));

        // Note: You'll need to inject ItemRepository to get the Item
        // For now, just set the ID - you can improve this later
        detectedObject.setStatus(DetectionStatus.CLAIMED);
        detectedObjectRepository.save(detectedObject);

        log.info("Linked detected object {} to item {}", detectedObjectId, itemId);
    }

    /**
     * Convert entity to DTO
     */
    private DetectedObjectDto convertToDto(DetectedObject detectedObject) {
        DetectedObjectDto dto = new DetectedObjectDto();
        dto.setId(detectedObject.getId());
        dto.setTrackingId(detectedObject.getTrackingId());
        dto.setCategory(detectedObject.getCategory());
        dto.setConfidenceScore(detectedObject.getConfidenceScore());
        dto.setFirstDetected(detectedObject.getFirstDetected());
        dto.setLastSeen(detectedObject.getLastSeen());
        dto.setStationaryDuration(detectedObject.getStationaryDuration());
        dto.setIsAbandoned(detectedObject.getIsAbandoned());
        dto.setAbandonThreshold(detectedObject.getAbandonThreshold());
        dto.setCameraLocation(detectedObject.getCameraLocation());
        dto.setBoundingBoxX(detectedObject.getBoundingBoxX());
        dto.setBoundingBoxY(detectedObject.getBoundingBoxY());
        dto.setBoundingBoxWidth(detectedObject.getBoundingBoxWidth());
        dto.setBoundingBoxHeight(detectedObject.getBoundingBoxHeight());
        dto.setSnapshotUrl(detectedObject.getSnapshotUrl());
        dto.setFrameTimestamp(detectedObject.getFrameTimestamp());
        dto.setStatus(detectedObject.getStatus());
        
        if (detectedObject.getDetectionSession() != null) {
            dto.setDetectionSessionId(detectedObject.getDetectionSession().getId());
            dto.setSessionId(detectedObject.getDetectionSession().getSessionId());
        }
        
        if (detectedObject.getLinkedItem() != null) {
            dto.setLinkedItemId(detectedObject.getLinkedItem().getId());
            dto.setLinkedItemName(detectedObject.getLinkedItem().getName());
        }
        
        dto.setCreatedAt(detectedObject.getCreatedAt());
        dto.setUpdatedAt(detectedObject.getUpdatedAt());
        
        return dto;
    }

    /**
     * Get detection statistics
     */
    public Map<String, Object> getDetectionStats() {
        LocalDateTime now = LocalDateTime.now();
        LocalDateTime last24Hours = now.minusHours(24);
        LocalDateTime lastWeek = now.minusWeeks(1);
        LocalDateTime lastMonth = now.minusMonths(1);

        // Get active sessions
        List<DetectionSession> activeSessions = detectionSessionRepository.findByIsActiveTrue();
        
        // Get recent detections
        List<DetectedObject> recentDetections = detectedObjectRepository.findRecentDetections(last24Hours);
        
        // Get abandoned objects
        List<DetectedObject> abandonedObjects = detectedObjectRepository.findByIsAbandonedTrue();
        
        // Calculate statistics
        Map<String, Object> stats = new HashMap<>();
        
        // Overall statistics
        stats.put("totalDetections", detectedObjectRepository.count());
        stats.put("activeSessions", activeSessions.size());
        stats.put("abandonedObjects", abandonedObjects.size());
        
        // Time-based statistics
        stats.put("detectionsLast24Hours", recentDetections.size());
        stats.put("detectionsLastWeek", detectedObjectRepository.findByFirstDetectedBetween(lastWeek, now).size());
        stats.put("detectionsLastMonth", detectedObjectRepository.findByFirstDetectedBetween(lastMonth, now).size());
        
        // Category distribution
        Map<ItemCategory, Long> categoryDistribution = recentDetections.stream()
            .collect(Collectors.groupingBy(
                DetectedObject::getCategory,
                Collectors.counting()
            ));
        stats.put("categoryDistribution", categoryDistribution);
        
        // Location statistics
        Map<String, Long> locationStats = recentDetections.stream()
            .collect(Collectors.groupingBy(
                DetectedObject::getCameraLocation,
                Collectors.counting()
            ));
        stats.put("locationStats", locationStats);
        
        // Recovery rate (claimed vs total abandoned)
        long totalAbandoned = abandonedObjects.size();
        long claimedItems = abandonedObjects.stream()
            .filter(obj -> obj.getStatus() == DetectionStatus.CLAIMED)
            .count();
        double recoveryRate = totalAbandoned > 0 ? (double) claimedItems / totalAbandoned * 100 : 0;
        stats.put("recoveryRate", Math.round(recoveryRate * 100.0) / 100.0);
        
        // Active cameras
        List<String> activeCameras = activeSessions.stream()
            .map(DetectionSession::getCameraId)
            .distinct()
            .collect(Collectors.toList());
        stats.put("activeCameras", activeCameras);
        
        // Detection trends (hourly for last 24 hours)
        Map<Integer, Long> hourlyTrends = recentDetections.stream()
            .collect(Collectors.groupingBy(
                detection -> detection.getFirstDetected().getHour(),
                Collectors.counting()
            ));
        stats.put("hourlyTrends", hourlyTrends);
        
        return stats;
    }
} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/service/FileStorageService.java =====
package com.recovr.api.service;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.io.Resource;
import org.springframework.core.io.UrlResource;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;
import org.springframework.web.multipart.MultipartFile;

import jakarta.annotation.PostConstruct;
import java.io.IOException;
import java.net.MalformedURLException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.UUID;

@Service
public class FileStorageService {

    @Value("${file.upload-dir:./uploads}")
    private String uploadDir;

    private Path fileStoragePath;

    @PostConstruct
    public void init() {
        this.fileStoragePath = Paths.get(uploadDir).toAbsolutePath().normalize();
        try {
            Files.createDirectories(this.fileStoragePath);
        } catch (Exception ex) {
            throw new RuntimeException("Could not create the directory where the uploaded files will be stored.", ex);
        }
    }

    public String storeFile(MultipartFile file) {
        // Normalize file name
        String originalFileName = StringUtils.cleanPath(file.getOriginalFilename());
        
        try {
            // Check if the file's name contains invalid characters
            if (originalFileName.contains("..")) {
                throw new RuntimeException("Sorry! Filename contains invalid path sequence " + originalFileName);
            }

            // Generate unique file name
            String fileExtension = "";
            if (originalFileName.contains(".")) {
                fileExtension = originalFileName.substring(originalFileName.lastIndexOf("."));
            }
            String newFileName = UUID.randomUUID().toString() + fileExtension;
            
            // Copy file to the target location
            Path targetLocation = fileStoragePath.resolve(newFileName);
            Files.copy(file.getInputStream(), targetLocation, StandardCopyOption.REPLACE_EXISTING);

            return newFileName;
        } catch (IOException ex) {
            throw new RuntimeException("Could not store file " + originalFileName + ". Please try again!", ex);
        }
    }

    public Resource loadFileAsResource(String fileName) {
        try {
            Path filePath = fileStoragePath.resolve(fileName).normalize();
            Resource resource = new UrlResource(filePath.toUri());
            
            if (resource.exists()) {
                return resource;
            } else {
                throw new RuntimeException("File not found " + fileName);
            }
        } catch (MalformedURLException ex) {
            throw new RuntimeException("File not found " + fileName, ex);
        }
    }

    public void deleteFile(String fileName) {
        try {
            Path filePath = fileStoragePath.resolve(fileName).normalize();
            Files.deleteIfExists(filePath);
        } catch (IOException ex) {
            throw new RuntimeException("Could not delete file " + fileName, ex);
        }
    }
}


===== FILE: ./spring-backend/src/main/java/com/recovr/api/service/ItemService.java =====
package com.recovr.api.service;

import com.recovr.api.dto.ItemDto;
import com.recovr.api.entity.Item;
import com.recovr.api.entity.ItemCategory;
import com.recovr.api.entity.ItemStatus;
import com.recovr.api.entity.User;
import com.recovr.api.exception.ResourceNotFoundException;
import com.recovr.api.repository.ItemRepository;
import com.recovr.api.repository.UserRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.time.LocalDateTime;

@Service
@RequiredArgsConstructor
public class ItemService {
    private final ItemRepository itemRepository;
    private final UserRepository userRepository;
    private static final Logger log = LoggerFactory.getLogger(ItemService.class);

    public Page<ItemDto> getAllItems(Pageable pageable, String category, String status) {
        Specification<Item> spec = Specification.where(null);
        
        if (category != null && !category.isEmpty()) {
            final ItemCategory categoryEnum = ItemCategory.valueOf(category.toUpperCase());
            spec = spec.and((root, query, cb) -> cb.equal(root.get("category"), categoryEnum));
        }
        
        if (status != null && !status.isEmpty()) {
            final ItemStatus statusEnum = ItemStatus.valueOf(status.toUpperCase());
            spec = spec.and((root, query, cb) -> cb.equal(root.get("status"), statusEnum));
        }
        
        return itemRepository.findAll(spec, pageable).map(this::convertToDto);
    }

    public ItemDto getItemById(Long id) {
        Item item = itemRepository.findById(id)
            .orElseThrow(() -> new ResourceNotFoundException("Item not found with id: " + id));
        return convertToDto(item);
    }

    @Transactional
    public ItemDto createItem(ItemDto itemDto, User user) {
        Item item = new Item();
        updateItemFromDto(item, itemDto);
        item.setReportedBy(user);
        item.setReportedAt(LocalDateTime.now());
        item.setStatus(ItemStatus.FOUND);
        Item savedItem = itemRepository.save(item);
        return convertToDto(savedItem);
    }

    @Transactional
    public ItemDto updateItem(Long id, ItemDto itemDto) {
        Item item = itemRepository.findById(id)
            .orElseThrow(() -> new ResourceNotFoundException("Item not found with id: " + id));
        updateItemFromDto(item, itemDto);
        return convertToDto(itemRepository.save(item));
    }

    @Transactional
    public void deleteItem(Long id) {
        if (!itemRepository.existsById(id)) {
            throw new RuntimeException("Item not found");
        }
        itemRepository.deleteById(id);
    }

    @Transactional
    public ItemDto claimItem(Long id, User user) {
        Item item = itemRepository.findById(id)
            .orElseThrow(() -> new RuntimeException("Item not found"));

        if (item.getStatus() != ItemStatus.FOUND) {
            throw new RuntimeException("Item cannot be claimed");
        }

        item.setStatus(ItemStatus.CLAIMED);
        item.setClaimedBy(user);
        item.setClaimedAt(LocalDateTime.now());
        item.setUpdatedAt(LocalDateTime.now());

        Item updatedItem = itemRepository.save(item);
        return convertToDto(updatedItem);
    }

    public void updateItemFromDto(Item item, ItemDto dto) {
        log.info("updateItemFromDto received ItemDto: {}", dto);
        try {
            item.setName(dto.getName());
            item.setDescription(dto.getDescription());
            item.setCategory(dto.getCategory());
            item.setStatus(dto.getStatus());
            item.setLocation(dto.getLocation());
            item.setImageUrl(dto.getImageUrl());
        } catch (Exception e) {
            log.error("Error in updateItemFromDto: ", e);
            throw e;
        }
    }

    protected ItemDto convertToDto(Item item) {
        ItemDto dto = new ItemDto();
        dto.setId(item.getId());
        dto.setName(item.getName());
        dto.setDescription(item.getDescription());
        dto.setCategory(item.getCategory());
        dto.setStatus(item.getStatus());
        dto.setLocation(item.getLocation());
        dto.setImageUrl(item.getImageUrl());
        
        if (item.getReportedBy() != null) {
            dto.setReportedById(item.getReportedBy().getId());
            dto.setReportedByUsername(item.getReportedBy().getUsername());
            dto.setReportedAt(item.getReportedAt());
        }
        
        if (item.getClaimedBy() != null) {
            dto.setClaimedById(item.getClaimedBy().getId());
            dto.setClaimedByUsername(item.getClaimedBy().getUsername());
            dto.setClaimedAt(item.getClaimedAt());
        }
        
        dto.setCreatedAt(item.getCreatedAt());
        dto.setUpdatedAt(item.getUpdatedAt());
        
        return dto;
    }
} 


===== FILE: ./spring-backend/src/main/java/com/recovr/api/service/SearchService.java =====
package com.recovr.api.service;

import com.recovr.api.dto.SearchRequestDto;
import com.recovr.api.dto.ImageMatchingDto;
import com.recovr.api.entity.*;
import com.recovr.api.repository.DetectedObjectRepository;
import com.recovr.api.repository.ItemRepository;
import com.recovr.api.repository.SearchRequestRepository;
import com.recovr.api.repository.UserRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.util.*;
import java.util.stream.Collectors;

@Slf4j
@Service
@RequiredArgsConstructor
public class SearchService {

    private final SearchRequestRepository searchRequestRepository;
    private final DetectedObjectRepository detectedObjectRepository;
    private final ItemRepository itemRepository;
    private final UserRepository userRepository;

    /**
     * Create a new search request
     */
    @Transactional
    public SearchRequestDto createSearchRequest(SearchRequestDto requestDto, String username) {
        User user = userRepository.findByUsername(username)
                .orElseThrow(() -> new RuntimeException("User not found"));

        SearchRequest request = new SearchRequest();
        request.setUser(user);
        request.setSearchImageUrl(requestDto.getSearchImageUrl());
        request.setDescription(requestDto.getDescription());
        request.setExpectedCategory(requestDto.getExpectedCategory());
        request.setMatchingThreshold(requestDto.getMatchingThreshold() != null ? 
            requestDto.getMatchingThreshold() : 0.7);
        request.setSearchLocation(requestDto.getSearchLocation());
        request.setSearchLatitude(requestDto.getSearchLatitude());
        request.setSearchLongitude(requestDto.getSearchLongitude());
        request.setSearchRadius(requestDto.getSearchRadius());
        request.setDateLostFrom(requestDto.getDateLostFrom());
        request.setDateLostTo(requestDto.getDateLostTo());
        request.setStatus(SearchStatus.PENDING);
        request.setTotalMatchesFound(0);

        SearchRequest savedRequest = searchRequestRepository.save(request);
        return convertToDto(savedRequest);
    }

    /**
     * Get search results for a request
     */
    @Transactional(readOnly = true)
    public SearchRequestDto getSearchResults(Long searchRequestId) {
        SearchRequest request = searchRequestRepository.findById(searchRequestId)
                .orElseThrow(() -> new RuntimeException("Search request not found"));

        if (request.getStatus() == SearchStatus.PENDING) {
            // Process the search request
            List<ImageMatching> matches = findMatchingItems(request);
            request.setMatchingResults(matches);
            request.setTotalMatchesFound(matches.size());
            request.setStatus(SearchStatus.COMPLETED);
            request.setProcessedAt(LocalDateTime.now());
            searchRequestRepository.save(request);
        }

        return convertToDto(request);
    }

    /**
     * Find items matching the search request
     */
    private List<ImageMatching> findMatchingItems(SearchRequest request) {
        // Get all detected objects within the time window
        List<DetectedObject> candidates = detectedObjectRepository.findByFirstDetectedBetween(
            request.getDateLostFrom() != null ? request.getDateLostFrom() : LocalDateTime.now().minusMonths(1),
            request.getDateLostTo() != null ? request.getDateLostTo() : LocalDateTime.now()
        );

        // Filter by category if specified
        if (request.getExpectedCategory() != null) {
            candidates = candidates.stream()
                .filter(obj -> obj.getCategory() == request.getExpectedCategory())
                .collect(Collectors.toList());
        }

        // Filter by location if specified
        if (request.getSearchLocation() != null && request.getSearchLatitude() != null && 
            request.getSearchLongitude() != null && request.getSearchRadius() != null) {
            // TODO: Implement location-based filtering
            // This would require adding location coordinates to DetectedObject
        }

        // Calculate similarity scores and create matches
        List<ImageMatching> matches = new ArrayList<>();
        for (DetectedObject candidate : candidates) {
            double similarityScore = calculateImageSimilarity(
                request.getSearchImageUrl(),
                candidate.getSnapshotUrl()
            );

            if (similarityScore >= request.getMatchingThreshold()) {
                ImageMatching match = new ImageMatching();
                match.setSearchRequest(request);
                match.setDetectedObject(candidate);
                match.setSimilarityScore(similarityScore);
                matches.add(match);
            }
        }

        // Sort by similarity score
        matches.sort((a, b) -> Double.compare(b.getSimilarityScore(), a.getSimilarityScore()));

        return matches;
    }

    /**
     * Calculate similarity between two images
     * This is a placeholder - in a real implementation, this would use a proper image similarity algorithm
     */
    private double calculateImageSimilarity(String image1Url, String image2Url) {
        // TODO: Implement proper image similarity calculation
        // For now, return a random score for demonstration
        return Math.random();
    }

    /**
     * Convert entity to DTO
     */
    private SearchRequestDto convertToDto(SearchRequest request) {
        SearchRequestDto dto = new SearchRequestDto();
        dto.setId(request.getId());
        dto.setSearchImageUrl(request.getSearchImageUrl());
        dto.setDescription(request.getDescription());
        dto.setExpectedCategory(request.getExpectedCategory());
        dto.setMatchingThreshold(request.getMatchingThreshold());
        dto.setSearchLocation(request.getSearchLocation());
        dto.setSearchLatitude(request.getSearchLatitude());
        dto.setSearchLongitude(request.getSearchLongitude());
        dto.setSearchRadius(request.getSearchRadius());
        dto.setDateLostFrom(request.getDateLostFrom());
        dto.setDateLostTo(request.getDateLostTo());
        dto.setStatus(request.getStatus());
        dto.setTotalMatchesFound(request.getTotalMatchesFound());
        dto.setUserId(request.getUser().getId());
        dto.setUsername(request.getUser().getUsername());
        dto.setProcessedAt(request.getProcessedAt());
        dto.setCreatedAt(request.getCreatedAt());
        dto.setUpdatedAt(request.getUpdatedAt());

        // Convert matching results to DTOs
        if (request.getMatchingResults() != null) {
            List<ImageMatchingDto> matchingDtos = request.getMatchingResults().stream()
                .map(match -> {
                    ImageMatchingDto matchDto = new ImageMatchingDto();
                    matchDto.setDetectedObjectId(match.getDetectedObject().getId());
                    matchDto.setSimilarityScore(match.getSimilarityScore());
                    matchDto.setCategory(match.getDetectedObject().getCategory());
                    matchDto.setLocation(match.getDetectedObject().getCameraLocation());
                    matchDto.setDetectedAt(match.getDetectedObject().getFirstDetected());
                    matchDto.setImageUrl(match.getDetectedObject().getSnapshotUrl());
                    return matchDto;
                })
                .collect(Collectors.toList());
            dto.setMatchingResults(matchingDtos);
        }

        return dto;
    }
} 


===== FILE: ./src/main/java/com/recovr/api/config/SecurityConfig.java =====
package com.recovr.api.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;

@Configuration
@EnableWebSecurity
public class SecurityConfig {
    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http
            .csrf(csrf -> csrf.disable())
            .authorizeHttpRequests(auth -> auth
                .anyRequest().permitAll()
            );
        return http.build();
    }

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }
} 


===== FILE: ./styles/globals.css =====
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  font-family: Arial, Helvetica, sans-serif;
}

@layer utilities {
  .text-balance {
    text-wrap: balance;
  }
}

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 0 0% 3.9%;
    --card: 0 0% 100%;
    --card-foreground: 0 0% 3.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 0 0% 3.9%;
    --primary: 0 0% 9%;
    --primary-foreground: 0 0% 98%;
    --secondary: 0 0% 96.1%;
    --secondary-foreground: 0 0% 9%;
    --muted: 0 0% 96.1%;
    --muted-foreground: 0 0% 45.1%;
    --accent: 0 0% 96.1%;
    --accent-foreground: 0 0% 9%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 89.8%;
    --input: 0 0% 89.8%;
    --ring: 0 0% 3.9%;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
    --radius: 0.5rem;
    --sidebar-background: 0 0% 98%;
    --sidebar-foreground: 240 5.3% 26.1%;
    --sidebar-primary: 240 5.9% 10%;
    --sidebar-primary-foreground: 0 0% 98%;
    --sidebar-accent: 240 4.8% 95.9%;
    --sidebar-accent-foreground: 240 5.9% 10%;
    --sidebar-border: 220 13% 91%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }
  .dark {
    --background: 0 0% 3.9%;
    --foreground: 0 0% 98%;
    --card: 0 0% 3.9%;
    --card-foreground: 0 0% 98%;
    --popover: 0 0% 3.9%;
    --popover-foreground: 0 0% 98%;
    --primary: 0 0% 98%;
    --primary-foreground: 0 0% 9%;
    --secondary: 0 0% 14.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 0 0% 14.9%;
    --muted-foreground: 0 0% 63.9%;
    --accent: 0 0% 14.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 14.9%;
    --input: 0 0% 14.9%;
    --ring: 0 0% 83.1%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
    --sidebar-background: 240 5.9% 10%;
    --sidebar-foreground: 240 4.8% 95.9%;
    --sidebar-primary: 224.3 76.3% 48%;
    --sidebar-primary-foreground: 0 0% 100%;
    --sidebar-accent: 240 3.7% 15.9%;
    --sidebar-accent-foreground: 240 4.8% 95.9%;
    --sidebar-border: 240 3.7% 15.9%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}



===== FILE: ./tailwind.config.ts =====
import type { Config } from "tailwindcss";

const config: Config = {
    darkMode: ["class"],
    content: [
    "./pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./components/**/*.{js,ts,jsx,tsx,mdx}",
    "./app/**/*.{js,ts,jsx,tsx,mdx}",
    "*.{js,ts,jsx,tsx,mdx}"
  ],
  theme: {
  	extend: {
  		colors: {
  			background: 'hsl(var(--background))',
  			foreground: 'hsl(var(--foreground))',
  			card: {
  				DEFAULT: 'hsl(var(--card))',
  				foreground: 'hsl(var(--card-foreground))'
  			},
  			popover: {
  				DEFAULT: 'hsl(var(--popover))',
  				foreground: 'hsl(var(--popover-foreground))'
  			},
  			primary: {
  				DEFAULT: 'hsl(var(--primary))',
  				foreground: 'hsl(var(--primary-foreground))'
  			},
  			secondary: {
  				DEFAULT: 'hsl(var(--secondary))',
  				foreground: 'hsl(var(--secondary-foreground))'
  			},
  			muted: {
  				DEFAULT: 'hsl(var(--muted))',
  				foreground: 'hsl(var(--muted-foreground))'
  			},
  			accent: {
  				DEFAULT: 'hsl(var(--accent))',
  				foreground: 'hsl(var(--accent-foreground))'
  			},
  			destructive: {
  				DEFAULT: 'hsl(var(--destructive))',
  				foreground: 'hsl(var(--destructive-foreground))'
  			},
  			border: 'hsl(var(--border))',
  			input: 'hsl(var(--input))',
  			ring: 'hsl(var(--ring))',
  			chart: {
  				'1': 'hsl(var(--chart-1))',
  				'2': 'hsl(var(--chart-2))',
  				'3': 'hsl(var(--chart-3))',
  				'4': 'hsl(var(--chart-4))',
  				'5': 'hsl(var(--chart-5))'
  			},
  			sidebar: {
  				DEFAULT: 'hsl(var(--sidebar-background))',
  				foreground: 'hsl(var(--sidebar-foreground))',
  				primary: 'hsl(var(--sidebar-primary))',
  				'primary-foreground': 'hsl(var(--sidebar-primary-foreground))',
  				accent: 'hsl(var(--sidebar-accent))',
  				'accent-foreground': 'hsl(var(--sidebar-accent-foreground))',
  				border: 'hsl(var(--sidebar-border))',
  				ring: 'hsl(var(--sidebar-ring))'
  			}
  		},
  		borderRadius: {
  			lg: 'var(--radius)',
  			md: 'calc(var(--radius) - 2px)',
  			sm: 'calc(var(--radius) - 4px)'
  		},
  		keyframes: {
  			'accordion-down': {
  				from: {
  					height: '0'
  				},
  				to: {
  					height: 'var(--radix-accordion-content-height)'
  				}
  			},
  			'accordion-up': {
  				from: {
  					height: 'var(--radix-accordion-content-height)'
  				},
  				to: {
  					height: '0'
  				}
  			}
  		},
  		animation: {
  			'accordion-down': 'accordion-down 0.2s ease-out',
  			'accordion-up': 'accordion-up 0.2s ease-out'
  		}
  	}
  },
  plugins: [require("tailwindcss-animate")],
};
export default config;



===== FILE: ./test_custom_model.py =====
import torch
import torch.nn as nn
import cv2

# --- Placeholder model class ---
class CustomModel(nn.Module):
    def __init__(self):
        super().__init__()
        # Replace with your real model layers
        self.dummy = nn.Identity()
    def forward(self, x):
        return self.dummy(x)

# Load model
model = CustomModel()
try:
    model.load_state_dict(torch.load('../stable_model_epoch_30.pth', map_location='cpu'))
    print('✅ Model weights loaded!')
except Exception as e:
    print('❌ Error loading weights:', e)
model.eval()

# Open video
cap = cv2.VideoCapture('test_videos/stock-footage-shanghai-china-february-passengers-boarding-high-speed-train-at-shanghai-station-on-a.webm')
ret, frame = cap.read()
cap.release()
if not ret:
    print('❌ Could not read frame from video')
    exit(1)

# Preprocess frame (resize, normalize, etc. - adjust as needed)
img = cv2.resize(frame, (640, 640))
img = torch.from_numpy(img).permute(2, 0, 1).float() / 255.0
img = img.unsqueeze(0)

# Run inference
with torch.no_grad():
    output = model(img)
    print('Model output:', output) 


===== FILE: ./test_integration.py =====
#!/usr/bin/env python3
"""
Test script to verify the integration between the model and backend
"""

import requests
import json
import os
import time
from datetime import datetime

API_BASE_URL = "http://localhost:8080/api"

def test_backend_connection():
    """Test if the backend is running"""
    try:
        response = requests.get(f"{API_BASE_URL}/test/ping", timeout=5)
        if response.status_code == 200:
            print("✅ Backend is running")
            print(f"   Response: {response.json()}")
            return True
        else:
            print(f"❌ Backend returned status {response.status_code}")
            return False
    except requests.exceptions.RequestException as e:
        print(f"❌ Cannot connect to backend: {e}")
        return False

def test_file_upload():
    """Test file upload functionality"""
    try:
        # Create a dummy image file for testing
        test_image_path = "test_image.jpg"
        
        # Create a simple test image (1x1 pixel JPEG)
        import io
        from PIL import Image
        
        img = Image.new('RGB', (100, 100), color='red')
        img.save(test_image_path, 'JPEG')
        
        # Upload the file
        with open(test_image_path, 'rb') as f:
            files = {'file': ('test_image.jpg', f, 'image/jpeg')}
            response = requests.post(f"{API_BASE_URL}/files/upload", files=files)
        
        # Clean up
        if os.path.exists(test_image_path):
            os.remove(test_image_path)
        
        if response.status_code == 200:
            file_url = response.text.strip('"')
            print("✅ File upload works")
            print(f"   File URL: {file_url}")
            return file_url
        else:
            print(f"❌ File upload failed: {response.status_code}")
            print(f"   Response: {response.text}")
            return None
            
    except Exception as e:
        print(f"❌ File upload error: {e}")
        return None

def test_detection_session():
    """Test detection session management"""
    try:
        # Start session
        start_url = f"{API_BASE_URL}/detection/sessions/start"
        params = {
            'cameraId': 'test_camera_001',
            'cameraLocation': 'Test Location',
            'modelVersion': 'test_model_v1'
        }
        
        response = requests.post(start_url, params=params)
        
        if response.status_code == 200:
            session_data = response.json()
            session_id = session_data.get('sessionId')
            print("✅ Detection session started")
            print(f"   Session ID: {session_id}")
            
            # End session
            end_url = f"{API_BASE_URL}/detection/sessions/{session_id}/end"
            end_response = requests.post(end_url)
            
            if end_response.status_code == 200:
                print("✅ Detection session ended successfully")
                return True
            else:
                print(f"❌ Failed to end session: {end_response.status_code}")
                return False
                
        else:
            print(f"❌ Failed to start detection session: {response.status_code}")
            print(f"   Response: {response.text}")
            return False
            
    except Exception as e:
        print(f"❌ Detection session error: {e}")
        return False

def test_detection_processing():
    """Test detection data processing"""
    try:
        # Start session first
        start_url = f"{API_BASE_URL}/detection/sessions/start"
        params = {
            'cameraId': 'test_camera_002',
            'cameraLocation': 'Test Location 2',
            'modelVersion': 'test_model_v1'
        }
        
        session_response = requests.post(start_url, params=params)
        if session_response.status_code != 200:
            print("❌ Could not start session for detection test")
            return False
        
        session_id = session_response.json().get('sessionId')
        
        # Upload a test image first
        file_url = test_file_upload()
        if not file_url:
            print("❌ Could not upload test image for detection")
            return False
        
        # Send detection data
        process_url = f"{API_BASE_URL}/detection/process"
        detection_data = {
            'sessionId': session_id,
            'trackingId': 'test_track_001',
            'category': 'ELECTRONICS',
            'confidence': 0.85,
            'x': 100,
            'y': 150,
            'width': 200,
            'height': 300,
            'snapshotUrl': file_url
        }
        
        response = requests.post(process_url, json=detection_data, 
                               headers={'Content-Type': 'application/json'})
        
        if response.status_code == 200:
            result = response.json()
            print("✅ Detection processing works")
            print(f"   Result: {result}")
            
            # End session
            end_url = f"{API_BASE_URL}/detection/sessions/{session_id}/end"
            requests.post(end_url)
            
            return True
        else:
            print(f"❌ Detection processing failed: {response.status_code}")
            print(f"   Response: {response.text}")
            return False
            
    except Exception as e:
        print(f"❌ Detection processing error: {e}")
        return False

def test_detection_queries():
    """Test detection query endpoints"""
    try:
        # Test abandoned objects
        response = requests.get(f"{API_BASE_URL}/detection/abandoned")
        if response.status_code == 200:
            abandoned = response.json()
            print(f"✅ Abandoned objects query works ({len(abandoned)} objects)")
        else:
            print(f"❌ Abandoned objects query failed: {response.status_code}")
        
        # Test recent detections
        response = requests.get(f"{API_BASE_URL}/detection/recent?hoursBack=24")
        if response.status_code == 200:
            recent = response.json()
            print(f"✅ Recent detections query works ({len(recent)} detections)")
        else:
            print(f"❌ Recent detections query failed: {response.status_code}")
        
        # Test stats
        response = requests.get(f"{API_BASE_URL}/detection/stats")
        if response.status_code == 200:
            stats = response.json()
            print("✅ Detection stats query works")
            print(f"   Total detections: {stats.get('totalDetections', 'N/A')}")
        else:
            print(f"❌ Detection stats query failed: {response.status_code}")
        
        return True
        
    except Exception as e:
        print(f"❌ Detection queries error: {e}")
        return False

def main():
    """Run all integration tests"""
    print("🔍 Testing RECOVR Backend Integration")
    print("=" * 50)
    
    tests = [
        ("Backend Connection", test_backend_connection),
        ("File Upload", test_file_upload),
        ("Detection Session", test_detection_session),
        ("Detection Processing", test_detection_processing),
        ("Detection Queries", test_detection_queries),
    ]
    
    results = []
    for test_name, test_func in tests:
        print(f"\n📋 Testing {test_name}...")
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"❌ {test_name} failed with exception: {e}")
            results.append((test_name, False))
    
    # Summary
    print("\n" + "=" * 50)
    print("📊 Test Summary:")
    passed = 0
    for test_name, result in results:
        status = "✅ PASSED" if result else "❌ FAILED"
        print(f"   {test_name}: {status}")
        if result:
            passed += 1
    
    print(f"\nTotal: {passed}/{len(results)} tests passed")
    
    if passed == len(results):
        print("🎉 All tests passed! Your integration is working correctly.")
    else:
        print("⚠️  Some tests failed. Check the backend configuration and try again.")

if __name__ == "__main__":
    main()


===== FILE: ./test_stable_model.py =====
# compare_all_models.py - Test comparatif de tous vos modèles

#!/usr/bin/env python3
"""
Script pour tester une image sur TOUS les modèles STABLE uniquement
Usage: python test_stable_models_image.py
"""
import os
os.environ["KMP_DUPLICATE_LIB_OK"] = "TRUE"
import glob
import torch
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.patches as patches
from PIL import Image
import torchvision.transforms as transforms
import torchvision.models.detection as detection_models
from torchvision.models.detection.faster_rcnn import FastRCNNPredictor
import time
import cv2
from train_improved import get_stable_model
from config_improved import config

# Configuration modèles STABLE
STABLE_MODELS_DIR = "output_stable_training"
IMAGE_SIZE = (320, 320)

# Classes des modèles stable (28 classes)
STABLE_CLASSES = [
    'person', 'backpack', 'suitcase', 'handbag', 'tie',
    'umbrella', 'hair drier', 'toothbrush', 'cell phone',
    'laptop', 'keyboard', 'mouse', 'remote', 'tv',
    'clock', 'microwave', 'bottle', 'cup', 'bowl',
    'knife', 'spoon', 'fork', 'wine glass', 'refrigerator',
    'scissors', 'book', 'vase', 'chair'
]

# Noms français pour affichage
CLASSES_FR = {
    'person': 'Personne',
    'backpack': 'Sac à dos',
    'suitcase': 'Valise',
    'handbag': 'Sac à main',
    'tie': 'Cravate',
    'hair drier': 'Sèche-cheveux',
    'toothbrush': 'Brosse à dents',
    'cell phone': 'Téléphone',
    'laptop': 'Ordinateur portable',
    'keyboard': 'Clavier',
    'mouse': 'Souris',
    'remote': 'Télécommande',
    'tv': 'Télévision',
    'bottle': 'Bouteille',
    'cup': 'Tasse',
    'bowl': 'Bol',
    'knife': 'Couteau',
    'spoon': 'Cuillère',
    'fork': 'Fourchette',
    'wine glass': 'Verre',
    'scissors': 'Ciseaux',
    'book': 'Livre',
    'clock': 'Horloge',
    'umbrella': 'Parapluie',
    'vase': 'Vase',
    'chair': 'Chaise',
    'microwave': 'Micro-ondes',
    'refrigerator': 'Réfrigérateur'
}

def find_stable_models():
    """Trouve tous les modèles stable"""
    if not os.path.exists(STABLE_MODELS_DIR):
        print(f"❌ Dossier non trouvé: {STABLE_MODELS_DIR}")
        return []
    
    model_files = glob.glob(os.path.join(STABLE_MODELS_DIR, "*.pth"))
    
    models = []
    for model_file in model_files:
        filename = os.path.basename(model_file)
        
        # Extraire info du nom
        if 'best' in filename:
            model_type = "🏆 Meilleur"
            priority = 1
        elif 'epoch' in filename:
            epoch_num = extract_epoch_number(filename)
            model_type = f"📅 Époque {epoch_num}"
            priority = 2
        else:
            model_type = "📦 Standard"
            priority = 3
        
        models.append({
            'name': filename,
            'path': model_file,
            'type': model_type,
            'priority': priority,
            'display_name': f"{model_type}"
        })
    
    # Trier par priorité puis par époque
    models.sort(key=lambda x: (x['priority'], extract_epoch_number(x['name'])))
    
    print(f"🔍 {len(models)} modèles STABLE trouvés:")
    for i, model in enumerate(models, 1):
        print(f"  {i:2d}. {model['display_name']:<20} ({model['name']})")
    
    return models

def extract_epoch_number(filename):
    """Extrait le numéro d'époque"""
    import re
    match = re.search(r'epoch_(\d+)', filename)
    return int(match.group(1)) if match else 0

def load_stable_model(model_path):
    """Charge un modèle stable"""
    try:
        device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
        
        model = detection_models.fasterrcnn_resnet50_fpn(weights=None)
        in_features = model.roi_heads.box_predictor.cls_score.in_features
        model.roi_heads.box_predictor = FastRCNNPredictor(in_features, len(STABLE_CLASSES) + 1)
        
        model.load_state_dict(torch.load(model_path, map_location=device))
        model.to(device)
        model.eval()
        
        return model, device
    except Exception as e:
        print(f"❌ Erreur chargement {os.path.basename(model_path)}: {e}")
        return None, None

def preprocess_image(image_path):
    """Prétraite une image"""
    try:
        image = Image.open(image_path).convert('RGB')
        print(f"📷 Image: {os.path.basename(image_path)} - {image.size}")
    except Exception as e:
        print(f"❌ Erreur image: {e}")
        raise
    
    original_image = np.array(image)
    original_size = image.size
    
    # Redimensionner vers la taille d'entraînement
    image_resized = image.resize(IMAGE_SIZE, Image.Resampling.BILINEAR)
    
    # Facteurs d'échelle
    scale_x = original_size[0] / IMAGE_SIZE[0]
    scale_y = original_size[1] / IMAGE_SIZE[1]
    
    # Transformation
    transform = transforms.Compose([
        transforms.ToTensor(),
        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
    ])
    
    image_tensor = transform(image_resized)
    return image_tensor, original_image, (scale_x, scale_y)

def detect_with_stable_model(model, image_tensor, scale_factors, device, confidence_threshold=0.3):
    """Détection avec un modèle stable"""
    if model is None:
        return None
    
    start_time = time.time()
    
    with torch.no_grad():
        image_batch = image_tensor.unsqueeze(0).to(device)
        predictions = model(image_batch)
    
    inference_time = (time.time() - start_time) * 1000  # en ms
    
    # Extraire prédictions
    pred_boxes = predictions[0]['boxes'].cpu().numpy()
    pred_labels = predictions[0]['labels'].cpu().numpy()
    pred_scores = predictions[0]['scores'].cpu().numpy()
    
    # Filtrer par confiance
    mask = pred_scores > confidence_threshold
    pred_boxes = pred_boxes[mask]
    pred_labels = pred_labels[mask]
    pred_scores = pred_scores[mask]
    
    # Remettre à l'échelle
    if len(pred_boxes) > 0:
        scale_x, scale_y = scale_factors
        pred_boxes[:, [0, 2]] *= scale_x
        pred_boxes[:, [1, 3]] *= scale_y
    
    # Analyser les détections
    person_count = 0
    object_count = 0
    class_counts = {}
    
    for label in pred_labels:
        if 1 <= label <= len(STABLE_CLASSES):
            class_name = STABLE_CLASSES[label - 1]
            if class_name == 'person':
                person_count += 1
            else:
                object_count += 1
            
            class_counts[class_name] = class_counts.get(class_name, 0) + 1
    
    return {
        'boxes': pred_boxes,
        'labels': pred_labels,
        'scores': pred_scores,
        'inference_time': inference_time,
        'person_count': person_count,
        'object_count': object_count,
        'total_detections': len(pred_labels),
        'class_counts': class_counts,
        'avg_confidence': np.mean(pred_scores) if len(pred_scores) > 0 else 0.0
    }

def select_test_image():
    """Sélectionne une image de test"""
    # Dossiers possibles
    image_dirs = ['test_images', 'images', 'samples', '.']
    
    selected_dir = None
    for dir_name in image_dirs:
        if os.path.exists(dir_name):
            images = []
            for ext in ['.jpg', '.jpeg', '.png', '.bmp', '.tiff']:
                images.extend(glob.glob(os.path.join(dir_name, f'*{ext}')))
                images.extend(glob.glob(os.path.join(dir_name, f'*{ext.upper()}')))
            
            if images:
                selected_dir = dir_name
                break
    
    if not selected_dir:
        print("❌ Aucun dossier d'images trouvé")
        print("📁 Créez un dossier 'test_images' avec des images")
        return None
    
    # Lister les images disponibles
    images = []
    for ext in ['.jpg', '.jpeg', '.png', '.bmp', '.tiff']:
        images.extend(glob.glob(os.path.join(selected_dir, f'*{ext}')))
        images.extend(glob.glob(os.path.join(selected_dir, f'*{ext.upper()}')))
    
    print(f"\n📁 Images disponibles dans '{selected_dir}':")
    for i, img_path in enumerate(images, 1):
        img_name = os.path.basename(img_path)
        try:
            with Image.open(img_path) as img:
                size_info = f"{img.size[0]}x{img.size[1]}"
        except:
            size_info = "?"
        print(f"  {i:2d}. {img_name:<30} ({size_info})")
    
    # Sélection
    while True:
        try:
            choice = input(f"\nChoisissez une image (1-{len(images)}) ou 'q' pour quitter: ").strip()
            if choice.lower() == 'q':
                return None
            
            idx = int(choice) - 1
            if 0 <= idx < len(images):
                return images[idx]
            else:
                print(f"❌ Choisissez un nombre entre 1 et {len(images)}")
        except ValueError:
            print("❌ Entrez un nombre valide")

def visualize_stable_comparison(original_image, results_dict, image_name, confidence_threshold):
    """Visualise la comparaison des modèles stable"""
    num_models = len(results_dict)
    
    if num_models == 0:
        print("❌ Aucun résultat à afficher")
        return
    
    # Calculer la grille optimale
    cols = min(4, num_models)  # Maximum 4 colonnes
    rows = (num_models + cols - 1) // cols
    
    fig, axes = plt.subplots(rows, cols, figsize=(5*cols, 4*rows))
    
    # S'assurer que axes est toujours une liste
    if rows == 1 and cols == 1:
        axes = [axes]
    elif rows == 1:
        axes = [axes]
    elif cols == 1:
        axes = [[ax] for ax in axes]
        axes = [ax for row in axes for ax in row]
    else:
        axes = axes.flatten()
    
    model_names = list(results_dict.keys())
    
    for i, (model_name, result) in enumerate(results_dict.items()):
        if i >= len(axes):
            break
            
        ax = axes[i]
        
        # Afficher l'image
        ax.imshow(original_image)
        
        if result is not None:
            # Dessiner les détections
            draw_detections_on_axis(ax, result, model_name)
            
            # Titre avec statistiques
            title = f"{model_name}\n"
            title += f"👥 {result['person_count']} • 📦 {result['object_count']} • "
            title += f"⚡ {result['inference_time']:.0f}ms"
            ax.set_title(title, fontsize=10, weight='bold', pad=10)
        else:
            ax.set_title(f"{model_name}\n❌ Erreur", fontsize=10, color='red')
        
        ax.axis('off')
    
    # Masquer les axes non utilisés
    for i in range(len(results_dict), len(axes)):
        axes[i].axis('off')
    
    # Titre général
    fig.suptitle(f'Comparaison Modèles STABLE - {image_name}\nSeuil: {confidence_threshold}', 
                fontsize=16, weight='bold', y=0.95)
    
    plt.tight_layout()
    plt.subplots_adjust(top=0.88)
    
    # Sauvegarder
    output_name = f"stable_comparison_{os.path.splitext(image_name)[0]}.png"
    plt.savefig(output_name, dpi=300, bbox_inches='tight')
    print(f"💾 Comparaison sauvegardée: {output_name}")
    
    plt.show()

def draw_detections_on_axis(ax, result, model_name):
    """Dessine les détections sur un axe"""
    boxes = result['boxes']
    labels = result['labels']
    scores = result['scores']
    
    for box, label, score in zip(boxes, labels, scores):
        if len(box) == 0:
            continue
        
        x1, y1, x2, y2 = box
        
        if 1 <= label <= len(STABLE_CLASSES):
            class_name = STABLE_CLASSES[label - 1]
            
            # Couleur selon le type
            if class_name == 'person':
                color = 'red'
                linewidth = 2
            else:
                color = 'lime'
                linewidth = 1.5
            
            # Rectangle
            rect = patches.Rectangle(
                (x1, y1), x2-x1, y2-y1,
                linewidth=linewidth, edgecolor=color, facecolor='none'
            )
            ax.add_patch(rect)
            
            # Texte (seulement pour les détections de confiance élevée)
            if score > 0.4:
                class_name_fr = CLASSES_FR.get(class_name, class_name)
                ax.text(x1, y1-2, f"{class_name_fr}: {score:.2f}", 
                       color='white', fontsize=8, weight='bold',
                       bbox=dict(facecolor=color, alpha=0.8, pad=1))

def create_performance_table(results_dict):
    """Crée un tableau de performance"""
    print(f"\n{'='*80}")
    print("📊 PERFORMANCE DES MODÈLES STABLE")
    print(f"{'='*80}")
    
    # En-tête
    header = f"{'Modèle':<25} {'Personnes':<9} {'Objets':<7} {'Total':<6} {'Temps':<8} {'Conf Moy':<8}"
    print(header)
    print("-" * 80)
    
    # Trier par nombre total de détections (décroissant)
    sorted_results = sorted(results_dict.items(), 
                          key=lambda x: x[1]['total_detections'] if x[1] else 0, 
                          reverse=True)
    
    for model_name, result in sorted_results:
        if result is not None:
            row = (f"{model_name:<25} "
                  f"{result['person_count']:<9} "
                  f"{result['object_count']:<7} "
                  f"{result['total_detections']:<6} "
                  f"{result['inference_time']:<8.0f} "
                  f"{result['avg_confidence']:<8.3f}")
            print(row)
        else:
            print(f"{model_name:<25} {'❌ ERREUR':<40}")
    
    # Champion
    if sorted_results and sorted_results[0][1] is not None:
        champion = sorted_results[0]
        print(f"\n🏆 CHAMPION DÉTECTIONS: {champion[0]}")
        print(f"   📊 {champion[1]['total_detections']} détections")
        print(f"   ⚡ {champion[1]['inference_time']:.0f}ms")
        print(f"   🎯 Confiance moyenne: {champion[1]['avg_confidence']:.3f}")

def main():
    """Fonction principale"""
    print("="*80)
    print("🧪 TEST IMAGE - MODÈLES STABLE UNIQUEMENT")
    print("="*80)
    
    # Vérifier le dossier
    if not os.path.exists(STABLE_MODELS_DIR):
        print(f"❌ Dossier non trouvé: {STABLE_MODELS_DIR}")
        return
    
    # Trouver les modèles stable
    models = find_stable_models()
    if not models:
        return
    
    # Sélectionner l'image
    image_path = select_test_image()
    if not image_path:
        return
    
    # Seuil de confiance
    conf_thresh = input(f"\nSeuil de confiance (défaut 0.3): ").strip()
    try:
        confidence_threshold = float(conf_thresh) if conf_thresh else 0.3
    except ValueError:
        confidence_threshold = 0.3
    
    print(f"\n🚀 Démarrage du test...")
    print(f"📷 Image: {os.path.basename(image_path)}")
    print(f"🎯 Seuil: {confidence_threshold}")
    print(f"🤖 Modèles STABLE: {len(models)}")
    
    # Prétraiter l'image une seule fois
    image_tensor, original_image, scale_factors = preprocess_image(image_path)
    
    # Tester tous les modèles stable
    results = {}
    
    for i, model_info in enumerate(models, 1):
        model_name = model_info['display_name']
        print(f"\n🧪 Test {i}/{len(models)}: {model_name}")
        
        # Charger et tester le modèle
        model, device = load_stable_model(model_info['path'])
        result = detect_with_stable_model(model, image_tensor, scale_factors, device, confidence_threshold)
        
        results[model_name] = result
        
        if result:
            print(f"   ✅ {result['total_detections']} détections en {result['inference_time']:.0f}ms")
            if result['person_count'] > 0:
                print(f"   👥 {result['person_count']} personne(s) détectée(s)")
        else:
            print(f"   ❌ Échec")
        
        # Libérer la mémoire
        if model:
            del model
            torch.cuda.empty_cache()
    
    # Créer la visualisation comparative
    print(f"\n🎨 Création de la visualisation...")
    visualize_stable_comparison(original_image, results, os.path.basename(image_path), confidence_threshold)
    
    # Afficher le tableau de performance
    create_performance_table(results)
    
    print(f"\n✅ Test des modèles STABLE terminé!")

if __name__ == "__main__":
    main()

# Load model
num_classes = config['num_classes']
model = get_stable_model(num_classes)
model.load_state_dict(torch.load('../stable_model_epoch_30.pth', map_location='cpu'))
model.eval()

# Class names
class_names = config['classes']

# Open video
cap = cv2.VideoCapture('test_videos/stock-footage-shanghai-china-february-passengers-boarding-high-speed-train-at-shanghai-station-on-a.webm')
frame_idx = 0

while True:
    ret, frame = cap.read()
    if not ret:
        break
    # Preprocess frame
    img = cv2.resize(frame, config['image_size'])
    img_tensor = torch.from_numpy(img).permute(2, 0, 1).float() / 255.0
    img_tensor = img_tensor.unsqueeze(0)
    # Inference
    with torch.no_grad():
        outputs = model(img_tensor)[0]
    # Print detections
    print(f'Frame {frame_idx}:')
    for box, label, score in zip(outputs['boxes'], outputs['labels'], outputs['scores']):
        if score >= config['confidence_threshold']:
            class_name = class_names[label-1] if 0 < label <= len(class_names) else str(label.item())
            print(f'  {class_name}: {score:.2f}, box: {box.tolist()}')
    frame_idx += 1
cap.release()
print('✅ Inference complete.')


===== FILE: ./test_stable_models.py =====
#!/usr/bin/env python3
"""
Script pour tester tous les modèles du dossier output_stable_training sur COCO
Usage: python test_stable_models_coco.py
"""

import os
os.environ["KMP_DUPLICATE_LIB_OK"] = "TRUE"
import json
import glob
import torch
import numpy as np
from PIL import Image
import torchvision.transforms as transforms
import torchvision.models.detection as detection_models
from torchvision.models.detection.faster_rcnn import FastRCNNPredictor
import matplotlib.pyplot as plt
from pycocotools.coco import COCO
from tqdm import tqdm
import time

# Configuration des modèles stable training
STABLE_MODELS_DIR = "output_stable_training"
COCO_EVAL_DIR = "coco_evaluation"

# Classes des modèles stable (28 classes)
STABLE_CLASSES = [
    'person', 'backpack', 'suitcase', 'handbag', 'tie',
    'umbrella', 'hair drier', 'toothbrush', 'cell phone',
    'laptop', 'keyboard', 'mouse', 'remote', 'tv',
    'clock', 'microwave', 'bottle', 'cup', 'bowl',
    'knife', 'spoon', 'fork', 'wine glass', 'refrigerator',
    'scissors', 'book', 'vase', 'chair'
]

def check_coco_setup():
    """Vérifie que COCO evaluation est configuré"""
    ann_file = os.path.join(COCO_EVAL_DIR, 'annotations', 'instances_val2017.json')
    img_dir = os.path.join(COCO_EVAL_DIR, 'images', 'val2017')
    
    if not os.path.exists(ann_file):
        print(f"❌ Annotations manquantes: {ann_file}")
        return False
    
    if not os.path.exists(img_dir):
        print(f"❌ Images manquantes: {img_dir}")
        return False
    
    images = glob.glob(os.path.join(img_dir, "*.jpg"))
    print(f"✅ COCO configuré: {len(images)} images disponibles")
    return True

def find_stable_models():
    """Trouve tous les modèles dans output_stable_training"""
    if not os.path.exists(STABLE_MODELS_DIR):
        print(f"❌ Dossier non trouvé: {STABLE_MODELS_DIR}")
        return []
    
    model_files = glob.glob(os.path.join(STABLE_MODELS_DIR, "*.pth"))
    
    models = []
    for model_file in model_files:
        filename = os.path.basename(model_file)
        
        # Extraire info du nom
        if 'best' in filename:
            model_type = "🏆 Meilleur"
            priority = 1
        elif 'epoch' in filename:
            epoch_num = extract_epoch_number(filename)
            model_type = f"📅 Époque {epoch_num}"
            priority = 2
        else:
            model_type = "📦 Standard"
            priority = 3
        
        # Taille du fichier
        size_mb = os.path.getsize(model_file) / (1024 * 1024)
        
        models.append({
            'name': filename,
            'path': model_file,
            'type': model_type,
            'priority': priority,
            'size_mb': size_mb,
            'display_name': f"{model_type} ({filename})"
        })
    
    # Trier par priorité puis par nom
    models.sort(key=lambda x: (x['priority'], x['name']))
    
    print(f"🔍 {len(models)} modèles trouvés dans {STABLE_MODELS_DIR}:")
    for i, model in enumerate(models, 1):
        print(f"  {i:2d}. {model['display_name']:<50} ({model['size_mb']:.1f} MB)")
    
    return models

def extract_epoch_number(filename):
    """Extrait le numéro d'époque du nom de fichier"""
    import re
    match = re.search(r'epoch_(\d+)', filename)
    return int(match.group(1)) if match else 0

def load_coco_test_data(max_images=30):
    """Charge les données de test COCO"""
    ann_file = os.path.join(COCO_EVAL_DIR, 'annotations', 'instances_val2017.json')
    img_dir = os.path.join(COCO_EVAL_DIR, 'images', 'val2017')
    
    print("📊 Chargement COCO...")
    coco = COCO(ann_file)
    
    # Trouver images avec nos classes
    available_class_ids = []
    for class_name in STABLE_CLASSES:
        cat_ids = coco.getCatIds(catNms=[class_name])
        if cat_ids:
            available_class_ids.extend(cat_ids)
    
    print(f"✅ {len(available_class_ids)} classes trouvées dans COCO")
    
    # Sélectionner images
    selected_img_ids = set()
    for class_id in available_class_ids:
        img_ids = coco.getImgIds(catIds=[class_id])
        sample_size = min(3, len(img_ids))  # 3 images par classe max
        import random
        random.seed(42)
        selected_for_class = random.sample(img_ids, sample_size)
        selected_img_ids.update(selected_for_class)
    
    # Limiter le total
    selected_img_ids = list(selected_img_ids)
    if len(selected_img_ids) > max_images:
        selected_img_ids = random.sample(selected_img_ids, max_images)
    
    # Vérifier existence physique
    test_images = []
    for img_id in selected_img_ids:
        img_info = coco.loadImgs([img_id])[0]
        img_path = os.path.join(img_dir, img_info['file_name'])
        
        if os.path.exists(img_path):
            test_images.append({
                'id': img_id,
                'path': img_path,
                'info': img_info
            })
    
    print(f"📷 {len(test_images)} images sélectionnées pour test")
    return coco, test_images

def load_stable_model(model_path, num_classes):
    """Charge un modèle stable"""
    try:
        model = detection_models.fasterrcnn_resnet50_fpn(weights=None)
        in_features = model.roi_heads.box_predictor.cls_score.in_features
        model.roi_heads.box_predictor = FastRCNNPredictor(in_features, num_classes + 1)
        
        device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
        model.load_state_dict(torch.load(model_path, map_location=device))
        model.to(device)
        model.eval()
        
        return model, device
    except Exception as e:
        print(f"❌ Erreur chargement {os.path.basename(model_path)}: {e}")
        return None, None

def calculate_iou(box1, box2):
    """Calcule l'IoU entre deux boîtes"""
    x1 = max(box1[0], box2[0])
    y1 = max(box1[1], box2[1])
    x2 = min(box1[2], box2[2])
    y2 = min(box1[3], box2[3])
    
    if x2 <= x1 or y2 <= y1:
        return 0.0
    
    intersection = (x2 - x1) * (y2 - y1)
    area1 = (box1[2] - box1[0]) * (box1[3] - box1[1])
    area2 = (box2[2] - box2[0]) * (box2[3] - box2[1])
    union = area1 + area2 - intersection
    
    return intersection / union if union > 0 else 0.0

def evaluate_model_on_image(model, image_path, coco, img_id, device, confidence_threshold=0.3):
    """Évalue un modèle sur une image"""
    
    # Prétraitement
    image = Image.open(image_path).convert('RGB')
    transform = transforms.Compose([
        transforms.ToTensor(),
        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
    ])
    
    image_tensor = transform(image).unsqueeze(0).to(device)
    
    # Prédiction avec mesure de temps
    start_time = time.time()
    with torch.no_grad():
        predictions = model(image_tensor)
    inference_time = (time.time() - start_time) * 1000  # en ms
    
    # Extraire prédictions
    pred_boxes = predictions[0]['boxes'].cpu().numpy()
    pred_labels = predictions[0]['labels'].cpu().numpy()
    pred_scores = predictions[0]['scores'].cpu().numpy()
    
    # Filtrer par confiance
    mask = pred_scores > confidence_threshold
    pred_boxes = pred_boxes[mask]
    pred_labels = pred_labels[mask]
    pred_scores = pred_scores[mask]
    
    # Ground truth
    ann_ids = coco.getAnnIds(imgIds=[img_id])
    annotations = coco.loadAnns(ann_ids)
    
    gt_boxes = []
    gt_classes = []
    
    # Mapping des classes
    class_mapping = {}
    for i, class_name in enumerate(STABLE_CLASSES):
        cat_ids = coco.getCatIds(catNms=[class_name])
        if cat_ids:
            class_mapping[cat_ids[0]] = i + 1
    
    for ann in annotations:
        if ann['category_id'] in class_mapping:
            bbox = ann['bbox']  # [x, y, width, height]
            x1, y1, w, h = bbox
            x2, y2 = x1 + w, y1 + h
            
            gt_boxes.append([x1, y1, x2, y2])
            gt_classes.append(class_mapping[ann['category_id']])
    
    # Calcul des métriques
    num_gt = len(gt_boxes)
    num_pred = len(pred_boxes)
    
    if num_gt == 0 and num_pred == 0:
        return {
            'precision': 1.0, 'recall': 1.0, 'f1': 1.0, 
            'tp': 0, 'fp': 0, 'fn': 0, 
            'inference_time': inference_time,
            'avg_confidence': 1.0
        }
    
    if num_gt == 0:
        return {
            'precision': 0.0, 'recall': 1.0, 'f1': 0.0,
            'tp': 0, 'fp': num_pred, 'fn': 0,
            'inference_time': inference_time,
            'avg_confidence': float(np.mean(pred_scores)) if len(pred_scores) > 0 else 0.0
        }
    
    if num_pred == 0:
        return {
            'precision': 1.0, 'recall': 0.0, 'f1': 0.0,
            'tp': 0, 'fp': 0, 'fn': num_gt,
            'inference_time': inference_time,
            'avg_confidence': 0.0
        }
    
    # Matching avec IoU > 0.5
    tp = 0
    matched_gt = set()
    
    for pred_box in pred_boxes:
        best_iou = 0
        best_gt_idx = -1
        
        for gt_idx, gt_box in enumerate(gt_boxes):
            if gt_idx not in matched_gt:
                iou = calculate_iou(pred_box, gt_box)
                if iou > best_iou:
                    best_iou = iou
                    best_gt_idx = gt_idx
        
        if best_iou > 0.5:
            tp += 1
            matched_gt.add(best_gt_idx)
    
    fp = num_pred - tp
    fn = num_gt - tp
    
    precision = tp / num_pred if num_pred > 0 else 0
    recall = tp / num_gt if num_gt > 0 else 0
    f1 = 2 * precision * recall / (precision + recall) if (precision + recall) > 0 else 0
    
    return {
        'precision': float(precision),
        'recall': float(recall),
        'f1': float(f1),
        'tp': int(tp),
        'fp': int(fp),
        'fn': int(fn),
        'inference_time': inference_time,
        'avg_confidence': float(np.mean(pred_scores)) if len(pred_scores) > 0 else 0.0
    }

def run_evaluation():
    """Lance l'évaluation complète"""
    print("="*80)
    print("🧪 TEST MODÈLES STABLE TRAINING SUR COCO")
    print("="*80)
    
    # Vérifications
    if not check_coco_setup():
        return
    
    models = find_stable_models()
    if not models:
        return
    
    # Sélection des modèles
    print(f"\n🎯 OPTIONS:")
    print(f"1. Tester TOUS les modèles ({len(models)})")
    print(f"2. Tester seulement le meilleur")
    print(f"3. Tester les 5 dernières époques")
    
    choice = input("Votre choix (1/2/3): ").strip()
    
    if choice == "2":
        selected_models = [m for m in models if 'best' in m['name']]
        if not selected_models:
            selected_models = models[:1]  # Premier modèle si pas de "best"
    elif choice == "3":
        epoch_models = [m for m in models if 'epoch' in m['name']]
        selected_models = epoch_models[-5:] if len(epoch_models) >= 5 else epoch_models
    else:
        selected_models = models
    
    print(f"\n✅ {len(selected_models)} modèles sélectionnés")
    
    # Charger données de test
    coco, test_images = load_coco_test_data()
    
    if not test_images:
        print("❌ Aucune image de test disponible")
        return
    
    print(f"\n🚀 Démarrage des tests...")
    print(f"📷 Images de test: {len(test_images)}")
    
    # Tests
    all_results = {}
    
    for i, model_info in enumerate(selected_models, 1):
        print(f"\n🧪 Test {i}/{len(selected_models)}: {model_info['display_name']}")
        
        # Charger modèle
        model, device = load_stable_model(model_info['path'], len(STABLE_CLASSES))
        
        if model is None:
            continue
        
        # Évaluer sur toutes les images
        image_results = []
        
        for img_data in tqdm(test_images, desc="Évaluation"):
            try:
                result = evaluate_model_on_image(
                    model, img_data['path'], coco, img_data['id'], device
                )
                image_results.append(result)
            except Exception as e:
                print(f"❌ Erreur sur {img_data['info']['file_name']}: {e}")
                continue
        
        if image_results:
            # Calculer moyennes
            avg_precision = float(np.mean([r['precision'] for r in image_results]))
            avg_recall = float(np.mean([r['recall'] for r in image_results]))
            avg_f1 = float(np.mean([r['f1'] for r in image_results]))
            avg_conf = float(np.mean([r['avg_confidence'] for r in image_results]))
            avg_time = float(np.mean([r['inference_time'] for r in image_results]))
            
            total_tp = int(sum([r['tp'] for r in image_results]))
            total_fp = int(sum([r['fp'] for r in image_results]))
            total_fn = int(sum([r['fn'] for r in image_results]))
            
            all_results[model_info['display_name']] = {
                'precision': avg_precision,
                'recall': avg_recall,
                'f1': avg_f1,
                'confidence': avg_conf,
                'inference_time': avg_time,
                'tp': total_tp,
                'fp': total_fp,
                'fn': total_fn,
                'num_images': len(image_results),
                'file_size_mb': model_info['size_mb']
            }
            
            print(f"✅ F1: {avg_f1:.3f} | Précision: {avg_precision:.3f} | Rappel: {avg_recall:.3f}")
        
        # Libérer mémoire
        del model
        torch.cuda.empty_cache()
    
    # Affichage des résultats
    display_results(all_results)
    
    # Sauvegarde
    save_results(all_results)

def display_results(results):
    """Affiche les résultats de comparaison"""
    if not results:
        print("❌ Aucun résultat à afficher")
        return
    
    print(f"\n{'='*100}")
    print("🏆 RÉSULTATS COMPLETS - MODÈLES STABLE TRAINING")
    print(f"{'='*100}")
    
    # En-tête du tableau
    header = f"{'Modèle':<35} {'F1':<8} {'Précision':<10} {'Rappel':<8} {'Confiance':<10} {'Temps(ms)':<10} {'Taille(MB)':<12}"
    print(header)
    print("-" * 100)
    
    # Trier par F1-Score
    sorted_results = sorted(results.items(), key=lambda x: x[1]['f1'], reverse=True)
    
    for model_name, result in sorted_results:
        row = (f"{model_name:<35} "
               f"{result['f1']:<8.3f} "
               f"{result['precision']:<10.3f} "
               f"{result['recall']:<8.3f} "
               f"{result['confidence']:<10.3f} "
               f"{result['inference_time']:<10.0f} "
               f"{result['file_size_mb']:<12.1f}")
        print(row)
    
    # Champion
    if sorted_results:
        champion = sorted_results[0]
        print(f"\n🏆 CHAMPION: {champion[0]}")
        print(f"   📊 F1-Score: {champion[1]['f1']:.3f}")
        print(f"   🎯 Précision: {champion[1]['precision']:.3f}")
        print(f"   🔍 Rappel: {champion[1]['recall']:.3f}")
        print(f"   ⚡ Vitesse: {champion[1]['inference_time']:.0f}ms par image")
    
    # Analyse
    print(f"\n📈 ANALYSE:")
    best_f1 = max(results.values(), key=lambda x: x['f1'])
    best_speed = min(results.values(), key=lambda x: x['inference_time'])
    best_precision = max(results.values(), key=lambda x: x['precision'])
    
    print(f"   🎯 Meilleur F1-Score: {best_f1['f1']:.3f}")
    print(f"   ⚡ Plus rapide: {best_speed['inference_time']:.0f}ms")
    print(f"   🔍 Meilleure précision: {best_precision['precision']:.3f}")

def save_results(results):
    """Sauvegarde les résultats"""
    output_file = os.path.join(STABLE_MODELS_DIR, 'evaluation_results_coco.json')
    
    try:
        with open(output_file, 'w') as f:
            json.dump(results, f, indent=2)
        
        print(f"\n💾 Résultats sauvegardés: {output_file}")
        
        # Créer aussi un graphique
        create_comparison_chart(results)
        
    except Exception as e:
        print(f"❌ Erreur sauvegarde: {e}")

def create_comparison_chart(results):
    """Crée un graphique de comparaison"""
    if len(results) < 2:
        return
    
    model_names = [name.split('(')[0].strip() for name in results.keys()]  # Noms courts
    f1_scores = [result['f1'] for result in results.values()]
    precisions = [result['precision'] for result in results.values()]
    recalls = [result['recall'] for result in results.values()]
    times = [result['inference_time'] for result in results.values()]
    
    fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(15, 10))
    
    # F1-Scores
    bars1 = ax1.bar(model_names, f1_scores, color='skyblue', alpha=0.8)
    ax1.set_title('F1-Score par Modèle', fontweight='bold')
    ax1.set_ylabel('F1-Score')
    ax1.tick_params(axis='x', rotation=45)
    
    # Ajouter valeurs sur les barres
    for bar, score in zip(bars1, f1_scores):
        ax1.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 0.01,
                f'{score:.3f}', ha='center', va='bottom', fontweight='bold')
    
    # Précision vs Rappel
    ax2.scatter(precisions, recalls, s=100, alpha=0.7, c=f1_scores, cmap='viridis')
    ax2.set_xlabel('Précision')
    ax2.set_ylabel('Rappel')
    ax2.set_title('Précision vs Rappel', fontweight='bold')
    
    # Ajouter labels
    for i, name in enumerate(model_names):
        ax2.annotate(name.split()[1] if len(name.split()) > 1 else name[:10], 
                    (precisions[i], recalls[i]), xytext=(5, 5), 
                    textcoords='offset points', fontsize=8)
    
    # Temps d'inférence
    bars3 = ax3.bar(model_names, times, color='lightcoral', alpha=0.8)
    ax3.set_title('Temps d\'Inférence par Modèle', fontweight='bold')
    ax3.set_ylabel('Temps (ms)')
    ax3.tick_params(axis='x', rotation=45)
    
    # Performance globale (F1 / temps)
    efficiency = [f1/time*1000 for f1, time in zip(f1_scores, times)]  # F1 per second
    bars4 = ax4.bar(model_names, efficiency, color='lightgreen', alpha=0.8)
    ax4.set_title('Efficacité (F1-Score / Temps)', fontweight='bold')
    ax4.set_ylabel('Efficacité')
    ax4.tick_params(axis='x', rotation=45)
    
    plt.tight_layout()
    
    chart_path = os.path.join(STABLE_MODELS_DIR, 'models_comparison_chart.png')
    plt.savefig(chart_path, dpi=300, bbox_inches='tight')
    plt.show()
    
    print(f"📊 Graphique sauvegardé: {chart_path}")

def main():
    """Fonction principale"""
    print("🧪 TEST MODÈLES STABLE TRAINING")
    print("="*50)
    
    if not os.path.exists(STABLE_MODELS_DIR):
        print(f"❌ Dossier non trouvé: {STABLE_MODELS_DIR}")
        return
    
    print(f"📁 Dossier modèles: {STABLE_MODELS_DIR}")
    print(f"📊 Classes testées: {len(STABLE_CLASSES)}")
    
    choice = input("\nLancer l'évaluation COCO des modèles stable? (y/n): ").lower().strip()
    
    if choice == 'y':
        run_evaluation()
    else:
        print("❌ Test annulé")

if __name__ == "__main__":
    main()



===== FILE: ./test_video_read.py =====
import cv2
import sys

print('OpenCV version:', cv2.__version__)

video_path = 'test_videos/stock-footage-shanghai-china-february-passengers-boarding-high-speed-train-at-shanghai-station-on-a.webm'

# Try default backend
cap = cv2.VideoCapture(video_path)
if not cap.isOpened():
    print('❌ Could not open video with default backend.')
    # Try FFMPEG backend if available
    cap = cv2.VideoCapture(video_path, cv2.CAP_FFMPEG)
    if not cap.isOpened():
        print('❌ Could not open video with FFMPEG backend either.')
        sys.exit(1)
    else:
        print('✅ Opened video with FFMPEG backend.')
else:
    print('✅ Opened video with default backend.')

frame_idx = 0
while True:
    ret, frame = cap.read()
    if not ret:
        print('End of video or cannot read frame.')
        break
    print(f'Frame {frame_idx}: shape={frame.shape}, dtype={frame.dtype}')
    frame_idx += 1
    if frame_idx >= 5:
        print('Stopping after 5 frames for test.')
        break
cap.release()
print('✅ Video reading test complete.') 


===== FILE: ./test_yolo_load.py =====
from ultralytics import YOLO
import sys

try:
    print("Trying to load model...", flush=True)
    model = YOLO('../stable_model_epoch_30.pth')
    print("✅ Model loaded successfully!", flush=True)
except Exception as e:
    print("❌ Failed to load model:", e, flush=True)
finally:
    print("[END OF SCRIPT]", flush=True) 


===== FILE: ./train_improved.py =====
# train_stable.py - Version ultra-stabilisée pour éviter les NaN
import os
import torch
import torch.optim as optim
from torch.utils.data import DataLoader
from tqdm import tqdm
import torchvision.models.detection as detection_models
import time
import numpy as np
from PIL import Image
from pycocotools.coco import COCO
from torchvision import transforms
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
import warnings
warnings.filterwarnings('ignore')

# Import de la configuration stabilisée
from config_improved import config

# Optimisations CUDA
torch.backends.cudnn.benchmark = True
os.environ["CUDA_DEVICE_ORDER"] = "PCI_BUS_ID"
os.environ["CUDA_VISIBLE_DEVICES"] = "0"

class StableDataset(torch.utils.data.Dataset):
    """Dataset ultra-stable avec vérifications"""
    
    def __init__(self, coco, img_ids, img_dir, class_ids, config, transform=None):
        self.coco = coco
        self.img_ids = img_ids
        self.img_dir = img_dir
        self.class_ids = class_ids
        self.config = config
        self.transform = transform
        
        # Mapping de catégories COCO vers nos indices
        self.cat_mapping = {cat_id: i + 1 for i, cat_id in enumerate(class_ids)}
        
        print(f"Dataset créé avec {len(img_ids)} images et {len(class_ids)} classes")
    
    def __len__(self):
        return len(self.img_ids)
    
    def __getitem__(self, idx):
        img_id = self.img_ids[idx]
        
        try:
            # Charger l'image avec PIL (plus stable)
            img_info = self.coco.loadImgs([img_id])[0]
            img_path = os.path.join(self.img_dir, img_info['file_name'])
            
            try:
                img = Image.open(img_path).convert('RGB')
            except Exception:
                # Image de secours plus petite
                img = Image.new('RGB', (320, 320), color=(128, 128, 128))
            
            # Redimensionner avec PIL
            img = img.resize(self.config['image_size'], Image.Resampling.BILINEAR)
            img = np.array(img)
            
            height, width = img.shape[:2]
            
            # Récupérer annotations avec vérifications
            ann_ids = self.coco.getAnnIds(imgIds=[img_id], catIds=self.class_ids)
            anns = self.coco.loadAnns(ann_ids)
            
            boxes = []
            labels = []
            areas = []
            
            for ann in anns:
                cat_id = ann['category_id']
                if cat_id in self.class_ids and 'bbox' in ann:
                    bbox = ann['bbox']
                    x1, y1, w, h = bbox
                    
                    # VÉRIFICATIONS STRICTES pour éviter les NaN
                    if w <= 0 or h <= 0:
                        continue
                    
                    x2, y2 = x1 + w, y1 + h
                    
                    # Adapter aux nouvelles dimensions
                    orig_width = max(1, img_info['width'])  # Éviter division par 0
                    orig_height = max(1, img_info['height'])
                    
                    scale_x = width / orig_width
                    scale_y = height / orig_height
                    
                    x1 = x1 * scale_x
                    y1 = y1 * scale_y
                    x2 = x2 * scale_x
                    y2 = y2 * scale_y
                    
                    # VALIDATION STRICTE des coordonnées
                    x1 = max(0, min(x1, width - 2))
                    y1 = max(0, min(y1, height - 2))
                    x2 = max(x1 + 2, min(x2, width))
                    y2 = max(y1 + 2, min(y2, height))
                    
                    # Vérifier la taille finale
                    final_w = x2 - x1
                    final_h = y2 - y1
                    
                    if final_w >= 2 and final_h >= 2:  # Taille minimum absolue
                        # Filtrage spécial pour les personnes
                        if cat_id == self.coco.getCatIds(catNms=['person'])[0]:
                            min_size = self.config['person_detection_params']['min_person_size']
                            if final_w < min_size or final_h < min_size:
                                continue
                        
                        # Vérifier que les valeurs ne sont pas NaN ou inf
                        if all(np.isfinite([x1, y1, x2, y2])):
                            boxes.append([float(x1), float(y1), float(x2), float(y2)])
                            labels.append(int(self.cat_mapping[cat_id]))
                            areas.append(float(final_w * final_h))
            
            # SÉCURITÉ: Toujours avoir au moins une boîte valide ou retourner vide
            if len(boxes) == 0:
                # Créer une boîte factice très petite
                boxes = [[1.0, 1.0, 3.0, 3.0]]
                labels = [1]  # Classe par défaut
                areas = [4.0]
            
            # Convertir en tenseurs avec vérifications
            boxes = torch.as_tensor(boxes, dtype=torch.float32)
            labels = torch.as_tensor(labels, dtype=torch.int64)
            areas = torch.as_tensor(areas, dtype=torch.float32)
            
            # VÉRIFICATION FINALE des tenseurs
            if torch.any(torch.isnan(boxes)) or torch.any(torch.isnan(areas)):
                print(f"⚠️ NaN détecté dans les tenseurs pour image {img_id}")
                # Remplacer par des valeurs sûres
                boxes = torch.tensor([[1.0, 1.0, 3.0, 3.0]], dtype=torch.float32)
                labels = torch.tensor([1], dtype=torch.int64)
                areas = torch.tensor([4.0], dtype=torch.float32)
            
            # Target dict
            target = {
                'boxes': boxes,
                'labels': labels,
                'area': areas,
                'image_id': torch.tensor([img_id]),
                'iscrowd': torch.zeros((len(boxes),), dtype=torch.int64)
            }
            
            # Appliquer les transformations
            if self.transform:
                img = self.transform(img)
            
            return img, target
            
        except Exception as e:
            print(f"❌ Erreur critique image {img_id}: {e}")
            # Retour de secours complet
            img = np.zeros((*self.config['image_size'], 3), dtype=np.uint8)
            if self.transform:
                img = self.transform(img)
            
            target = {
                'boxes': torch.tensor([[1.0, 1.0, 3.0, 3.0]], dtype=torch.float32),
                'labels': torch.tensor([1], dtype=torch.int64),
                'area': torch.tensor([4.0], dtype=torch.float32),
                'image_id': torch.tensor([img_id]),
                'iscrowd': torch.zeros((1,), dtype=torch.int64)
            }
            
            return img, target

def get_stable_model(num_classes):
    """Créer un modèle avec initialisation stable"""
    from torchvision.models.detection.faster_rcnn import FastRCNNPredictor
    
    print("🤖 Chargement du modèle Faster R-CNN...")
    model = detection_models.fasterrcnn_resnet50_fpn(pretrained=True)
    
    # Adapter la couche de classification
    in_features = model.roi_heads.box_predictor.cls_score.in_features
    model.roi_heads.box_predictor = FastRCNNPredictor(in_features, num_classes + 1)
    
    # INITIALISATION STABLE des nouvelles couches
    for module in model.roi_heads.box_predictor.modules():
        if isinstance(module, torch.nn.Linear):
            torch.nn.init.normal_(module.weight, std=0.01)
            torch.nn.init.constant_(module.bias, 0)
    
    return model

def check_for_nan(tensor, name="tensor"):
    """Vérifier les NaN dans un tenseur"""
    if torch.isnan(tensor).any():
        print(f"⚠️ NaN détecté dans {name}")
        return True
    if torch.isinf(tensor).any():
        print(f"⚠️ Inf détecté dans {name}")
        return True
    return False

def safe_backward_pass(loss, model, optimizer, scaler, config):
    """Backward pass sécurisé avec vérifications"""
    
    # Vérifier la loss avant backward
    if check_for_nan(loss, "loss"):
        return False
    
    if loss.item() > 100:  # Loss trop élevée
        print(f"⚠️ Loss très élevée: {loss.item():.3f}")
        return False
    
    try:
        # Backward pass
        if config.get('use_mixed_precision', False):
            scaler.scale(loss).backward()
            
            # Vérifier les gradients
            if config.get('check_gradients', False):
                for name, param in model.named_parameters():
                    if param.grad is not None and check_for_nan(param.grad, f"grad_{name}"):
                        return False
            
            # Gradient clipping
            if config.get('gradient_clipping', 0) > 0:
                scaler.unscale_(optimizer)
                torch.nn.utils.clip_grad_norm_(model.parameters(), config['gradient_clipping'])
            
            scaler.step(optimizer)
            scaler.update()
        else:
            # Mode normal sans mixed precision
            loss.backward()
            
            # Vérifier les gradients
            if config.get('check_gradients', False):
                for name, param in model.named_parameters():
                    if param.grad is not None and check_for_nan(param.grad, f"grad_{name}"):
                        return False
            
            # Gradient clipping
            if config.get('gradient_clipping', 0) > 0:
                torch.nn.utils.clip_grad_norm_(model.parameters(), config['gradient_clipping'])
            
            optimizer.step()
        
        return True
        
    except Exception as e:
        print(f"❌ Erreur dans backward pass: {e}")
        return False

def train_stable_model(model, train_loader, val_loader, config, device):
    """Entraînement ultra-stabilisé"""
    model.to(device)
    
    # Optimiseur SGD (plus stable)
    optimizer = optim.SGD(
        model.parameters(),
        lr=config['learning_rate'],
        momentum=config['momentum'],
        weight_decay=config['weight_decay']
    )
    
    # Scheduler avec warmup
    def lr_lambda(epoch):
        if epoch < config['warmup_epochs']:
            return float(epoch) / float(max(1, config['warmup_epochs']))
        return 0.1 ** (epoch // 10)
    
    scheduler = optim.lr_scheduler.LambdaLR(optimizer, lr_lambda)
    
    # Scaler pour mixed precision (si activé)
    scaler = torch.cuda.amp.GradScaler() if config.get('use_mixed_precision', False) else None
    
    # Historique
    train_losses = []
    best_loss = float('inf')
    nan_count = 0
    
    print("🚀 DÉMARRAGE DE L'ENTRAÎNEMENT STABILISÉ")
    print("="*60)
    print(f"Learning Rate: {config['learning_rate']}")
    print(f"Batch Size: {config['batch_size']}")
    print(f"Mixed Precision: {config.get('use_mixed_precision', False)}")
    print(f"Gradient Clipping: {config.get('gradient_clipping', 0)}")
    
    for epoch in range(config['num_epochs']):
        start_time = time.time()
        print(f"\n📅 Epoch {epoch+1}/{config['num_epochs']}")
        print("="*50)
        
        # === MODE ENTRAÎNEMENT ===
        model.train()
        running_loss = 0.0
        valid_batches = 0
        skipped_batches = 0
        
        progress_bar = tqdm(train_loader, desc=f"Training Epoch {epoch+1}")
        
        for batch_idx, (images, targets) in enumerate(progress_bar):
            # Filtrer les données valides avec vérifications strictes
            valid_data = []
            for img, tgt in zip(images, targets):
                if (len(tgt['boxes']) > 0 and 
                    not torch.isnan(tgt['boxes']).any() and 
                    not torch.isnan(tgt['area']).any()):
                    valid_data.append((img, tgt))
            
            if not valid_data:
                skipped_batches += 1
                continue
            
            images, targets = zip(*valid_data)
            images = list(images)
            targets = list(targets)
            
            images = [img.to(device) for img in images]
            targets = [{k: v.to(device) for k, v in t.items()} for t in targets]
            
            optimizer.zero_grad()
            
            try:
                # Forward pass
                if config.get('use_mixed_precision', False):
                    with torch.cuda.amp.autocast():
                        loss_dict = model(images, targets)
                        total_loss = sum(loss for loss in loss_dict.values())
                else:
                    loss_dict = model(images, targets)
                    total_loss = sum(loss for loss in loss_dict.values())
                
                # Vérifier la loss
                if torch.isnan(total_loss) or torch.isinf(total_loss):
                    print(f"⚠️ NaN/Inf détecté dans la loss au batch {batch_idx}")
                    nan_count += 1
                    if nan_count > 20:  # Trop de NaN
                        print("❌ Trop de NaN détectés, arrêt de l'entraînement")
                        return model
                    continue
                
                # Backward pass sécurisé
                success = safe_backward_pass(total_loss, model, optimizer, scaler, config)
                
                if success:
                    running_loss += total_loss.item()
                    valid_batches += 1
                    
                    # Affichage
                    progress_bar.set_postfix({
                        'loss': f"{total_loss.item():.3f}",
                        'cls': f"{loss_dict.get('loss_classifier', 0):.3f}",
                        'box': f"{loss_dict.get('loss_box_reg', 0):.3f}",
                        'skipped': skipped_batches,
                        'lr': f"{optimizer.param_groups[0]['lr']:.6f}"
                    })
                else:
                    skipped_batches += 1
                    
            except Exception as e:
                print(f"❌ Erreur batch {batch_idx}: {e}")
                skipped_batches += 1
                continue
        
        # Calculer la perte moyenne
        if valid_batches > 0:
            epoch_loss = running_loss / valid_batches
            train_losses.append(epoch_loss)
        else:
            print("❌ Aucun batch valide dans cette époque!")
            continue
        
        # Temps d'époque
        epoch_time = time.time() - start_time
        print(f"🏃 Epoch Loss: {epoch_loss:.4f} | Temps: {epoch_time:.1f}s")
        print(f"📊 Batches valides: {valid_batches}, Ignorés: {skipped_batches}")
        
        # Sauvegarder si meilleur
        if epoch_loss < best_loss:
            best_loss = epoch_loss
            torch.save(model.state_dict(), f"{config['output_dir']}/best_stable_model.pth")
            print("🏆 Meilleur modèle sauvegardé!")
        
        # Sauvegarder régulièrement
        if (epoch + 1) % 5 == 0:
            torch.save(model.state_dict(), f"{config['output_dir']}/stable_model_epoch_{epoch+1}.pth")
        
        # Mettre à jour le learning rate
        scheduler.step()
        
        # Graphique des pertes
        if len(train_losses) > 1:
            plt.figure(figsize=(10, 6))
            plt.plot(range(1, len(train_losses)+1), train_losses, 'b-', label='Training Loss')
            plt.xlabel('Epoch')
            plt.ylabel('Loss')
            plt.title('Progression de l\'entraînement stabilisé')
            plt.legend()
            plt.grid(True, alpha=0.3)
            plt.yscale('log')  # Échelle log pour mieux voir
            plt.savefig(f"{config['output_dir']}/training_progress_stable.png")
            plt.close()
        
        # Nettoyage mémoire
        torch.cuda.empty_cache()
    
    print("\n🎉 ENTRAÎNEMENT TERMINÉ!")
    return model

def collate_fn(batch):
    """Fonction de collation sécurisée"""
    return tuple(zip(*batch))

def main():
    print("="*80)
    print("🛡️ ENTRAÎNEMENT ULTRA-STABILISÉ - ANTI-NaN")
    print("="*80)
    
    # Créer le dossier de sortie
    os.makedirs(config['output_dir'], exist_ok=True)
    
    # Chemins
    COCO_DIR = config['coco_dir']
    TRAIN_ANN_PATH = os.path.join(COCO_DIR, 'annotations', 'instances_train2017.json')
    VAL_ANN_PATH = os.path.join(COCO_DIR, 'annotations', 'instances_val2017.json')
    TRAIN_IMG_DIR = os.path.join(COCO_DIR, 'images', 'train2017')
    VAL_IMG_DIR = os.path.join(COCO_DIR, 'images', 'val2017')
    
    device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
    print(f"🖥️ Device: {device}")
    print(f"📊 Classes configurées: {config['num_classes']}")
    
    # Charger COCO
    print("📋 Chargement des annotations COCO...")
    train_coco = COCO(TRAIN_ANN_PATH)
    val_coco = COCO(VAL_ANN_PATH)
    
    # Obtenir les IDs de classes
    class_ids = []
    found_classes = []
    
    for cls in config['classes']:
        cat_ids = train_coco.getCatIds(catNms=[cls])
        if cat_ids:
            class_ids.append(cat_ids[0])
            found_classes.append(cls)
            print(f"✅ {cls}")
        else:
            print(f"❌ {cls} (non trouvé)")
    
    print(f"\n📈 RÉSUMÉ:")
    print(f"  ✅ Classes trouvées: {len(found_classes)}")
    
    # Vérifier la détection de personnes
    if 'person' in found_classes:
        print("👥 Détection de personnes: ✅ ACTIVÉE")
    else:
        print("⚠️ 'person' non trouvé dans COCO!")
    
    # Obtenir les images
    def find_images_with_objects(coco, class_ids):
        img_ids = set()
        for class_id in class_ids:
            ids = coco.getImgIds(catIds=[class_id])[:2000]  # Limiter pour stabilité
            img_ids.update(ids)
        return sorted(list(img_ids))
    
    train_img_ids = find_images_with_objects(train_coco, class_ids)
    val_img_ids = find_images_with_objects(val_coco, class_ids)
    
    # Split validation
    val_img_ids, test_img_ids = train_test_split(val_img_ids, test_size=0.3, random_state=42)
    
    # Limiter les images
    train_img_ids = train_img_ids[:config['max_train_images']]
    val_img_ids = val_img_ids[:config['max_val_images']]
    
    print(f"📷 Images - Train: {len(train_img_ids)}, Val: {len(val_img_ids)}")
    
    # Transformations minimales (plus stable)
    train_transform = transforms.Compose([
        transforms.ToTensor(),
        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
    ])
    
    val_transform = transforms.Compose([
        transforms.ToTensor(),
        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
    ])
    
    # Datasets stabilisés
    train_dataset = StableDataset(
        train_coco, train_img_ids, TRAIN_IMG_DIR, class_ids, config, train_transform
    )
    
    val_dataset = StableDataset(
        val_coco, val_img_ids, VAL_IMG_DIR, class_ids, config, val_transform
    )
    
    # DataLoaders avec paramètres conservateurs
    train_loader = DataLoader(
        train_dataset,
        batch_size=config['batch_size'],
        shuffle=True,
        collate_fn=collate_fn,
        num_workers=config['num_workers'],
        pin_memory=config['pin_memory'],
        drop_last=True  # Éviter les batches incomplets
    )
    
    val_loader = DataLoader(
        val_dataset,
        batch_size=config['batch_size'],
        shuffle=False,
        collate_fn=collate_fn,
        num_workers=config['num_workers'],
        pin_memory=config['pin_memory']
    )
    
    # Créer le modèle stabilisé
    print("🤖 Chargement du modèle stabilisé...")
    model = get_stable_model(len(class_ids))
    print("✅ Modèle stabilisé chargé!")
    
    # Entraîner
    trained_model = train_stable_model(model, train_loader, val_loader, config, device)
    
    print(f"\n🎊 ENTRAÎNEMENT STABILISÉ TERMINÉ!")
    print(f"📁 Modèles sauvegardés dans: {config['output_dir']}/")
    print(f"🏆 Meilleur modèle: best_stable_model.pth")

if __name__ == "__main__":
    main()


